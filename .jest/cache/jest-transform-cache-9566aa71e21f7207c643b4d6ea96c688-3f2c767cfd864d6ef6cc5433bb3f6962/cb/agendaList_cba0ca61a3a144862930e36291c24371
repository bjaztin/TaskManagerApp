3ff83e5deb74675a0bea0fbe60c04e05
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AgendaSectionHeader = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _get = _interopRequireDefault(require("lodash/get"));
var _map = _interopRequireDefault(require("lodash/map"));
var _isFunction = _interopRequireDefault(require("lodash/isFunction"));
var _isUndefined = _interopRequireDefault(require("lodash/isUndefined"));
var _debounce = _interopRequireDefault(require("lodash/debounce"));
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _xdate = _interopRequireDefault(require("xdate"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _hooks = require("../hooks");
var _momentResolver = require("../momentResolver");
var _dateutils = require("../dateutils");
var _interface = require("../interface");
var _services = require("../services");
var _commons = require("./commons");
var _constants = _interopRequireDefault(require("../commons/constants"));
var _style = _interopRequireDefault(require("./style"));
var _Context = _interopRequireDefault(require("./Context"));
var _infiniteAgendaList = _interopRequireDefault(require("./infiniteAgendaList"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var viewabilityConfig = {
  itemVisiblePercentThreshold: 20
};
var AgendaList = function AgendaList(props) {
  var _sections$;
  if (props.infiniteListProps) {
    return (0, _jsxRuntime.jsx)(_infiniteAgendaList.default, _objectSpread({}, props));
  }
  var theme = props.theme,
    sections = props.sections,
    scrollToNextEvent = props.scrollToNextEvent,
    _props$viewOffset = props.viewOffset,
    viewOffset = _props$viewOffset === void 0 ? 0 : _props$viewOffset,
    avoidDateUpdates = props.avoidDateUpdates,
    onScroll = props.onScroll,
    onMomentumScrollBegin = props.onMomentumScrollBegin,
    onMomentumScrollEnd = props.onMomentumScrollEnd,
    onScrollToIndexFailed = props.onScrollToIndexFailed,
    renderSectionHeader = props.renderSectionHeader,
    sectionStyle = props.sectionStyle,
    keyExtractor = props.keyExtractor,
    dayFormatter = props.dayFormatter,
    _props$dayFormat = props.dayFormat,
    dayFormat = _props$dayFormat === void 0 ? 'dddd, MMM d' : _props$dayFormat,
    useMoment = props.useMoment,
    _props$markToday = props.markToday,
    markToday = _props$markToday === void 0 ? true : _props$markToday,
    onViewableItemsChanged = props.onViewableItemsChanged;
  var _useContext = (0, _react.useContext)(_Context.default),
    date = _useContext.date,
    updateSource = _useContext.updateSource,
    setDate = _useContext.setDate,
    setDisabled = _useContext.setDisabled;
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var list = (0, _react.useRef)();
  var _topSection = (0, _react.useRef)((_sections$ = sections[0]) == null ? void 0 : _sections$.title);
  var didScroll = (0, _react.useRef)(false);
  var sectionScroll = (0, _react.useRef)(false);
  var sectionHeight = (0, _react.useRef)(0);
  (0, _react.useEffect)(function () {
    if (date !== _topSection.current) {
      setTimeout(function () {
        scrollToSection(date);
      }, 500);
    }
  }, []);
  (0, _hooks.useDidUpdate)(function () {
    if (updateSource !== _commons.UpdateSources.LIST_DRAG && updateSource !== _commons.UpdateSources.CALENDAR_INIT) {
      scrollToSection(date);
    }
  }, [date]);
  var getSectionIndex = function getSectionIndex(date) {
    var i;
    (0, _map.default)(sections, function (section, index) {
      if (section.title === date) {
        i = index;
      }
    });
    return i;
  };
  var getNextSectionIndex = function getNextSectionIndex(date) {
    var i = 0;
    for (var j = 1; j < sections.length; j++) {
      var _sections, _sections$j;
      var prev = (0, _interface.parseDate)((_sections = sections[j - 1]) == null ? void 0 : _sections.title);
      var next = (0, _interface.parseDate)((_sections$j = sections[j]) == null ? void 0 : _sections$j.title);
      var cur = new _xdate.default(date);
      if ((0, _dateutils.isGTE)(cur, prev) && (0, _dateutils.isGTE)(next, cur)) {
        i = (0, _dateutils.sameDate)(prev, cur) ? j - 1 : j;
        break;
      } else if ((0, _dateutils.isGTE)(cur, next)) {
        i = j;
      }
    }
    return i;
  };
  var getSectionTitle = (0, _react.useCallback)(function (title) {
    if (!title) return;
    var sectionTitle = title;
    if (dayFormatter) {
      sectionTitle = dayFormatter(title);
    } else if (dayFormat) {
      if (useMoment) {
        var moment = (0, _momentResolver.getMoment)();
        sectionTitle = moment(title).format(dayFormat);
      } else {
        sectionTitle = new _xdate.default(title).toString(dayFormat);
      }
    }
    if (markToday) {
      var string = (0, _services.getDefaultLocale)().today || _commons.todayString;
      var today = (0, _dateutils.isToday)(title);
      sectionTitle = today ? `${string}, ${sectionTitle}` : sectionTitle;
    }
    return sectionTitle;
  }, []);
  var scrollToSection = (0, _react.useCallback)((0, _debounce.default)(function (d) {
    var sectionIndex = scrollToNextEvent ? getNextSectionIndex(d) : getSectionIndex(d);
    if ((0, _isUndefined.default)(sectionIndex)) {
      return;
    }
    if (list != null && list.current && sectionIndex !== undefined) {
      var _sections$sectionInde;
      sectionScroll.current = true;
      _topSection.current = (_sections$sectionInde = sections[sectionIndex]) == null ? void 0 : _sections$sectionInde.title;
      list == null ? void 0 : list.current.scrollToLocation({
        animated: true,
        sectionIndex: sectionIndex,
        itemIndex: 1,
        viewPosition: 0,
        viewOffset: (_constants.default.isAndroid ? sectionHeight.current : 0) + viewOffset
      });
    }
  }, 1000, {
    leading: false,
    trailing: true
  }), [viewOffset, sections]);
  var _onViewableItemsChanged = (0, _react.useCallback)(function (info) {
    if (info != null && info.viewableItems && !sectionScroll.current) {
      var topSection = (0, _get.default)(info == null ? void 0 : info.viewableItems[0], 'section.title');
      if (topSection && topSection !== _topSection.current) {
        _topSection.current = topSection;
        if (didScroll.current && !avoidDateUpdates) {
          setDate == null ? void 0 : setDate(_topSection.current, _commons.UpdateSources.LIST_DRAG);
        }
      }
    }
    onViewableItemsChanged == null ? void 0 : onViewableItemsChanged(info);
  }, [avoidDateUpdates, setDate, onViewableItemsChanged]);
  var _onScroll = (0, _react.useCallback)(function (event) {
    if (!didScroll.current) {
      didScroll.current = true;
      scrollToSection.cancel();
    }
    onScroll == null ? void 0 : onScroll(event);
  }, [onScroll]);
  var _onMomentumScrollBegin = (0, _react.useCallback)(function (event) {
    setDisabled == null ? void 0 : setDisabled(true);
    onMomentumScrollBegin == null ? void 0 : onMomentumScrollBegin(event);
  }, [onMomentumScrollBegin, setDisabled]);
  var _onMomentumScrollEnd = (0, _react.useCallback)(function (event) {
    sectionScroll.current = false;
    setDisabled == null ? void 0 : setDisabled(false);
    onMomentumScrollEnd == null ? void 0 : onMomentumScrollEnd(event);
  }, [onMomentumScrollEnd, setDisabled]);
  var headerTextStyle = (0, _react.useMemo)(function () {
    return [style.current.sectionText, sectionStyle];
  }, [sectionStyle]);
  var _onScrollToIndexFailed = (0, _react.useCallback)(function (info) {
    if (onScrollToIndexFailed) {
      onScrollToIndexFailed(info);
    } else {
      console.log('onScrollToIndexFailed info: ', info);
    }
  }, [onScrollToIndexFailed]);
  var onHeaderLayout = (0, _react.useCallback)(function (event) {
    sectionHeight.current = event.nativeEvent.layout.height;
  }, []);
  var _renderSectionHeader = (0, _react.useCallback)(function (info) {
    var _info$section;
    var title = info == null ? void 0 : (_info$section = info.section) == null ? void 0 : _info$section.title;
    if (renderSectionHeader) {
      return renderSectionHeader(title);
    }
    var headerTitle = getSectionTitle(title);
    return (0, _jsxRuntime.jsx)(AgendaSectionHeader, {
      title: headerTitle,
      style: headerTextStyle,
      onLayout: onHeaderLayout
    });
  }, [headerTextStyle]);
  var _keyExtractor = (0, _react.useCallback)(function (item, index) {
    return (0, _isFunction.default)(keyExtractor) ? keyExtractor(item, index) : String(index);
  }, [keyExtractor]);
  return (0, _jsxRuntime.jsx)(_reactNative.SectionList, _objectSpread(_objectSpread({
    stickySectionHeadersEnabled: true
  }, props), {}, {
    ref: list,
    keyExtractor: _keyExtractor,
    showsVerticalScrollIndicator: false,
    onViewableItemsChanged: _onViewableItemsChanged,
    viewabilityConfig: viewabilityConfig,
    renderSectionHeader: _renderSectionHeader,
    onScroll: _onScroll,
    onMomentumScrollBegin: _onMomentumScrollBegin,
    onMomentumScrollEnd: _onMomentumScrollEnd,
    onScrollToIndexFailed: _onScrollToIndexFailed
  }));
};
function areTextPropsEqual(prev, next) {
  return (0, _isEqual.default)(prev.style, next.style) && prev.title === next.title;
}
var AgendaSectionHeader = _react.default.memo(function (props) {
  return (0, _jsxRuntime.jsx)(_reactNative.Text, {
    allowFontScaling: false,
    style: props.style,
    onLayout: props.onLayout,
    children: props.title
  });
}, areTextPropsEqual);
exports.AgendaSectionHeader = AgendaSectionHeader;
var _default = AgendaList;
exports.default = _default;
AgendaList.displayName = 'AgendaList';
AgendaList.propTypes = {
  dayFormat: _propTypes.default.string,
  dayFormatter: _propTypes.default.func,
  useMoment: _propTypes.default.bool,
  markToday: _propTypes.default.bool,
  sectionStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number, _propTypes.default.array]),
  avoidDateUpdates: _propTypes.default.bool
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,