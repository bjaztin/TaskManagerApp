e59a5c955e0f6c9fad0555440b5f8037
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getCalendarDateString = getCalendarDateString;
exports.getDefaultLocale = getDefaultLocale;
var _isUndefined = _interopRequireDefault(require("lodash/isUndefined"));
var _isDate = _interopRequireDefault(require("lodash/isDate"));
var _isString = _interopRequireDefault(require("lodash/isString"));
var _isNumber = _interopRequireDefault(require("lodash/isNumber"));
var _xdate = _interopRequireDefault(require("xdate"));
var _require = require("../dateutils"),
  getLocale = _require.getLocale;
var _require2 = require("../interface"),
  padNumber = _require2.padNumber,
  toMarkingFormat = _require2.toMarkingFormat;
function getCalendarDateString(date) {
  if (!(0, _isUndefined.default)(date)) {
    if ((0, _isDate.default)(date) && !isNaN(date.getFullYear())) {
      return date.getFullYear() + '-' + padNumber(date.getMonth() + 1) + '-' + padNumber(date.getDate());
    } else if ((0, _isString.default)(date)) {
      return toMarkingFormat(new _xdate.default(date, false));
    } else if ((0, _isNumber.default)(date)) {
      return toMarkingFormat(new _xdate.default(date, true));
    }
    throw 'Invalid Date';
  }
}
function getDefaultLocale() {
  return getLocale();
}
var _default = {
  getCalendarDateString: getCalendarDateString,
  getDefaultLocale: getDefaultLocale
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaXNVbmRlZmluZWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9pc0RhdGUiLCJfaXNTdHJpbmciLCJfaXNOdW1iZXIiLCJfeGRhdGUiLCJfcmVxdWlyZSIsImdldExvY2FsZSIsIl9yZXF1aXJlMiIsInBhZE51bWJlciIsInRvTWFya2luZ0Zvcm1hdCIsImdldENhbGVuZGFyRGF0ZVN0cmluZyIsImRhdGUiLCJpc1VuZGVmaW5lZCIsImlzRGF0ZSIsImlzTmFOIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJpc1N0cmluZyIsIlhEYXRlIiwiaXNOdW1iZXIiLCJnZXREZWZhdWx0TG9jYWxlIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc1VuZGVmaW5lZCBmcm9tICdsb2Rhc2gvaXNVbmRlZmluZWQnO1xuaW1wb3J0IGlzRGF0ZSBmcm9tICdsb2Rhc2gvaXNEYXRlJztcbmltcG9ydCBpc1N0cmluZyBmcm9tICdsb2Rhc2gvaXNTdHJpbmcnO1xuaW1wb3J0IGlzTnVtYmVyIGZyb20gJ2xvZGFzaC9pc051bWJlcic7XG5pbXBvcnQgWERhdGUgZnJvbSAneGRhdGUnO1xuY29uc3QgeyBnZXRMb2NhbGUgfSA9IHJlcXVpcmUoJy4uL2RhdGV1dGlscycpO1xuY29uc3QgeyBwYWROdW1iZXIsIHRvTWFya2luZ0Zvcm1hdCB9ID0gcmVxdWlyZSgnLi4vaW50ZXJmYWNlJyk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FsZW5kYXJEYXRlU3RyaW5nKGRhdGUpIHtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKGRhdGUpKSB7XG4gICAgICAgIGlmIChpc0RhdGUoZGF0ZSkgJiYgIWlzTmFOKGRhdGUuZ2V0RnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgKyAnLScgKyBwYWROdW1iZXIoZGF0ZS5nZXRNb250aCgpICsgMSkgKyAnLScgKyBwYWROdW1iZXIoZGF0ZS5nZXREYXRlKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzU3RyaW5nKGRhdGUpKSB7XG4gICAgICAgICAgICAvLyBpc3N1ZSB3aXRoIHN0cmluZ3MgYW5kIFhEYXRlJ3MgdXRjLW1vZGUgLSByZXR1cm5zIG9uZSBkYXkgYmVmb3JlXG4gICAgICAgICAgICByZXR1cm4gdG9NYXJraW5nRm9ybWF0KG5ldyBYRGF0ZShkYXRlLCBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTnVtYmVyKGRhdGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9NYXJraW5nRm9ybWF0KG5ldyBYRGF0ZShkYXRlLCB0cnVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgJ0ludmFsaWQgRGF0ZSc7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRMb2NhbGUoKSB7XG4gICAgcmV0dXJuIGdldExvY2FsZSgpO1xufVxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGdldENhbGVuZGFyRGF0ZVN0cmluZyxcbiAgICBnZXREZWZhdWx0TG9jYWxlXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsU0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsU0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksTUFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssUUFBQSxHQUFzQkwsT0FBTyxlQUFlLENBQUM7RUFBckNNLFNBQVMsR0FBQUQsUUFBQSxDQUFUQyxTQUFTO0FBQ2pCLElBQUFDLFNBQUEsR0FBdUNQLE9BQU8sZUFBZSxDQUFDO0VBQXREUSxTQUFTLEdBQUFELFNBQUEsQ0FBVEMsU0FBUztFQUFFQyxlQUFlLEdBQUFGLFNBQUEsQ0FBZkUsZUFBZTtBQUMzQixTQUFTQyxxQkFBcUJBLENBQUNDLElBQUksRUFBRTtFQUN4QyxJQUFJLENBQUMsSUFBQUMsb0JBQVcsRUFBQ0QsSUFBSSxDQUFDLEVBQUU7SUFDcEIsSUFBSSxJQUFBRSxlQUFNLEVBQUNGLElBQUksQ0FBQyxJQUFJLENBQUNHLEtBQUssQ0FBQ0gsSUFBSSxDQUFDSSxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUU7TUFDNUMsT0FBT0osSUFBSSxDQUFDSSxXQUFXLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBR1AsU0FBUyxDQUFDRyxJQUFJLENBQUNLLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHUixTQUFTLENBQUNHLElBQUksQ0FBQ00sT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN0RyxDQUFDLE1BQ0ksSUFBSSxJQUFBQyxpQkFBUSxFQUFDUCxJQUFJLENBQUMsRUFBRTtNQUVyQixPQUFPRixlQUFlLENBQUMsSUFBSVUsY0FBSyxDQUFDUixJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbEQsQ0FBQyxNQUNJLElBQUksSUFBQVMsaUJBQVEsRUFBQ1QsSUFBSSxDQUFDLEVBQUU7TUFDckIsT0FBT0YsZUFBZSxDQUFDLElBQUlVLGNBQUssQ0FBQ1IsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pEO0lBQ0EsTUFBTSxjQUFjO0VBQ3hCO0FBQ0o7QUFDTyxTQUFTVSxnQkFBZ0JBLENBQUEsRUFBRztFQUMvQixPQUFPZixTQUFTLENBQUMsQ0FBQztBQUN0QjtBQUFDLElBQUFnQixRQUFBLEdBQ2M7RUFDWFoscUJBQXFCLEVBQXJCQSxxQkFBcUI7RUFDckJXLGdCQUFnQixFQUFoQkE7QUFDSixDQUFDO0FBQUFFLE9BQUEsQ0FBQUMsT0FBQSxHQUFBRixRQUFBIn0=