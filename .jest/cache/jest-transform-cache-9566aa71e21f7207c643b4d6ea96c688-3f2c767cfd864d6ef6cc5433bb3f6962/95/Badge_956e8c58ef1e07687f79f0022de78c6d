2b15254af7e3b2179b183fac31597628
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Badge = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _helpers = require("../helpers");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Badge = function Badge(props) {
  var _a;
  var containerStyle = props.containerStyle,
    textStyle = props.textStyle,
    textProps = props.textProps,
    badgeStyle = props.badgeStyle,
    onPress = props.onPress,
    _props$Component = props.Component,
    Component = _props$Component === void 0 ? onPress ? _reactNative.TouchableOpacity : _reactNative.View : _props$Component,
    value = props.value,
    theme = props.theme,
    _props$status = props.status,
    status = _props$status === void 0 ? 'primary' : _props$status,
    attributes = __rest(props, ["containerStyle", "textStyle", "textProps", "badgeStyle", "onPress", "Component", "value", "theme", "status"]);
  var element = (0, _helpers.renderNode)(_reactNative.Text, value, Object.assign({
    style: _reactNative.StyleSheet.flatten([styles.text, textStyle && textStyle])
  }, textProps));
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([containerStyle && containerStyle]),
    children: (0, _jsxRuntime.jsx)(Component, _objectSpread(_objectSpread({}, attributes), {}, {
      style: _reactNative.StyleSheet.flatten([{
        alignSelf: 'center',
        minWidth: size,
        height: size,
        borderRadius: size / 2,
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a[status],
        borderWidth: _reactNative.StyleSheet.hairlineWidth,
        borderColor: '#fff'
      }, !element && styles.miniBadge, badgeStyle && badgeStyle]),
      onPress: onPress,
      children: element
    }))
  });
};
exports.Badge = Badge;
var size = 18;
var miniSize = 8;
var styles = _reactNative.StyleSheet.create({
  miniBadge: {
    paddingHorizontal: 0,
    paddingVertical: 0,
    minWidth: miniSize,
    height: miniSize,
    borderRadius: miniSize / 2
  },
  text: {
    fontSize: 12,
    color: 'white',
    paddingHorizontal: 4
  }
});
var _default = (0, _config.withTheme)(Badge, 'Badge');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,