4aca5e590f05ffd8ded287e0dc5e1aab
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _isFunction = _interopRequireDefault(require("lodash/isFunction"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _dateutils = require("../../dateutils");
var _services = require("../../services");
var _testIDs = require("../../testIDs");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var Reservation = function (_Component) {
  (0, _inherits2.default)(Reservation, _Component);
  var _super = _createSuper(Reservation);
  function Reservation(props) {
    var _this;
    (0, _classCallCheck2.default)(this, Reservation);
    _this = _super.call(this, props);
    _this.style = (0, _style.default)(props.theme);
    return _this;
  }
  (0, _createClass2.default)(Reservation, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      var d1 = this.props.date;
      var d2 = nextProps.date;
      var r1 = this.props.item;
      var r2 = nextProps.item;
      var changed = true;
      if (!d1 && !d2) {
        changed = false;
      } else if (d1 && d2) {
        if (d1.getTime() !== d2.getTime()) {
          changed = true;
        } else if (!r1 && !r2) {
          changed = false;
        } else if (r1 && r2) {
          if (!d1 && !d2 || d1 && d2) {
            if ((0, _isFunction.default)(this.props.rowHasChanged)) {
              changed = this.props.rowHasChanged(r1, r2);
            }
          }
        }
      }
      return changed;
    }
  }, {
    key: "renderDate",
    value: function renderDate() {
      var _this$props = this.props,
        item = _this$props.item,
        date = _this$props.date,
        renderDay = _this$props.renderDay;
      if ((0, _isFunction.default)(renderDay)) {
        return renderDay(date, item);
      }
      var today = date && (0, _dateutils.isToday)(date) ? this.style.today : undefined;
      var dayNames = (0, _services.getDefaultLocale)().dayNamesShort;
      if (date) {
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: this.style.day,
          testID: _testIDs.RESERVATION_DATE,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            allowFontScaling: false,
            style: [this.style.dayNum, today],
            children: date.getDate()
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            allowFontScaling: false,
            style: [this.style.dayText, today],
            children: dayNames ? dayNames[date.getDay()] : undefined
          })]
        });
      }
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: this.style.day
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        item = _this$props2.item,
        date = _this$props2.date,
        renderItem = _this$props2.renderItem,
        renderEmptyDate = _this$props2.renderEmptyDate;
      var content;
      if (item) {
        var firstItem = date ? true : false;
        if ((0, _isFunction.default)(renderItem)) {
          content = renderItem(item, firstItem);
        }
      } else if ((0, _isFunction.default)(renderEmptyDate)) {
        content = renderEmptyDate(date);
      }
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: this.style.container,
        children: [this.renderDate(), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: this.style.innerContainer,
          children: content
        })]
      });
    }
  }]);
  return Reservation;
}(_react.Component);
Reservation.displayName = 'Reservation';
Reservation.propTypes = {
  date: _propTypes.default.any,
  item: _propTypes.default.any,
  theme: _propTypes.default.object,
  rowHasChanged: _propTypes.default.func,
  renderDay: _propTypes.default.func,
  renderItem: _propTypes.default.func,
  renderEmptyDate: _propTypes.default.func
};
var _default = Reservation;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,