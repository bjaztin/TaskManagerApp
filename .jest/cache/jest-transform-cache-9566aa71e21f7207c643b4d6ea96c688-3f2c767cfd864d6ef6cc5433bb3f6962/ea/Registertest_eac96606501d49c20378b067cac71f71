d8b47eaa1a7532d34dd9f36ea0468bf4
_getJestObj().mock("firebase/firestore", function () {
  return {
    doc: jest.fn(),
    setDoc: jest.fn(),
    getFirestore: jest.fn()
  };
});
_getJestObj().mock("firebase/auth", function () {
  return {
    createUserWithEmailAndPassword: jest.fn(function () {
      return Promise.resolve({
        user: {
          email: "adminTest@example.com"
        }
      });
    }),
    getReactNativePersistence: jest.fn(),
    initializeAuth: jest.fn()
  };
});
_getJestObj().mock("firebase/app", function () {
  return {
    initializeApp: jest.fn(),
    initializeAuth: jest.fn()
  };
});
_getJestObj().mock("@react-native-async-storage/async-storage", function () {
  return {
    ReactNativeAsyncStorage: jest.fn(),
    getReactNativePersistence: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Register = _interopRequireDefault(require("../../src/screens/Register"));
var _auth = require("firebase/auth");
var _firebase = require("../../firebase");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigateMock = jest.fn();
describe("Register Component", function () {
  test("renders the Register screen correctly", function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Register.default, {})),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    expect(getByText("Create Account")).toBeTruthy();
    expect(getByTestId("name")).toBeDefined();
    expect(getByTestId("email")).toBeDefined();
    expect(getByTestId("password")).toBeDefined();
    expect(getByTestId("signup")).toBeDefined();
  });
  test("handles user input and registration correctly", (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Register.default, {
        navigation: {
          navigate: navigateMock
        }
      })),
      getByTestId = _render2.getByTestId;
    var name = "Addison Dae";
    var email = "addison.dae@example.com";
    var password = "testpassword";
    _reactNative.fireEvent.changeText(getByTestId("name"), name);
    _reactNative.fireEvent.changeText(getByTestId("email"), email);
    _reactNative.fireEvent.changeText(getByTestId("password"), password);
    _reactNative.fireEvent.press(getByTestId("signup"));
    yield (0, _reactNative.waitFor)(function () {
      expect(_auth.createUserWithEmailAndPassword).toHaveBeenCalledWith(_firebase.auth, email, password);
      expect(navigateMock).toBeDefined();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJkb2MiLCJqZXN0IiwiZm4iLCJzZXREb2MiLCJnZXRGaXJlc3RvcmUiLCJjcmVhdGVVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInVzZXIiLCJlbWFpbCIsImdldFJlYWN0TmF0aXZlUGVyc2lzdGVuY2UiLCJpbml0aWFsaXplQXV0aCIsImluaXRpYWxpemVBcHAiLCJSZWFjdE5hdGl2ZUFzeW5jU3RvcmFnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX1JlZ2lzdGVyIiwiX2F1dGgiLCJfZmlyZWJhc2UiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwibmF2aWdhdGVNb2NrIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJnZXRCeVRlc3RJZCIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJ0b0JlRGVmaW5lZCIsIl9yZW5kZXIyIiwibmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwibmFtZSIsInBhc3N3b3JkIiwiZmlyZUV2ZW50IiwiY2hhbmdlVGV4dCIsInByZXNzIiwid2FpdEZvciIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiYXV0aCJdLCJzb3VyY2VzIjpbIlJlZ2lzdGVyLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBSZWdpc3RlciBmcm9tIFwiLi4vLi4vc3JjL3NjcmVlbnMvUmVnaXN0ZXJcIjtcbmltcG9ydCB7IGNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCB9IGZyb20gXCJmaXJlYmFzZS9hdXRoXCI7XG5pbXBvcnQgeyBhdXRoIH0gZnJvbSBcIi4uLy4uL2ZpcmViYXNlXCI7IFxuXG5qZXN0Lm1vY2soXCJmaXJlYmFzZS9maXJlc3RvcmVcIiwgKCkgPT4gKHtcbiAgZG9jOiBqZXN0LmZuKCksXG4gIHNldERvYzogamVzdC5mbigpLFxuICBnZXRGaXJlc3RvcmU6IGplc3QuZm4oKSxcbn0pKTtcblxuamVzdC5tb2NrKFwiZmlyZWJhc2UvYXV0aFwiLCAoKSA9PiAoe1xuXG4gIGNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZDogamVzdC5mbigoKSA9PlxuICAgIFByb21pc2UucmVzb2x2ZSh7IHVzZXI6IHsgZW1haWw6IFwiYWRtaW5UZXN0QGV4YW1wbGUuY29tXCIgfSB9KVxuICApLFxuICBnZXRSZWFjdE5hdGl2ZVBlcnNpc3RlbmNlOiBqZXN0LmZuKCksXG4gIGluaXRpYWxpemVBdXRoOiBqZXN0LmZuKCksXG59KSk7XG5cbmplc3QubW9jayhcImZpcmViYXNlL2FwcFwiLCAoKSA9PiAoe1xuICBpbml0aWFsaXplQXBwOiBqZXN0LmZuKCksXG4gIGluaXRpYWxpemVBdXRoOiBqZXN0LmZuKCksXG59KSk7XG5cbmplc3QubW9jayhcIkByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlXCIsICgpID0+ICh7XG4gIFJlYWN0TmF0aXZlQXN5bmNTdG9yYWdlOiBqZXN0LmZuKCksXG4gIGdldFJlYWN0TmF0aXZlUGVyc2lzdGVuY2U6IGplc3QuZm4oKSxcbn0pKTtcblxuY29uc3QgbmF2aWdhdGVNb2NrID0gamVzdC5mbigpO1xuXG5kZXNjcmliZShcIlJlZ2lzdGVyIENvbXBvbmVudFwiLCAoKSA9PiB7XG4gIHRlc3QoXCJyZW5kZXJzIHRoZSBSZWdpc3RlciBzY3JlZW4gY29ycmVjdGx5XCIsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBnZXRCeVRleHQgfSA9IHJlbmRlcig8UmVnaXN0ZXIgLz4pO1xuXG4gICAgZXhwZWN0KGdldEJ5VGV4dChcIkNyZWF0ZSBBY2NvdW50XCIpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKFwibmFtZVwiKSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoXCJlbWFpbFwiKSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoXCJwYXNzd29yZFwiKSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoXCJzaWdudXBcIikpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIHRlc3QoXCJoYW5kbGVzIHVzZXIgaW5wdXQgYW5kIHJlZ2lzdHJhdGlvbiBjb3JyZWN0bHlcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxSZWdpc3RlciBuYXZpZ2F0aW9uPXt7IG5hdmlnYXRlOiBuYXZpZ2F0ZU1vY2sgfX0gLz5cbiAgICApO1xuXG4gICAgICBjb25zdCBuYW1lID0gXCJBZGRpc29uIERhZVwiO1xuICAgICAgY29uc3QgZW1haWwgPSBcImFkZGlzb24uZGFlQGV4YW1wbGUuY29tXCI7XG4gICAgICBjb25zdCBwYXNzd29yZCA9IFwidGVzdHBhc3N3b3JkXCI7XG4gIFxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGdldEJ5VGVzdElkKFwibmFtZVwiKSwgbmFtZSk7XG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZ2V0QnlUZXN0SWQoXCJlbWFpbFwiKSwgZW1haWwpO1xuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGdldEJ5VGVzdElkKFwicGFzc3dvcmRcIiksIHBhc3N3b3JkKTtcblxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZChcInNpZ251cFwiKSk7XG5cbiAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgZXhwZWN0KGNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICBhdXRoLFxuICAgICAgICAgZW1haWwsXG4gICAgICAgICBwYXNzd29yZFxuICAgICAgICk7XG4gICAgICAgZXhwZWN0KG5hdmlnYXRlTW9jaykudG9CZURlZmluZWQoKTtcbiAgICAgfSk7XG5cbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQU1BQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtFQUFBLE9BQU87SUFDckNDLEdBQUcsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUNkQyxNQUFNLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDakJFLFlBQVksRUFBRUgsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDeEIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVISixXQUFBLEdBQUtDLElBQUksQ0FBQyxlQUFlLEVBQUU7RUFBQSxPQUFPO0lBRWhDTSw4QkFBOEIsRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUN0Q0ksT0FBTyxDQUFDQyxPQUFPLENBQUM7UUFBRUMsSUFBSSxFQUFFO1VBQUVDLEtBQUssRUFBRTtRQUF3QjtNQUFFLENBQUMsQ0FBQztJQUFBLENBQy9ELENBQUM7SUFDREMseUJBQXlCLEVBQUVULElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDcENTLGNBQWMsRUFBRVYsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDMUIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVISixXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUU7RUFBQSxPQUFPO0lBQy9CYSxhQUFhLEVBQUVYLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDeEJTLGNBQWMsRUFBRVYsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDMUIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVISixXQUFBLEdBQUtDLElBQUksQ0FBQywyQ0FBMkMsRUFBRTtFQUFBLE9BQU87SUFDNURjLHVCQUF1QixFQUFFWixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDUSx5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