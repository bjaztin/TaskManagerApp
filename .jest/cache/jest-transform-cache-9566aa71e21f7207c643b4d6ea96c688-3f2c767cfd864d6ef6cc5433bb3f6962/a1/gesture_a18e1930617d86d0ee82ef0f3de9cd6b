3ecee86f55966b2844b580941110e57a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty3 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty3.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContinousBaseGesture = exports.BaseGesture = exports.Gesture = exports.CALLBACK_TYPE = void 0;
var _handlersRegistry = require("../handlersRegistry");
var _utils = require("../../utils");
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var CALLBACK_TYPE = {
  UNDEFINED: 0,
  BEGAN: 1,
  START: 2,
  UPDATE: 3,
  CHANGE: 4,
  END: 5,
  FINALIZE: 6,
  TOUCHES_DOWN: 7,
  TOUCHES_MOVE: 8,
  TOUCHES_UP: 9,
  TOUCHES_CANCELLED: 10
};
exports.CALLBACK_TYPE = CALLBACK_TYPE;
var Gesture = (0, _createClass2.default)(function Gesture() {
  (0, _classCallCheck2.default)(this, Gesture);
});
exports.Gesture = Gesture;
var nextGestureId = 0;
var BaseGesture = function (_Gesture) {
  (0, _inherits2.default)(BaseGesture, _Gesture);
  var _super = _createSuper(BaseGesture);
  function BaseGesture() {
    var _this;
    (0, _classCallCheck2.default)(this, BaseGesture);
    _this = _super.call(this);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "gestureId", -1);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "handlerTag", -1);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "handlerName", '');
    _defineProperty((0, _assertThisInitialized2.default)(_this), "config", {});
    _defineProperty((0, _assertThisInitialized2.default)(_this), "handlers", {
      gestureId: -1,
      handlerTag: -1,
      isWorklet: []
    });
    _this.gestureId = nextGestureId++;
    _this.handlers.gestureId = _this.gestureId;
    return _this;
  }
  (0, _createClass2.default)(BaseGesture, [{
    key: "addDependency",
    value: function addDependency(key, gesture) {
      var value = this.config[key];
      this.config[key] = value ? Array().concat(value, gesture) : [gesture];
    }
  }, {
    key: "withRef",
    value: function withRef(ref) {
      this.config.ref = ref;
      return this;
    }
  }, {
    key: "isWorklet",
    value: function isWorklet(callback) {
      return callback.__workletHash !== undefined;
    }
  }, {
    key: "onBegin",
    value: function onBegin(callback) {
      this.handlers.onBegin = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onStart",
    value: function onStart(callback) {
      this.handlers.onStart = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onEnd",
    value: function onEnd(callback) {
      this.handlers.onEnd = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onFinalize",
    value: function onFinalize(callback) {
      this.handlers.onFinalize = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onTouchesDown",
    value: function onTouchesDown(callback) {
      this.config.needsPointerData = true;
      this.handlers.onTouchesDown = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onTouchesMove",
    value: function onTouchesMove(callback) {
      this.config.needsPointerData = true;
      this.handlers.onTouchesMove = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onTouchesUp",
    value: function onTouchesUp(callback) {
      this.config.needsPointerData = true;
      this.handlers.onTouchesUp = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onTouchesCancelled",
    value: function onTouchesCancelled(callback) {
      this.config.needsPointerData = true;
      this.handlers.onTouchesCancelled = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "enabled",
    value: function enabled(_enabled) {
      this.config.enabled = _enabled;
      return this;
    }
  }, {
    key: "shouldCancelWhenOutside",
    value: function shouldCancelWhenOutside(value) {
      this.config.shouldCancelWhenOutside = value;
      return this;
    }
  }, {
    key: "hitSlop",
    value: function hitSlop(_hitSlop) {
      this.config.hitSlop = _hitSlop;
      return this;
    }
  }, {
    key: "runOnJS",
    value: function runOnJS(_runOnJS) {
      this.config.runOnJS = _runOnJS;
      return this;
    }
  }, {
    key: "simultaneousWithExternalGesture",
    value: function simultaneousWithExternalGesture() {
      for (var _len = arguments.length, gestures = new Array(_len), _key = 0; _key < _len; _key++) {
        gestures[_key] = arguments[_key];
      }
      for (var gesture of gestures) {
        this.addDependency('simultaneousWith', gesture);
      }
      return this;
    }
  }, {
    key: "requireExternalGestureToFail",
    value: function requireExternalGestureToFail() {
      for (var _len2 = arguments.length, gestures = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        gestures[_key2] = arguments[_key2];
      }
      for (var gesture of gestures) {
        this.addDependency('requireToFail', gesture);
      }
      return this;
    }
  }, {
    key: "withTestId",
    value: function withTestId(id) {
      this.config.testId = id;
      return this;
    }
  }, {
    key: "cancelsTouchesInView",
    value: function cancelsTouchesInView(value) {
      this.config.cancelsTouchesInView = value;
      return this;
    }
  }, {
    key: "initialize",
    value: function initialize() {
      this.handlerTag = (0, _handlersRegistry.getNextHandlerTag)();
      this.handlers = _objectSpread(_objectSpread({}, this.handlers), {}, {
        handlerTag: this.handlerTag
      });
      if (this.config.ref) {
        this.config.ref.current = this;
      }
    }
  }, {
    key: "toGestureArray",
    value: function toGestureArray() {
      return [this];
    }
  }, {
    key: "prepare",
    value: function prepare() {}
  }, {
    key: "shouldUseReanimated",
    get: function get() {
      return this.config.runOnJS !== true && !this.handlers.isWorklet.includes(false) && !(0, _utils.isRemoteDebuggingEnabled)();
    }
  }]);
  return BaseGesture;
}(Gesture);
exports.BaseGesture = BaseGesture;
var ContinousBaseGesture = function (_BaseGesture) {
  (0, _inherits2.default)(ContinousBaseGesture, _BaseGesture);
  var _super2 = _createSuper(ContinousBaseGesture);
  function ContinousBaseGesture() {
    (0, _classCallCheck2.default)(this, ContinousBaseGesture);
    return _super2.apply(this, arguments);
  }
  (0, _createClass2.default)(ContinousBaseGesture, [{
    key: "onUpdate",
    value: function onUpdate(callback) {
      this.handlers.onUpdate = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onChange",
    value: function onChange(callback) {
      this.handlers.onChange = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "manualActivation",
    value: function manualActivation(_manualActivation) {
      this.config.manualActivation = _manualActivation;
      return this;
    }
  }]);
  return ContinousBaseGesture;
}(BaseGesture);
exports.ContinousBaseGesture = ContinousBaseGesture;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,