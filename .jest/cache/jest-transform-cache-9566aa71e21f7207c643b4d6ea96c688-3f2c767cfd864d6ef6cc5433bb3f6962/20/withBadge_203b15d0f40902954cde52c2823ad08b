039051bc7a4876715a126163f80d28fe
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _Badge = _interopRequireDefault(require("./Badge"));
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var withBadge = function withBadge(value) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return function (WrappedComponent) {
    var WithBadge = function WithBadge(props) {
      var bottom = options.bottom,
        _options$hidden = options.hidden,
        hidden = _options$hidden === void 0 ? false : _options$hidden,
        left = options.left,
        containerStyle = options.containerStyle,
        badgeProps = __rest(options, ["bottom", "hidden", "left", "containerStyle"]);
      var _options$right = options.right,
        right = _options$right === void 0 ? -16 : _options$right,
        _options$top = options.top,
        top = _options$top === void 0 ? -1 : _options$top;
      if (!value) {
        right = -3;
        top = 3;
      }
      var badgeValue = typeof value === 'function' ? value(props) : value;
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, containerStyle]),
        children: [(0, _jsxRuntime.jsx)(WrappedComponent, _objectSpread({}, props)), !hidden && (0, _jsxRuntime.jsx)(_Badge.default, _objectSpread({
          value: badgeValue,
          status: "error",
          containerStyle: _reactNative.StyleSheet.flatten([styles.badgeContainer, {
            bottom: bottom,
            left: left,
            right: right,
            top: top
          }])
        }, badgeProps))]
      });
    };
    WithBadge.displayName = `WithBadge(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`;
    return WithBadge;
  };
};
var styles = _reactNative.StyleSheet.create({
  badgeContainer: {
    position: 'absolute'
  },
  container: {
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative'
  }
});
var _default = withBadge;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,