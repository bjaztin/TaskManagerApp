e445e89dcaea0b4b75bfc1505301177d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeMutable = makeMutable;
exports.makeRemote = makeRemote;
exports.makeUIMutable = void 0;
Object.defineProperty(exports, "stopMapper", {
  enumerable: true,
  get: function get() {
    return _mappers.stopMapper;
  }
});
var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));
var _shareables = require("./shareables");
var _threads = require("./threads");
var _valueSetter = require("./valueSetter");
var _mappers = require("./mappers");
var _worklet_4824026427666_init_data = {
  code: "function makeUIMutable(initial, syncDataHolder) {\n  const {\n    valueSetter,\n    makeShareableCloneOnUIRecursive\n  } = this._closure;\n  const listeners = new Map();\n  let value = initial;\n  const self = {\n    set value(newValue) {\n      valueSetter(self, newValue);\n    },\n    get value() {\n      return value;\n    },\n    set _value(newValue) {\n      value = newValue;\n      if (syncDataHolder) {\n        _updateDataSynchronously(syncDataHolder, makeShareableCloneOnUIRecursive(newValue));\n      }\n      listeners.forEach(function (listener) {\n        listener(newValue);\n      });\n    },\n    get _value() {\n      return value;\n    },\n    addListener: function (id, listener) {\n      listeners.set(id, listener);\n    },\n    removeListener: function (id) {\n      listeners.delete(id);\n    },\n    _animation: null,\n    _isReanimatedSharedValue: true\n  };\n  return self;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js",
  sourceMap: "{\"version\":3,\"names\":[\"makeUIMutable\",\"initial\",\"syncDataHolder\",\"valueSetter\",\"makeShareableCloneOnUIRecursive\",\"_closure\",\"listeners\",\"Map\",\"value\",\"self\",\"newValue\",\"_value\",\"_updateDataSynchronously\",\"forEach\",\"listener\",\"addListener\",\"id\",\"set\",\"removeListener\",\"delete\",\"_animation\",\"_isReanimatedSharedValue\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js\"],\"mappings\":\"AAKO,SAAAA,aAASA,CAAcC,OAAA,EAAOC,cAAE,EAAc;EAAA;IAAAC,WAAA;IAAAC;EAAA,SAAAC,QAAA;EAGnD,MAAMC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC3B,IAAIC,KAAK,GAAGP,OAAO;EACnB,MAAMQ,IAAI,GAAG;IACX,IAAID,KAAKA,CAACE,QAAQ,EAAE;MAClBP,WAAW,CAACM,IAAI,EAAEC,QAAQ,CAAC;IAC7B,CAAC;IACD,IAAIF,KAAKA,CAAA,EAAG;MACV,OAAOA,KAAK;IACd,CAAC;IAOD,IAAIG,MAAMA,CAACD,QAAQ,EAAE;MACnBF,KAAK,GAAGE,QAAQ;MAChB,IAAIR,cAAc,EAAE;QAClBU,wBAAwB,CAACV,cAAc,EAAEE,+BAA+B,CAACM,QAAQ,CAAC,CAAC;MACrF;MACAJ,SAAS,CAACO,OAAO,CAAC,UAAAC,QAAQ,EAAI;QAC5BA,QAAQ,CAACJ,QAAQ,CAAC;MACpB,CAAC,CAAC;IACJ,CAAC;IACD,IAAIC,MAAMA,CAAA,EAAG;MACX,OAAOH,KAAK;IACd,CAAC;IACDO,WAAW,EAAE,SAAAA,CAACC,EAAE,EAAEF,QAAQ,EAAK;MAC7BR,SAAS,CAACW,GAAG,CAACD,EAAE,EAAEF,QAAQ,CAAC;IAC7B,CAAC;IACDI,cAAc,EAAE,SAAAA,CAAAF,EAAE,EAAI;MACpBV,SAAS,CAACa,MAAM,CAACH,EAAE,CAAC;IACtB,CAAC;IACDI,UAAU,EAAE,IAAI;IAChBC,wBAAwB,EAAE;EAC5B,CAAC;EACD,OAAOZ,IAAI;AACb\"}"
};
var makeUIMutable = function () {
  var _e = [new global.Error(), -3, -27];
  var _f = function _f(initial, syncDataHolder) {
    var listeners = new Map();
    var value = initial;
    var self = {
      set value(newValue) {
        (0, _valueSetter.valueSetter)(self, newValue);
      },
      get value() {
        return value;
      },
      set _value(newValue) {
        value = newValue;
        if (syncDataHolder) {
          _updateDataSynchronously(syncDataHolder, (0, _shareables.makeShareableCloneOnUIRecursive)(newValue));
        }
        listeners.forEach(function (listener) {
          listener(newValue);
        });
      },
      get _value() {
        return value;
      },
      addListener: function addListener(id, listener) {
        listeners.set(id, listener);
      },
      removeListener: function removeListener(id) {
        listeners.delete(id);
      },
      _animation: null,
      _isReanimatedSharedValue: true
    };
    return self;
  };
  _f._closure = {
    valueSetter: _valueSetter.valueSetter,
    makeShareableCloneOnUIRecursive: _shareables.makeShareableCloneOnUIRecursive
  };
  _f.__initData = _worklet_4824026427666_init_data;
  _f.__workletHash = 4824026427666;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
exports.makeUIMutable = makeUIMutable;
var _worklet_10449958264388_init_data = {
  code: "function anonymous() {\n  const {\n    makeUIMutable,\n    initial,\n    syncDataHolder\n  } = this._closure;\n  return makeUIMutable(initial, syncDataHolder);\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"makeUIMutable\",\"initial\",\"syncDataHolder\",\"_closure\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js\"],\"mappings\":\"AAwDY,SAAAA,SAAMA,CAAA;EAAA;IAAAC,aAAA;IAAAC,OAAA;IAAAC;EAAA,SAAAC,QAAA;EAGZ,OAAOH,aAAa,CAACC,OAAO,EAAEC,cAAc,CAAC;AAC/C\"}"
};
var _worklet_15438208032637_init_data = {
  code: "function anonymous() {\n  const {\n    mutable,\n    newValue\n  } = this._closure;\n  mutable.value = newValue;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"mutable\",\"newValue\",\"_closure\",\"value\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js\"],\"mappings\":\"AAmEgB,SAAAA,SAAMA,CAAA;EAAA;IAAAC,OAAA;IAAAC;EAAA,SAAAC,QAAA;EACZF,OAAO,CAACG,KAAK,GAAGF,QAAQ;AAC1B\"}"
};
var _worklet_12569920825823_init_data = {
  code: "function anonymous() {\n  const {\n    mutable,\n    modifier\n  } = this._closure;\n  mutable.value = modifier(mutable.value);\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"mutable\",\"modifier\",\"_closure\",\"value\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js\"],\"mappings\":\"AAgGc,SAAAA,SAAMA,CAAA;EAAA;IAAAC,OAAA;IAAAC;EAAA,SAAAC,QAAA;EACZF,OAAO,CAACG,KAAK,GAAGF,QAAQ,CAACD,OAAO,CAACG,KAAK,CAAC;AACzC\"}"
};
function makeMutable(initial) {
  var oneWayReadsOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var value = initial;
  var syncDataHolder;
  if (!oneWayReadsOnly && _NativeReanimated.default.native) {
    syncDataHolder = _NativeReanimated.default.makeSynchronizedDataHolder((0, _shareables.makeShareableCloneRecursive)(value));
    (0, _shareables.registerShareableMapping)(syncDataHolder);
  }
  var handle = (0, _shareables.makeShareableCloneRecursive)({
    __init: function () {
      var _e = [new global.Error(), -4, -27];
      var _f = function _f() {
        return makeUIMutable(initial, syncDataHolder);
      };
      _f._closure = {
        makeUIMutable: makeUIMutable,
        initial: initial,
        syncDataHolder: syncDataHolder
      };
      _f.__initData = _worklet_10449958264388_init_data;
      _f.__workletHash = 10449958264388;
      _f.__stackDetails = _e;
      _f.__version = "3.3.0";
      return _f;
    }()
  });
  var listeners = _NativeReanimated.default.native ? undefined : new Map();
  var mutable = {
    set value(newValue) {
      if (_NativeReanimated.default.native) {
        (0, _threads.runOnUI)(function () {
          var _e = [new global.Error(), -3, -27];
          var _f = function _f() {
            mutable.value = newValue;
          };
          _f._closure = {
            mutable: mutable,
            newValue: newValue
          };
          _f.__initData = _worklet_15438208032637_init_data;
          _f.__workletHash = 15438208032637;
          _f.__stackDetails = _e;
          _f.__version = "3.3.0";
          return _f;
        }())();
      } else {
        (0, _valueSetter.valueSetter)(mutable, newValue);
      }
    },
    get value() {
      if (syncDataHolder) {
        return _NativeReanimated.default.getDataSynchronously(syncDataHolder);
      }
      return value;
    },
    set _value(newValue) {
      if (_NativeReanimated.default.native) {
        throw new Error('Setting `_value` directly is only possible on the UI runtime');
      }
      value = newValue;
      listeners.forEach(function (listener) {
        listener(newValue);
      });
    },
    get _value() {
      if (_NativeReanimated.default.native) {
        throw new Error('Reading from `_value` directly is only possible on the UI runtime');
      }
      return value;
    },
    modify: function modify(modifier) {
      (0, _threads.runOnUI)(function () {
        var _e = [new global.Error(), -3, -27];
        var _f = function _f() {
          mutable.value = modifier(mutable.value);
        };
        _f._closure = {
          mutable: mutable,
          modifier: modifier
        };
        _f.__initData = _worklet_12569920825823_init_data;
        _f.__workletHash = 12569920825823;
        _f.__stackDetails = _e;
        _f.__version = "3.3.0";
        return _f;
      }())();
    },
    addListener: function addListener(id, listener) {
      if (_NativeReanimated.default.native) {
        throw new Error('adding listeners is only possible on the UI runtime');
      }
      listeners.set(id, listener);
    },
    removeListener: function removeListener(id) {
      if (_NativeReanimated.default.native) {
        throw new Error('removing listeners is only possible on the UI runtime');
      }
      listeners.delete(id);
    },
    _isReanimatedSharedValue: true
  };
  (0, _shareables.registerShareableMapping)(mutable, handle);
  return mutable;
}
var _worklet_17100414353033_init_data = {
  code: "function anonymous() {\n  const {\n    initial\n  } = this._closure;\n  return initial;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"initial\",\"_closure\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js\"],\"mappings\":\"AAwHY,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAGZ,OAAOD,OAAO;AAChB\"}"
};
function makeRemote() {
  var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var handle = (0, _shareables.makeShareableCloneRecursive)({
    __init: function () {
      var _e = [new global.Error(), -2, -27];
      var _f = function _f() {
        return initial;
      };
      _f._closure = {
        initial: initial
      };
      _f.__initData = _worklet_17100414353033_init_data;
      _f.__workletHash = 17100414353033;
      _f.__stackDetails = _e;
      _f.__version = "3.3.0";
      return _f;
    }()
  });
  (0, _shareables.registerShareableMapping)(initial, handle);
  return initial;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,