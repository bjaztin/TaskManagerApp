1228b072d4172df0fa9869c3b96520d1
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VideoExportPreset = exports.UIImagePickerPresentationStyle = exports.UIImagePickerPreferredAssetRepresentationMode = exports.UIImagePickerControllerQualityType = exports.MediaTypeOptions = exports.CameraType = void 0;
var MediaTypeOptions;
exports.MediaTypeOptions = MediaTypeOptions;
(function (MediaTypeOptions) {
  MediaTypeOptions["All"] = "All";
  MediaTypeOptions["Videos"] = "Videos";
  MediaTypeOptions["Images"] = "Images";
})(MediaTypeOptions || (exports.MediaTypeOptions = MediaTypeOptions = {}));
var VideoExportPreset;
exports.VideoExportPreset = VideoExportPreset;
(function (VideoExportPreset) {
  VideoExportPreset[VideoExportPreset["Passthrough"] = 0] = "Passthrough";
  VideoExportPreset[VideoExportPreset["LowQuality"] = 1] = "LowQuality";
  VideoExportPreset[VideoExportPreset["MediumQuality"] = 2] = "MediumQuality";
  VideoExportPreset[VideoExportPreset["HighestQuality"] = 3] = "HighestQuality";
  VideoExportPreset[VideoExportPreset["H264_640x480"] = 4] = "H264_640x480";
  VideoExportPreset[VideoExportPreset["H264_960x540"] = 5] = "H264_960x540";
  VideoExportPreset[VideoExportPreset["H264_1280x720"] = 6] = "H264_1280x720";
  VideoExportPreset[VideoExportPreset["H264_1920x1080"] = 7] = "H264_1920x1080";
  VideoExportPreset[VideoExportPreset["H264_3840x2160"] = 8] = "H264_3840x2160";
  VideoExportPreset[VideoExportPreset["HEVC_1920x1080"] = 9] = "HEVC_1920x1080";
  VideoExportPreset[VideoExportPreset["HEVC_3840x2160"] = 10] = "HEVC_3840x2160";
})(VideoExportPreset || (exports.VideoExportPreset = VideoExportPreset = {}));
var UIImagePickerControllerQualityType;
exports.UIImagePickerControllerQualityType = UIImagePickerControllerQualityType;
(function (UIImagePickerControllerQualityType) {
  UIImagePickerControllerQualityType[UIImagePickerControllerQualityType["High"] = 0] = "High";
  UIImagePickerControllerQualityType[UIImagePickerControllerQualityType["Medium"] = 1] = "Medium";
  UIImagePickerControllerQualityType[UIImagePickerControllerQualityType["Low"] = 2] = "Low";
  UIImagePickerControllerQualityType[UIImagePickerControllerQualityType["VGA640x480"] = 3] = "VGA640x480";
  UIImagePickerControllerQualityType[UIImagePickerControllerQualityType["IFrame1280x720"] = 4] = "IFrame1280x720";
  UIImagePickerControllerQualityType[UIImagePickerControllerQualityType["IFrame960x540"] = 5] = "IFrame960x540";
})(UIImagePickerControllerQualityType || (exports.UIImagePickerControllerQualityType = UIImagePickerControllerQualityType = {}));
var UIImagePickerPresentationStyle;
exports.UIImagePickerPresentationStyle = UIImagePickerPresentationStyle;
(function (UIImagePickerPresentationStyle) {
  UIImagePickerPresentationStyle["FULL_SCREEN"] = "fullScreen";
  UIImagePickerPresentationStyle["PAGE_SHEET"] = "pageSheet";
  UIImagePickerPresentationStyle["FORM_SHEET"] = "formSheet";
  UIImagePickerPresentationStyle["CURRENT_CONTEXT"] = "currentContext";
  UIImagePickerPresentationStyle["OVER_FULL_SCREEN"] = "overFullScreen";
  UIImagePickerPresentationStyle["OVER_CURRENT_CONTEXT"] = "overCurrentContext";
  UIImagePickerPresentationStyle["POPOVER"] = "popover";
  UIImagePickerPresentationStyle["AUTOMATIC"] = "automatic";
})(UIImagePickerPresentationStyle || (exports.UIImagePickerPresentationStyle = UIImagePickerPresentationStyle = {}));
var UIImagePickerPreferredAssetRepresentationMode;
exports.UIImagePickerPreferredAssetRepresentationMode = UIImagePickerPreferredAssetRepresentationMode;
(function (UIImagePickerPreferredAssetRepresentationMode) {
  UIImagePickerPreferredAssetRepresentationMode["Automatic"] = "automatic";
  UIImagePickerPreferredAssetRepresentationMode["Compatible"] = "compatible";
  UIImagePickerPreferredAssetRepresentationMode["Current"] = "current";
})(UIImagePickerPreferredAssetRepresentationMode || (exports.UIImagePickerPreferredAssetRepresentationMode = UIImagePickerPreferredAssetRepresentationMode = {}));
var CameraType;
exports.CameraType = CameraType;
(function (CameraType) {
  CameraType["back"] = "back";
  CameraType["front"] = "front";
})(CameraType || (exports.CameraType = CameraType = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,