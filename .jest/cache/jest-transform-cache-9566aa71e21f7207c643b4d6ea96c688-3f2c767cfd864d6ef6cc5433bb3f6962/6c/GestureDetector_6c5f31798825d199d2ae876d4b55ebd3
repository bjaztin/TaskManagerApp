b43a052a7ccd53fb43da7e13a1d1b946
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GestureDetector = void 0;
var _react = _interopRequireWildcard(require("react"));
var _gesture = require("./gesture");
var _reanimatedWrapper = require("./reanimatedWrapper");
var _handlersRegistry = require("../handlersRegistry");
var _RNGestureHandlerModule = _interopRequireDefault(require("../../RNGestureHandlerModule"));
var _gestureHandlerCommon = require("../gestureHandlerCommon");
var _gestureStateManager = require("./gestureStateManager");
var _FlingGestureHandler = require("../FlingGestureHandler");
var _ForceTouchGestureHandler = require("../ForceTouchGestureHandler");
var _LongPressGestureHandler = require("../LongPressGestureHandler");
var _PanGestureHandler = require("../PanGestureHandler");
var _TapGestureHandler = require("../TapGestureHandler");
var _State = require("../../State");
var _TouchEventType = require("../../TouchEventType");
var _ActionType = require("../../ActionType");
var _utils = require("../../utils");
var _getShadowNodeFromRef = require("../../getShadowNodeFromRef");
var _reactNative = require("react-native");
var _eventReceiver = require("./eventReceiver");
var _RNRenderer = require("../../RNRenderer");
var _EnableNewWebImplementation = require("../../EnableNewWebImplementation");
var _NativeViewGestureHandler = require("../NativeViewGestureHandler");
var _GestureHandlerRootViewContext = _interopRequireDefault(require("../../GestureHandlerRootViewContext"));
var _Reanimated$default$c, _Reanimated$default;
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var ALLOWED_PROPS = [].concat((0, _toConsumableArray2.default)(_gestureHandlerCommon.baseGestureHandlerWithMonitorProps), (0, _toConsumableArray2.default)(_TapGestureHandler.tapGestureHandlerProps), (0, _toConsumableArray2.default)(_PanGestureHandler.panGestureHandlerProps), (0, _toConsumableArray2.default)(_PanGestureHandler.panGestureHandlerCustomNativeProps), (0, _toConsumableArray2.default)(_LongPressGestureHandler.longPressGestureHandlerProps), (0, _toConsumableArray2.default)(_ForceTouchGestureHandler.forceTouchGestureHandlerProps), (0, _toConsumableArray2.default)(_FlingGestureHandler.flingGestureHandlerProps), (0, _toConsumableArray2.default)(_NativeViewGestureHandler.nativeViewGestureHandlerProps));
function convertToHandlerTag(ref) {
  if (typeof ref === 'number') {
    return ref;
  } else if (ref instanceof _gesture.BaseGesture) {
    return ref.handlerTag;
  } else {
    var _ref$current$handlerT, _ref$current;
    return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;
  }
}
function extractValidHandlerTags(interactionGroup) {
  var _interactionGroup$map, _interactionGroup$map2;
  return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter(function (tag) {
    return tag > 0;
  })) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];
}
function dropHandlers(preparedGesture) {
  for (var handler of preparedGesture.config) {
    _RNGestureHandlerModule.default.dropGestureHandler(handler.handlerTag);
    (0, _handlersRegistry.unregisterHandler)(handler.handlerTag, handler.config.testId);
  }
  (0, _gestureHandlerCommon.scheduleFlushOperations)();
}
function checkGestureCallbacksForWorklets(gesture) {
  if (gesture.config.runOnJS) {
    return;
  }
  var areSomeNotWorklets = gesture.handlers.isWorklet.includes(false);
  var areSomeWorklets = gesture.handlers.isWorklet.includes(true);
  if (areSomeNotWorklets && areSomeWorklets) {
    console.error((0, _utils.tagMessage)(`Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread.`));
  }
}
function attachHandlers(_ref) {
  var preparedGesture = _ref.preparedGesture,
    gestureConfig = _ref.gestureConfig,
    gesture = _ref.gesture,
    viewTag = _ref.viewTag,
    webEventHandlersRef = _ref.webEventHandlersRef,
    mountedRef = _ref.mountedRef;
  if (!preparedGesture.firstExecution) {
    gestureConfig.initialize();
  } else {
    preparedGesture.firstExecution = false;
  }
  queueMicrotask(function () {
    if (!mountedRef.current) {
      return;
    }
    gestureConfig.prepare();
  });
  for (var handler of gesture) {
    checkGestureCallbacksForWorklets(handler);
    _RNGestureHandlerModule.default.createGestureHandler(handler.handlerName, handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS));
    (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);
  }
  queueMicrotask(function () {
    if (!mountedRef.current) {
      return;
    }
    for (var _handler of gesture) {
      var requireToFail = [];
      if (_handler.config.requireToFail) {
        requireToFail = extractValidHandlerTags(_handler.config.requireToFail);
      }
      var simultaneousWith = [];
      if (_handler.config.simultaneousWith) {
        simultaneousWith = extractValidHandlerTags(_handler.config.simultaneousWith);
      }
      _RNGestureHandlerModule.default.updateGestureHandler(_handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(_handler.config, ALLOWED_PROPS, {
        simultaneousHandlers: simultaneousWith,
        waitFor: requireToFail
      }));
    }
    (0, _gestureHandlerCommon.scheduleFlushOperations)();
  });
  preparedGesture.config = gesture;
  for (var _gesture2 of preparedGesture.config) {
    var actionType = _gesture2.shouldUseReanimated ? _ActionType.ActionType.REANIMATED_WORKLET : _ActionType.ActionType.JS_FUNCTION_NEW_API;
    if (_reactNative.Platform.OS === 'web') {
      _RNGestureHandlerModule.default.attachGestureHandler(_gesture2.handlerTag, viewTag, _ActionType.ActionType.JS_FUNCTION_OLD_API, webEventHandlersRef);
    } else {
      _RNGestureHandlerModule.default.attachGestureHandler(_gesture2.handlerTag, viewTag, actionType);
    }
  }
  if (preparedGesture.animatedHandlers) {
    var isAnimatedGesture = function isAnimatedGesture(g) {
      return g.shouldUseReanimated;
    };
    preparedGesture.animatedHandlers.value = gesture.filter(isAnimatedGesture).map(function (g) {
      return g.handlers;
    });
  }
}
function updateHandlers(preparedGesture, gestureConfig, gesture, mountedRef) {
  gestureConfig.prepare();
  for (var i = 0; i < gesture.length; i++) {
    var handler = preparedGesture.config[i];
    checkGestureCallbacksForWorklets(handler);
    if (gesture[i].handlerTag !== handler.handlerTag) {
      gesture[i].handlerTag = handler.handlerTag;
      gesture[i].handlers.handlerTag = handler.handlerTag;
    }
  }
  queueMicrotask(function () {
    if (!mountedRef.current) {
      return;
    }
    for (var _i = 0; _i < gesture.length; _i++) {
      var _handler2 = preparedGesture.config[_i];
      _handler2.config = gesture[_i].config;
      _handler2.handlers = gesture[_i].handlers;
      var requireToFail = extractValidHandlerTags(_handler2.config.requireToFail);
      var simultaneousWith = extractValidHandlerTags(_handler2.config.simultaneousWith);
      _RNGestureHandlerModule.default.updateGestureHandler(_handler2.handlerTag, (0, _gestureHandlerCommon.filterConfig)(_handler2.config, ALLOWED_PROPS, {
        simultaneousHandlers: simultaneousWith,
        waitFor: requireToFail
      }));
      (0, _handlersRegistry.registerHandler)(_handler2.handlerTag, _handler2, _handler2.config.testId);
    }
    if (preparedGesture.animatedHandlers) {
      var _preparedGesture$anim;
      var previousHandlersValue = (_preparedGesture$anim = preparedGesture.animatedHandlers.value) !== null && _preparedGesture$anim !== void 0 ? _preparedGesture$anim : [];
      var newHandlersValue = preparedGesture.config.filter(function (g) {
        return g.shouldUseReanimated;
      }).map(function (g) {
        return g.handlers;
      });
      var shouldUpdateSharedValue = previousHandlersValue.length !== newHandlersValue.length;
      if (!shouldUpdateSharedValue) {
        for (var _i2 = 0; _i2 < newHandlersValue.length; _i2++) {
          if (newHandlersValue[_i2].gestureId !== previousHandlersValue[_i2].gestureId) {
            shouldUpdateSharedValue = true;
            break;
          }
        }
      }
      if (shouldUpdateSharedValue) {
        preparedGesture.animatedHandlers.value = newHandlersValue;
      }
    }
    (0, _gestureHandlerCommon.scheduleFlushOperations)();
  });
}
function needsToReattach(preparedGesture, gesture) {
  if (gesture.length !== preparedGesture.config.length) {
    return true;
  }
  for (var i = 0; i < gesture.length; i++) {
    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName || gesture[i].shouldUseReanimated !== preparedGesture.config[i].shouldUseReanimated) {
      return true;
    }
  }
  return false;
}
var _worklet_6011490867213_init_data = {
  code: "function isStateChangeEvent(event) {\n  return event.oldState != null;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js",
  sourceMap: "{\"version\":3,\"names\":[\"isStateChangeEvent\",\"event\",\"oldState\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js\"],\"mappings\":\"AA6QA,SAAAA,kBAASA,CAAmBC,KAAA,EAAK;EAG/B,OAAOA,KAAK,CAACC,QAAQ,IAAI,IAAI;AAC/B\"}"
};
var isStateChangeEvent = function () {
  var _e = [new global.Error(), 1, -27];
  var _f = function _f(event) {
    return event.oldState != null;
  };
  _f._closure = {};
  _f.__initData = _worklet_6011490867213_init_data;
  _f.__workletHash = 6011490867213;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
var _worklet_10181097307677_init_data = {
  code: "function isTouchEvent(event) {\n  return event.eventType != null;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js",
  sourceMap: "{\"version\":3,\"names\":[\"isTouchEvent\",\"event\",\"eventType\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js\"],\"mappings\":\"AAmRA,SAAAA,YAASA,CAAaC,KAAA,EAAK;EAGzB,OAAOA,KAAK,CAACC,SAAS,IAAI,IAAI;AAChC\"}"
};
var isTouchEvent = function () {
  var _e = [new global.Error(), 1, -27];
  var _f = function _f(event) {
    return event.eventType != null;
  };
  _f._closure = {};
  _f.__initData = _worklet_10181097307677_init_data;
  _f.__workletHash = 10181097307677;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
var _worklet_15408728515329_init_data = {
  code: "function getHandler(type, gesture) {\n  const {\n    _gesture\n  } = this._closure;\n  switch (type) {\n    case _gesture.CALLBACK_TYPE.BEGAN:\n      return gesture.onBegin;\n    case _gesture.CALLBACK_TYPE.START:\n      return gesture.onStart;\n    case _gesture.CALLBACK_TYPE.UPDATE:\n      return gesture.onUpdate;\n    case _gesture.CALLBACK_TYPE.CHANGE:\n      return gesture.onChange;\n    case _gesture.CALLBACK_TYPE.END:\n      return gesture.onEnd;\n    case _gesture.CALLBACK_TYPE.FINALIZE:\n      return gesture.onFinalize;\n    case _gesture.CALLBACK_TYPE.TOUCHES_DOWN:\n      return gesture.onTouchesDown;\n    case _gesture.CALLBACK_TYPE.TOUCHES_MOVE:\n      return gesture.onTouchesMove;\n    case _gesture.CALLBACK_TYPE.TOUCHES_UP:\n      return gesture.onTouchesUp;\n    case _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED:\n      return gesture.onTouchesCancelled;\n  }\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js",
  sourceMap: "{\"version\":3,\"names\":[\"getHandler\",\"type\",\"gesture\",\"_gesture\",\"_closure\",\"CALLBACK_TYPE\",\"BEGAN\",\"onBegin\",\"START\",\"onStart\",\"UPDATE\",\"onUpdate\",\"CHANGE\",\"onChange\",\"END\",\"onEnd\",\"FINALIZE\",\"onFinalize\",\"TOUCHES_DOWN\",\"onTouchesDown\",\"TOUCHES_MOVE\",\"onTouchesMove\",\"TOUCHES_UP\",\"onTouchesUp\",\"TOUCHES_CANCELLED\",\"onTouchesCancelled\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js\"],\"mappings\":\"AAyRA,SAAAA,UAASA,CAAWC,IAAA,EAAIC,OAAE,EAAO;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAG/B,QAAQH,IAAI;IACV,KAAKE,QAAQ,CAACE,aAAa,CAACC,KAAK;MAC/B,OAAOJ,OAAO,CAACK,OAAO;IAExB,KAAKJ,QAAQ,CAACE,aAAa,CAACG,KAAK;MAC/B,OAAON,OAAO,CAACO,OAAO;IAExB,KAAKN,QAAQ,CAACE,aAAa,CAACK,MAAM;MAChC,OAAOR,OAAO,CAACS,QAAQ;IAEzB,KAAKR,QAAQ,CAACE,aAAa,CAACO,MAAM;MAChC,OAAOV,OAAO,CAACW,QAAQ;IAEzB,KAAKV,QAAQ,CAACE,aAAa,CAACS,GAAG;MAC7B,OAAOZ,OAAO,CAACa,KAAK;IAEtB,KAAKZ,QAAQ,CAACE,aAAa,CAACW,QAAQ;MAClC,OAAOd,OAAO,CAACe,UAAU;IAE3B,KAAKd,QAAQ,CAACE,aAAa,CAACa,YAAY;MACtC,OAAOhB,OAAO,CAACiB,aAAa;IAE9B,KAAKhB,QAAQ,CAACE,aAAa,CAACe,YAAY;MACtC,OAAOlB,OAAO,CAACmB,aAAa;IAE9B,KAAKlB,QAAQ,CAACE,aAAa,CAACiB,UAAU;MACpC,OAAOpB,OAAO,CAACqB,WAAW;IAE5B,KAAKpB,QAAQ,CAACE,aAAa,CAACmB,iBAAiB;MAC3C,OAAOtB,OAAO,CAACuB,kBAAkB;EACrC;AACF\"}"
};
var getHandler = function () {
  var _e = [new global.Error(), -2, -27];
  var _f = function _f(type, gesture) {
    switch (type) {
      case _gesture.CALLBACK_TYPE.BEGAN:
        return gesture.onBegin;
      case _gesture.CALLBACK_TYPE.START:
        return gesture.onStart;
      case _gesture.CALLBACK_TYPE.UPDATE:
        return gesture.onUpdate;
      case _gesture.CALLBACK_TYPE.CHANGE:
        return gesture.onChange;
      case _gesture.CALLBACK_TYPE.END:
        return gesture.onEnd;
      case _gesture.CALLBACK_TYPE.FINALIZE:
        return gesture.onFinalize;
      case _gesture.CALLBACK_TYPE.TOUCHES_DOWN:
        return gesture.onTouchesDown;
      case _gesture.CALLBACK_TYPE.TOUCHES_MOVE:
        return gesture.onTouchesMove;
      case _gesture.CALLBACK_TYPE.TOUCHES_UP:
        return gesture.onTouchesUp;
      case _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED:
        return gesture.onTouchesCancelled;
    }
  };
  _f._closure = {
    _gesture: _gesture
  };
  _f.__initData = _worklet_15408728515329_init_data;
  _f.__workletHash = 15408728515329;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
var _worklet_9449590654216_init_data = {
  code: "function touchEventTypeToCallbackType(eventType) {\n  const {\n    _TouchEventType,\n    _gesture\n  } = this._closure;\n  switch (eventType) {\n    case _TouchEventType.TouchEventType.TOUCHES_DOWN:\n      return _gesture.CALLBACK_TYPE.TOUCHES_DOWN;\n    case _TouchEventType.TouchEventType.TOUCHES_MOVE:\n      return _gesture.CALLBACK_TYPE.TOUCHES_MOVE;\n    case _TouchEventType.TouchEventType.TOUCHES_UP:\n      return _gesture.CALLBACK_TYPE.TOUCHES_UP;\n    case _TouchEventType.TouchEventType.TOUCHES_CANCELLED:\n      return _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED;\n  }\n  return _gesture.CALLBACK_TYPE.UNDEFINED;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js",
  sourceMap: "{\"version\":3,\"names\":[\"touchEventTypeToCallbackType\",\"eventType\",\"_TouchEventType\",\"_gesture\",\"_closure\",\"TouchEventType\",\"TOUCHES_DOWN\",\"CALLBACK_TYPE\",\"TOUCHES_MOVE\",\"TOUCHES_UP\",\"TOUCHES_CANCELLED\",\"UNDEFINED\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js\"],\"mappings\":\"AA6TA,SAAAA,4BAASA,CAA6BC,SAAA,EAAS;EAAA;IAAAC,eAAA;IAAAC;EAAA,SAAAC,QAAA;EAG7C,QAAQH,SAAS;IACf,KAAKC,eAAe,CAACG,cAAc,CAACC,YAAY;MAC9C,OAAOH,QAAQ,CAACI,aAAa,CAACD,YAAY;IAE5C,KAAKJ,eAAe,CAACG,cAAc,CAACG,YAAY;MAC9C,OAAOL,QAAQ,CAACI,aAAa,CAACC,YAAY;IAE5C,KAAKN,eAAe,CAACG,cAAc,CAACI,UAAU;MAC5C,OAAON,QAAQ,CAACI,aAAa,CAACE,UAAU;IAE1C,KAAKP,eAAe,CAACG,cAAc,CAACK,iBAAiB;MACnD,OAAOP,QAAQ,CAACI,aAAa,CAACG,iBAAiB;EACnD;EAEA,OAAOP,QAAQ,CAACI,aAAa,CAACI,SAAS;AACzC\"}"
};
var touchEventTypeToCallbackType = function () {
  var _e = [new global.Error(), -3, -27];
  var _f = function _f(eventType) {
    switch (eventType) {
      case _TouchEventType.TouchEventType.TOUCHES_DOWN:
        return _gesture.CALLBACK_TYPE.TOUCHES_DOWN;
      case _TouchEventType.TouchEventType.TOUCHES_MOVE:
        return _gesture.CALLBACK_TYPE.TOUCHES_MOVE;
      case _TouchEventType.TouchEventType.TOUCHES_UP:
        return _gesture.CALLBACK_TYPE.TOUCHES_UP;
      case _TouchEventType.TouchEventType.TOUCHES_CANCELLED:
        return _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED;
    }
    return _gesture.CALLBACK_TYPE.UNDEFINED;
  };
  _f._closure = {
    _TouchEventType: _TouchEventType,
    _gesture: _gesture
  };
  _f.__initData = _worklet_9449590654216_init_data;
  _f.__workletHash = 9449590654216;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
var _worklet_11648056036632_init_data = {
  code: "function runWorklet(type, gesture, event, ...args) {\n  const {\n    getHandler,\n    _utils\n  } = this._closure;\n  const handler = getHandler(type, gesture);\n  if (gesture.isWorklet[type]) {\n    handler === null || handler === void 0 ? void 0 : handler(event, ...args);\n  } else if (handler) {\n    console.warn((0, _utils.tagMessage)('Animated gesture callback must be a worklet'));\n  }\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js",
  sourceMap: "{\"version\":3,\"names\":[\"runWorklet\",\"type\",\"gesture\",\"event\",\"args\",\"getHandler\",\"_utils\",\"_closure\",\"handler\",\"isWorklet\",\"console\",\"warn\",\"tagMessage\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js\"],\"mappings\":\"AAiVA,SAAAA,UAASA,CAAWC,IAAA,EAAIC,OAAE,EAAOC,KAAE,EAAK,GAAEC,IAAG,EAAI;EAAA;IAAAC,UAAA;IAAAC;EAAA,SAAAC,QAAA;EAG/C,MAAMC,OAAO,GAAGH,UAAU,CAACJ,IAAI,EAAEC,OAAO,CAAC;EAEzC,IAAIA,OAAO,CAACO,SAAS,CAACR,IAAI,CAAC,EAAE;IAG3BO,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACL,KAAK,EAAE,GAAGC,IAAI,CAAC;EAC3E,CAAC,MAAM,IAAII,OAAO,EAAE;IAClBE,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,EAAEL,MAAM,CAACM,UAAU,EAAE,6CAA6C,CAAC,CAAC;EACrF;AACF\"}"
};
var runWorklet = function () {
  var _e = [new global.Error(), -3, -27];
  var _f = function _f(type, gesture, event) {
    var handler = getHandler(type, gesture);
    if (gesture.isWorklet[type]) {
      for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        args[_key - 3] = arguments[_key];
      }
      handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [event].concat(args));
    } else if (handler) {
      console.warn((0, _utils.tagMessage)('Animated gesture callback must be a worklet'));
    }
  };
  _f._closure = {
    getHandler: getHandler,
    _utils: _utils
  };
  _f.__initData = _worklet_11648056036632_init_data;
  _f.__workletHash = 11648056036632;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
var _worklet_6439535962839_init_data = {
  code: "function anonymous(event) {\n  const {\n    sharedHandlersCallbacks,\n    isStateChangeEvent,\n    _State,\n    runWorklet,\n    _gesture,\n    lastUpdateEvent,\n    isTouchEvent,\n    stateControllers,\n    _gestureStateManager,\n    _TouchEventType,\n    touchEventTypeToCallbackType\n  } = this._closure;\n  const currentCallback = sharedHandlersCallbacks.value;\n  if (!currentCallback) {\n    return;\n  }\n  for (let i = 0; i < currentCallback.length; i++) {\n    const gesture = currentCallback[i];\n    if (event.handlerTag === gesture.handlerTag) {\n      if (isStateChangeEvent(event)) {\n        if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {\n          runWorklet(_gesture.CALLBACK_TYPE.BEGAN, gesture, event);\n        } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {\n          runWorklet(_gesture.CALLBACK_TYPE.START, gesture, event);\n          lastUpdateEvent.value[gesture.handlerTag] = undefined;\n        } else if (event.oldState !== event.state && event.state === _State.State.END) {\n          if (event.oldState === _State.State.ACTIVE) {\n            runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, true);\n          }\n          runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, true);\n        } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.state !== event.oldState) {\n          if (event.oldState === _State.State.ACTIVE) {\n            runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, false);\n          }\n          runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, false);\n        }\n      } else if (isTouchEvent(event)) {\n        if (!stateControllers[i]) {\n          stateControllers[i] = _gestureStateManager.GestureStateManager.create(event.handlerTag);\n        }\n        if (event.eventType !== _TouchEventType.TouchEventType.UNDETERMINED) {\n          runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n        }\n      } else {\n        runWorklet(_gesture.CALLBACK_TYPE.UPDATE, gesture, event);\n        if (gesture.onChange && gesture.changeEventCalculator) {\n          var _gesture$changeEventC;\n          runWorklet(_gesture.CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));\n          lastUpdateEvent.value[gesture.handlerTag] = event;\n        }\n      }\n    }\n  }\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"event\",\"sharedHandlersCallbacks\",\"isStateChangeEvent\",\"_State\",\"runWorklet\",\"_gesture\",\"lastUpdateEvent\",\"isTouchEvent\",\"stateControllers\",\"_gestureStateManager\",\"_TouchEventType\",\"touchEventTypeToCallbackType\",\"_closure\",\"currentCallback\",\"value\",\"i\",\"length\",\"gesture\",\"handlerTag\",\"oldState\",\"State\",\"UNDETERMINED\",\"state\",\"BEGAN\",\"CALLBACK_TYPE\",\"ACTIVE\",\"START\",\"undefined\",\"END\",\"FINALIZE\",\"FAILED\",\"CANCELLED\",\"GestureStateManager\",\"create\",\"eventType\",\"TouchEventType\",\"UPDATE\",\"onChange\",\"changeEventCalculator\",\"_gesture$changeEventC\",\"CHANGE\",\"call\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js\"],\"mappings\":\"AA+WmB,SAAAA,SAASA,CAAAC,KAAA;EAAA;IAAAC,uBAAA;IAAAC,kBAAA;IAAAC,MAAA;IAAAC,UAAA;IAAAC,QAAA;IAAAC,eAAA;IAAAC,YAAA;IAAAC,gBAAA;IAAAC,oBAAA;IAAAC,eAAA;IAAAC;EAAA,SAAAC,QAAA;EAGxB,MAAMC,eAAe,GAAGZ,uBAAuB,CAACa,KAAK;EAErD,IAAI,CAACD,eAAe,EAAE;IACpB;EACF;EAEA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,eAAe,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IAC/C,MAAME,OAAO,GAAGJ,eAAe,CAACE,CAAC,CAAC;IAElC,IAAIf,KAAK,CAACkB,UAAU,KAAKD,OAAO,CAACC,UAAU,EAAE;MAC3C,IAAIhB,kBAAkB,CAACF,KAAK,CAAC,EAAE;QAC7B,IAAIA,KAAK,CAACmB,QAAQ,KAAKhB,MAAM,CAACiB,KAAK,CAACC,YAAY,IAAIrB,KAAK,CAACsB,KAAK,KAAKnB,MAAM,CAACiB,KAAK,CAACG,KAAK,EAAE;UACtFnB,UAAU,CAACC,QAAQ,CAACmB,aAAa,CAACD,KAAK,EAAEN,OAAO,EAAEjB,KAAK,CAAC;QAC1D,CAAC,MAAM,IAAI,CAACA,KAAK,CAACmB,QAAQ,KAAKhB,MAAM,CAACiB,KAAK,CAACG,KAAK,IAAIvB,KAAK,CAACmB,QAAQ,KAAKhB,MAAM,CAACiB,KAAK,CAACC,YAAY,KAAKrB,KAAK,CAACsB,KAAK,KAAKnB,MAAM,CAACiB,KAAK,CAACK,MAAM,EAAE;UACzIrB,UAAU,CAACC,QAAQ,CAACmB,aAAa,CAACE,KAAK,EAAET,OAAO,EAAEjB,KAAK,CAAC;UACxDM,eAAe,CAACQ,KAAK,CAACG,OAAO,CAACC,UAAU,CAAC,GAAGS,SAAS;QACvD,CAAC,MAAM,IAAI3B,KAAK,CAACmB,QAAQ,KAAKnB,KAAK,CAACsB,KAAK,IAAItB,KAAK,CAACsB,KAAK,KAAKnB,MAAM,CAACiB,KAAK,CAACQ,GAAG,EAAE;UAC7E,IAAI5B,KAAK,CAACmB,QAAQ,KAAKhB,MAAM,CAACiB,KAAK,CAACK,MAAM,EAAE;YAC1CrB,UAAU,CAACC,QAAQ,CAACmB,aAAa,CAACI,GAAG,EAAEX,OAAO,EAAEjB,KAAK,EAAE,IAAI,CAAC;UAC9D;UAEAI,UAAU,CAACC,QAAQ,CAACmB,aAAa,CAACK,QAAQ,EAAEZ,OAAO,EAAEjB,KAAK,EAAE,IAAI,CAAC;QACnE,CAAC,MAAM,IAAI,CAACA,KAAK,CAACsB,KAAK,KAAKnB,MAAM,CAACiB,KAAK,CAACU,MAAM,IAAI9B,KAAK,CAACsB,KAAK,KAAKnB,MAAM,CAACiB,KAAK,CAACW,SAAS,KAAK/B,KAAK,CAACsB,KAAK,KAAKtB,KAAK,CAACmB,QAAQ,EAAE;UAC5H,IAAInB,KAAK,CAACmB,QAAQ,KAAKhB,MAAM,CAACiB,KAAK,CAACK,MAAM,EAAE;YAC1CrB,UAAU,CAACC,QAAQ,CAACmB,aAAa,CAACI,GAAG,EAAEX,OAAO,EAAEjB,KAAK,EAAE,KAAK,CAAC;UAC/D;UAEAI,UAAU,CAACC,QAAQ,CAACmB,aAAa,CAACK,QAAQ,EAAEZ,OAAO,EAAEjB,KAAK,EAAE,KAAK,CAAC;QACpE;MACF,CAAC,MAAM,IAAIO,YAAY,CAACP,KAAK,CAAC,EAAE;QAC9B,IAAI,CAACQ,gBAAgB,CAACO,CAAC,CAAC,EAAE;UACxBP,gBAAgB,CAACO,CAAC,CAAC,GAAGN,oBAAoB,CAACuB,mBAAmB,CAACC,MAAM,CAACjC,KAAK,CAACkB,UAAU,CAAC;QACzF;QAEA,IAAIlB,KAAK,CAACkC,SAAS,KAAKxB,eAAe,CAACyB,cAAc,CAACd,YAAY,EAAE;UACnEjB,UAAU,CAACO,4BAA4B,CAACX,KAAK,CAACkC,SAAS,CAAC,EAAEjB,OAAO,EAAEjB,KAAK,EAAEQ,gBAAgB,CAACO,CAAC,CAAC,CAAC;QAChG;MACF,CAAC,MAAM;QACLX,UAAU,CAACC,QAAQ,CAACmB,aAAa,CAACY,MAAM,EAAEnB,OAAO,EAAEjB,KAAK,CAAC;QAEzD,IAAIiB,OAAO,CAACoB,QAAQ,IAAIpB,OAAO,CAACqB,qBAAqB,EAAE;UACrD,IAAIC,qBAAqB;UAEzBnC,UAAU,CAACC,QAAQ,CAACmB,aAAa,CAACgB,MAAM,EAAEvB,OAAO,EAAE,CAACsB,qBAAqB,GAAGtB,OAAO,CAACqB,qBAAqB,MAAM,IAAI,IAAIC,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACE,IAAI,CAACxB,OAAO,EAAEjB,KAAK,EAAEM,eAAe,CAACQ,KAAK,CAACG,OAAO,CAACC,UAAU,CAAC,CAAC,CAAC;UACzPZ,eAAe,CAACQ,KAAK,CAACG,OAAO,CAACC,UAAU,CAAC,GAAGlB,KAAK;QACnD;MACF;IACF;EACF;AACF\"}"
};
function useAnimatedGesture(preparedGesture, needsRebuild) {
  if (!_reanimatedWrapper.Reanimated) {
    return;
  }
  var sharedHandlersCallbacks = _reanimatedWrapper.Reanimated.useSharedValue(null);
  var lastUpdateEvent = _reanimatedWrapper.Reanimated.useSharedValue([]);
  var stateControllers = [];
  var callback = function () {
    var _e = [new global.Error(), -12, -27];
    var _f = function _f(event) {
      var currentCallback = sharedHandlersCallbacks.value;
      if (!currentCallback) {
        return;
      }
      for (var i = 0; i < currentCallback.length; i++) {
        var gesture = currentCallback[i];
        if (event.handlerTag === gesture.handlerTag) {
          if (isStateChangeEvent(event)) {
            if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {
              runWorklet(_gesture.CALLBACK_TYPE.BEGAN, gesture, event);
            } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {
              runWorklet(_gesture.CALLBACK_TYPE.START, gesture, event);
              lastUpdateEvent.value[gesture.handlerTag] = undefined;
            } else if (event.oldState !== event.state && event.state === _State.State.END) {
              if (event.oldState === _State.State.ACTIVE) {
                runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, true);
              }
              runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, true);
            } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.state !== event.oldState) {
              if (event.oldState === _State.State.ACTIVE) {
                runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, false);
              }
              runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, false);
            }
          } else if (isTouchEvent(event)) {
            if (!stateControllers[i]) {
              stateControllers[i] = _gestureStateManager.GestureStateManager.create(event.handlerTag);
            }
            if (event.eventType !== _TouchEventType.TouchEventType.UNDETERMINED) {
              runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);
            }
          } else {
            runWorklet(_gesture.CALLBACK_TYPE.UPDATE, gesture, event);
            if (gesture.onChange && gesture.changeEventCalculator) {
              var _gesture$changeEventC;
              runWorklet(_gesture.CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));
              lastUpdateEvent.value[gesture.handlerTag] = event;
            }
          }
        }
      }
    };
    _f._closure = {
      sharedHandlersCallbacks: sharedHandlersCallbacks,
      isStateChangeEvent: isStateChangeEvent,
      _State: _State,
      runWorklet: runWorklet,
      _gesture: _gesture,
      lastUpdateEvent: lastUpdateEvent,
      isTouchEvent: isTouchEvent,
      stateControllers: stateControllers,
      _gestureStateManager: _gestureStateManager,
      _TouchEventType: _TouchEventType,
      touchEventTypeToCallbackType: touchEventTypeToCallbackType
    };
    _f.__initData = _worklet_6439535962839_init_data;
    _f.__workletHash = 6439535962839;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }();
  var event = _reanimatedWrapper.Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], needsRebuild);
  preparedGesture.animatedEventHandler = event;
  preparedGesture.animatedHandlers = sharedHandlersCallbacks;
}
function validateDetectorChildren(ref) {
  if (__DEV__ && _reactNative.Platform.OS !== 'web') {
    var wrapType = _utils.REACT_NATIVE_VERSION.minor > 63 || _utils.REACT_NATIVE_VERSION.major > 0 ? ref._reactInternals.elementType : ref._reactInternalFiber.elementType;
    var instance = _RNRenderer.RNRenderer.findHostInstance_DEPRECATED(ref)._internalFiberInstanceHandleDEV;
    while (instance && instance.elementType !== wrapType) {
      if (instance.sibling) {
        throw new Error('GestureDetector has more than one native view as its children. This can happen if you are using a custom component that renders multiple views, like React.Fragment. You should wrap content of GestureDetector with a <View> or <Animated.View>.');
      }
      instance = instance.return;
    }
  }
}
var applyUserSelectProp = function applyUserSelectProp(userSelect, gesture) {
  for (var g of gesture.toGestureArray()) {
    g.config.userSelect = userSelect;
  }
};
var GestureDetector = function GestureDetector(props) {
  var rootViewContext = (0, _react.useContext)(_GestureHandlerRootViewContext.default);
  if (__DEV__ && !rootViewContext && !(0, _utils.isJestEnv)() && _reactNative.Platform.OS !== 'web') {
    throw new Error('GestureDetector must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');
  }
  var gestureConfig = props.gesture;
  if (props.userSelect) {
    applyUserSelectProp(props.userSelect, gestureConfig);
  }
  var gesture = gestureConfig.toGestureArray();
  var useReanimatedHook = gesture.some(function (g) {
    return g.shouldUseReanimated;
  });
  var state = (0, _react.useRef)({
    firstRender: true,
    viewRef: null,
    previousViewTag: -1,
    forceReattach: false
  }).current;
  var mountedRef = (0, _react.useRef)(false);
  var webEventHandlersRef = (0, _react.useRef)({
    onGestureHandlerEvent: function onGestureHandlerEvent(e) {
      (0, _eventReceiver.onGestureHandlerEvent)(e.nativeEvent);
    },
    onGestureHandlerStateChange: (0, _EnableNewWebImplementation.isNewWebImplementationEnabled)() ? function (e) {
      (0, _eventReceiver.onGestureHandlerEvent)(e.nativeEvent);
    } : undefined
  });
  var _ref2 = (0, _react.useState)(false),
    _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
    renderState = _ref3[0],
    setRenderState = _ref3[1];
  function forceRender() {
    setRenderState(!renderState);
  }
  var preparedGesture = _react.default.useRef({
    config: gesture,
    animatedEventHandler: null,
    animatedHandlers: null,
    firstExecution: true,
    useReanimatedHook: useReanimatedHook
  }).current;
  if (useReanimatedHook !== preparedGesture.useReanimatedHook) {
    throw new Error((0, _utils.tagMessage)('You cannot change the thread the callbacks are ran on while the app is running'));
  }
  function onHandlersUpdate(skipConfigUpdate) {
    var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(state.viewRef);
    var forceReattach = viewTag !== state.previousViewTag;
    if (forceReattach || needsToReattach(preparedGesture, gesture)) {
      validateDetectorChildren(state.viewRef);
      dropHandlers(preparedGesture);
      attachHandlers({
        preparedGesture: preparedGesture,
        gestureConfig: gestureConfig,
        gesture: gesture,
        webEventHandlersRef: webEventHandlersRef,
        viewTag: viewTag,
        mountedRef: mountedRef
      });
      state.previousViewTag = viewTag;
      state.forceReattach = forceReattach;
      if (forceReattach) {
        forceRender();
      }
    } else if (!skipConfigUpdate) {
      updateHandlers(preparedGesture, gestureConfig, gesture, mountedRef);
    }
  }
  var needsToRebuildReanimatedEvent = preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture) || state.forceReattach;
  state.forceReattach = false;
  if (preparedGesture.firstExecution) {
    gestureConfig.initialize();
  }
  if (useReanimatedHook) {
    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);
  }
  (0, _react.useEffect)(function () {
    var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(state.viewRef);
    state.firstRender = true;
    mountedRef.current = true;
    validateDetectorChildren(state.viewRef);
    attachHandlers({
      preparedGesture: preparedGesture,
      gestureConfig: gestureConfig,
      gesture: gesture,
      webEventHandlersRef: webEventHandlersRef,
      viewTag: viewTag,
      mountedRef: mountedRef
    });
    return function () {
      mountedRef.current = false;
      dropHandlers(preparedGesture);
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (!state.firstRender) {
      onHandlersUpdate();
    } else {
      state.firstRender = false;
    }
  }, [props]);
  var refFunction = function refFunction(ref) {
    if (ref !== null) {
      state.viewRef = ref;
      if (state.previousViewTag === -1) {
        state.previousViewTag = (0, _gestureHandlerCommon.findNodeHandle)(state.viewRef);
      }
      onHandlersUpdate(true);
      if ((0, _utils.isFabric)()) {
        var node = (0, _getShadowNodeFromRef.getShadowNodeFromRef)(ref);
        if (global.isFormsStackingContext(node) === false) {
          console.error((0, _utils.tagMessage)('GestureDetector has received a child that may get view-flattened. ' + '\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));
        }
      }
    }
  };
  if (useReanimatedHook) {
    return _react.default.createElement(AnimatedWrap, {
      ref: refFunction,
      onGestureHandlerEvent: preparedGesture.animatedEventHandler
    }, props.children);
  } else {
    return _react.default.createElement(Wrap, {
      ref: refFunction
    }, props.children);
  }
};
exports.GestureDetector = GestureDetector;
var Wrap = function (_react$default$Compon) {
  (0, _inherits2.default)(Wrap, _react$default$Compon);
  var _super = _createSuper(Wrap);
  function Wrap() {
    (0, _classCallCheck2.default)(this, Wrap);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(Wrap, [{
    key: "render",
    value: function render() {
      try {
        var child = _react.default.Children.only(this.props.children);
        return _react.default.cloneElement(child, {
          collapsable: false
        }, child.props.children);
      } catch (e) {
        throw new Error((0, _utils.tagMessage)(`GestureDetector got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));
      }
    }
  }]);
  return Wrap;
}(_react.default.Component);
var AnimatedWrap = (_Reanimated$default$c = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : (_Reanimated$default = _reanimatedWrapper.Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,