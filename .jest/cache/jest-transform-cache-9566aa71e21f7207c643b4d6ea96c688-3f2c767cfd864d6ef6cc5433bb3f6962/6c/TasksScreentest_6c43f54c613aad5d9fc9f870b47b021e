6aee834cc60cb688d9c0537e2543ce8e
_getJestObj().mock("expo-haptics", function () {
  return {
    Haptics: {
      impactAsync: jest.fn(),
      ImpactFeedbackStyle: {
        Light: "Light"
      }
    }
  };
});
_getJestObj().mock("../../firebase", function () {
  return {
    auth: {
      currentUser: {
        uid: "kbooz37ipoWcOL9GRFXLfnOthov2"
      }
    },
    createUserWithEmailAndPassword: jest.fn(),
    getReactNativePersistence: jest.fn(),
    initializeAuth: jest.fn()
  };
});
_getJestObj().mock('expo-notifications', function () {
  return {
    requestPermissionsAsync: jest.fn().mockResolvedValue({
      status: 'granted'
    })
  };
});
_getJestObj().mock("expo-image-picker", function () {
  return {};
});
_getJestObj().mock("expo-calendar", function () {
  return {
    requestCalendarPermissionsAsync: jest.fn().mockResolvedValue({
      status: "granted"
    }),
    getCalendarsAsync: jest.fn().mockResolvedValue([{
      id: "1",
      allowsModifications: true,
      type: "local"
    }]),
    createEventAsync: jest.fn(),
    deleteEventAsync: jest.fn(),
    EntityTypes: {
      EVENT: "event"
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _TasksScreen = _interopRequireDefault(require("../../src/screens/TasksScreen"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRoute = {
  params: {
    openBottomSheetModal: false,
    title: "Sample Task",
    resourceId: {
      videoId: "sampleVideoId"
    }
  }
};
test("Renders TasksScreen correctly", function () {
  var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_TasksScreen.default, {
      route: mockRoute
    })),
    getByText = _render.getByText,
    getByTestId = _render.getByTestId;
  var greetingElement = getByText("Your Tasks");
  var newTaskButton = getByTestId("newTaskButton");
  expect(greetingElement).toBeTruthy();
  expect(newTaskButton).toBeTruthy();
});
test('Handle the "New Task" button press', function () {
  var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_TasksScreen.default, {
      route: mockRoute
    })),
    getByTestId = _render2.getByTestId;
  var newTaskButton = getByTestId("newTaskButton");
  _reactNative.fireEvent.press(newTaskButton);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,