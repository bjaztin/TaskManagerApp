d18fe331a753814f5a926e4d952b0d77
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ButtonGroup = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _helpers = require("../helpers");
var _Text = _interopRequireDefault(require("../text/Text"));
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ButtonGroup = function ButtonGroup(props) {
  var _a;
  var theme = props.theme,
    rest = __rest(props, ["theme"]);
  var _rest$Component = rest.Component,
    Component = _rest$Component === void 0 ? _reactNative.Platform.select({
      android: _reactNative.TouchableNativeFeedback,
      default: _reactNative.TouchableOpacity
    }) : _rest$Component,
    buttons = rest.buttons,
    _rest$onPress = rest.onPress,
    _onPress = _rest$onPress === void 0 ? function () {
      return null;
    } : _rest$onPress,
    _rest$selectedIndex = rest.selectedIndex,
    selectedIndex = _rest$selectedIndex === void 0 ? null : _rest$selectedIndex,
    _rest$selectedIndexes = rest.selectedIndexes,
    selectedIndexes = _rest$selectedIndexes === void 0 ? [] : _rest$selectedIndexes,
    _rest$selectMultiple = rest.selectMultiple,
    selectMultiple = _rest$selectMultiple === void 0 ? false : _rest$selectMultiple,
    containerStyle = rest.containerStyle,
    innerBorderStyle = rest.innerBorderStyle,
    buttonStyle = rest.buttonStyle,
    buttonContainerStyle = rest.buttonContainerStyle,
    textStyle = rest.textStyle,
    selectedTextStyle = rest.selectedTextStyle,
    selectedButtonStyle = rest.selectedButtonStyle,
    _rest$underlayColor = rest.underlayColor,
    underlayColor = _rest$underlayColor === void 0 ? (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.primary : _rest$underlayColor,
    activeOpacity = rest.activeOpacity,
    onHideUnderlay = rest.onHideUnderlay,
    onShowUnderlay = rest.onShowUnderlay,
    setOpacityTo = rest.setOpacityTo,
    _rest$disabled = rest.disabled,
    disabled = _rest$disabled === void 0 ? false : _rest$disabled,
    disabledStyle = rest.disabledStyle,
    disabledTextStyle = rest.disabledTextStyle,
    disabledSelectedStyle = rest.disabledSelectedStyle,
    disabledSelectedTextStyle = rest.disabledSelectedTextStyle,
    _rest$vertical = rest.vertical,
    vertical = _rest$vertical === void 0 ? false : _rest$vertical,
    attributes = __rest(rest, ["Component", "buttons", "onPress", "selectedIndex", "selectedIndexes", "selectMultiple", "containerStyle", "innerBorderStyle", "buttonStyle", "buttonContainerStyle", "textStyle", "selectedTextStyle", "selectedButtonStyle", "underlayColor", "activeOpacity", "onHideUnderlay", "onShowUnderlay", "setOpacityTo", "disabled", "disabledStyle", "disabledTextStyle", "disabledSelectedStyle", "disabledSelectedTextStyle", "vertical"]);
  var innerBorderWidth = 1;
  if (innerBorderStyle && Object.prototype.hasOwnProperty.call(innerBorderStyle, 'width')) {
    innerBorderWidth = innerBorderStyle.width;
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, _objectSpread(_objectSpread({}, attributes), {}, {
    style: _reactNative.StyleSheet.flatten([styles.container, vertical && styles.verticalContainer, containerStyle && containerStyle]),
    children: buttons === null || buttons === void 0 ? void 0 : buttons.map(function (button, i) {
      var _a, _b, _c, _d, _e, _f;
      var isSelected = selectedIndex === i || selectedIndexes.includes(i);
      var isDisabled = disabled === true || Array.isArray(disabled) && disabled.includes(i);
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.button, vertical && styles.verticalComponent, i !== buttons.length - 1 && (vertical ? {
          borderBottomWidth: innerBorderWidth,
          borderBottomColor: innerBorderStyle && innerBorderStyle.color || ((_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.grey4)
        } : {
          borderRightWidth: innerBorderWidth,
          borderRightColor: innerBorderStyle && innerBorderStyle.color || ((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.grey4)
        }), buttonContainerStyle]),
        children: (0, _jsxRuntime.jsx)(Component, {
          testID: "buttonGroupItem",
          activeOpacity: activeOpacity,
          setOpacityTo: setOpacityTo,
          onHideUnderlay: onHideUnderlay,
          onShowUnderlay: onShowUnderlay,
          underlayColor: underlayColor,
          disabled: isDisabled,
          onPress: function onPress() {
            if (selectMultiple) {
              if (selectedIndexes.includes(i)) {
                _onPress(selectedIndexes.filter(function (index) {
                  return index !== i;
                }));
              } else {
                _onPress([].concat((0, _toConsumableArray2.default)(selectedIndexes), [i]));
              }
            } else {
              _onPress(i);
            }
          },
          style: styles.button,
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: _reactNative.StyleSheet.flatten([styles.textContainer, buttonStyle && buttonStyle, isSelected && {
              backgroundColor: (_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.primary
            }, isSelected && selectedButtonStyle && selectedButtonStyle, isDisabled && styles.disabled, isDisabled && disabledStyle, isDisabled && isSelected && {
              backgroundColor: (_d = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _d === void 0 ? void 0 : _d.disabled
            }, isDisabled && isSelected && disabledSelectedStyle]),
            children: button.element ? (0, _jsxRuntime.jsx)(button.element, {}) : (0, _jsxRuntime.jsx)(_Text.default, {
              testID: "buttonGroupItemText",
              style: _reactNative.StyleSheet.flatten([Object.assign({
                fontSize: (0, _helpers.normalizeText)(13),
                color: (_e = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _e === void 0 ? void 0 : _e.grey2
              }, _reactNative.Platform.select({
                android: {},
                default: {
                  fontWeight: '500'
                }
              })), textStyle && textStyle, isSelected && {
                color: '#fff'
              }, isSelected && selectedTextStyle, isDisabled && {
                color: (0, _helpers.color)((_f = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _f === void 0 ? void 0 : _f.disabled).darken(0.3).toString()
              }, isDisabled && disabledTextStyle, isDisabled && isSelected && disabledSelectedTextStyle]),
              children: button
            })
          })
        })
      }, i);
    })
  }));
};
exports.ButtonGroup = ButtonGroup;
var styles = _reactNative.StyleSheet.create({
  button: {
    flex: 1
  },
  textContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  container: {
    marginHorizontal: 10,
    marginVertical: 5,
    borderColor: '#e3e3e3',
    borderWidth: 1,
    flexDirection: 'row',
    borderRadius: 3,
    overflow: 'hidden',
    backgroundColor: '#fff',
    height: 40
  },
  verticalContainer: {
    flexDirection: 'column',
    height: null
  },
  verticalComponent: {
    height: 40
  },
  disabled: {
    backgroundColor: 'transparent'
  }
});
var _default = (0, _config.withTheme)(ButtonGroup, 'ButtonGroup');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,