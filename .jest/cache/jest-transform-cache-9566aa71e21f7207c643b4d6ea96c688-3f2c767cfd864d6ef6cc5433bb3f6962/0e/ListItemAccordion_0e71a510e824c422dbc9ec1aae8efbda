ebf12bdc4a7df2b1640113aadd83216c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _ListItemBase = _interopRequireDefault(require("./ListItemBase"));
var _ListItemContent = _interopRequireDefault(require("./ListItemContent"));
var _config = require("../config");
var _Icon = require("../icons/Icon");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Accordion = function Accordion(_a) {
  var children = _a.children,
    isExpanded = _a.isExpanded,
    icon = _a.icon,
    expandIcon = _a.expandIcon,
    content = _a.content,
    noRotation = _a.noRotation,
    noIcon = _a.noIcon,
    _a$animation = _a.animation,
    animation = _a$animation === void 0 ? {
      duration: 350,
      type: 'timing'
    } : _a$animation,
    props = __rest(_a, ["children", "isExpanded", "icon", "expandIcon", "content", "noRotation", "noIcon", "animation"]);
  var _React$useRef = _react.default.useRef(new _reactNative.Animated.Value(0)),
    transition = _React$useRef.current;
  var startAnimation = _react.default.useCallback(function () {
    if (typeof animation !== 'boolean') {
      _reactNative.Animated[animation.type || 'timing'](transition, {
        toValue: Number(isExpanded),
        useNativeDriver: false,
        duration: animation.duration || 350
      }).start();
    }
  }, [isExpanded, transition, animation]);
  _react.default.useEffect(function () {
    startAnimation();
  }, [isExpanded, startAnimation]);
  var rotate = noRotation || typeof animation === 'boolean' && animation ? '0deg' : transition.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '-180deg']
  });
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsxs)(_ListItemBase.default, _objectSpread(_objectSpread({}, props), {}, {
      children: [_react.default.isValidElement(content) ? content : (0, _jsxRuntime.jsx)(_ListItemContent.default, {}), !noIcon && (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: {
          transform: [{
            rotate: rotate
          }]
        },
        children: icon ? (0, _jsxRuntime.jsx)(_Icon.Icon, _objectSpread({}, expandIcon ? isExpanded ? expandIcon : icon : icon)) : (0, _jsxRuntime.jsx)(_Icon.Icon, {
          name: 'chevron-down',
          type: "material-community"
        })
      })]
    })), (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      style: [Boolean(animation) && {
        maxHeight: transition.interpolate({
          inputRange: [0, 1],
          outputRange: ['0%', '100%']
        }),
        opacity: transition
      }],
      children: children
    })]
  });
};
var _default = (0, _config.withTheme)(Accordion, 'ListItemAccordion');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,