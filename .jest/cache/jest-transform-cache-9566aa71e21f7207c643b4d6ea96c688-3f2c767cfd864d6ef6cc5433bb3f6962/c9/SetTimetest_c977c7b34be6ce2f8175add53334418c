e17cce2d5ff8b30c81c62e31aba32cf6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _SetTime = _interopRequireDefault(require("../../../src/components/TaskScreenFeatures/SetTime"));
var _jsxRuntime = require("react/jsx-runtime");
describe("SetTime component", function () {
  test("Render SetTime function correctly", (0, _asyncToGenerator2.default)(function* () {
    var selectedTimeMock = new Date();
    var onSelectedTimeChangeMock = jest.fn();
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SetTime.default, {
        selectedTime: selectedTimeMock,
        onSelectedTimeChange: onSelectedTimeChangeMock
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId,
      queryByTestId = _render.queryByTestId;
    expect(getByText("Start Time")).toBeDefined();
    expect(getByTestId("timeSwitch")).toBeDefined();
    expect(queryByTestId("timePicker")).toBeNull();
    var timeSwitch = getByTestId("timeSwitch");
    (0, _reactNative.act)(function () {
      _reactNative.fireEvent.press(timeSwitch);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId("timePicker")).toBeDefined();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9TZXRUaW1lIiwiX2pzeFJ1bnRpbWUiLCJkZXNjcmliZSIsInRlc3QiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkZWZhdWx0Iiwic2VsZWN0ZWRUaW1lTW9jayIsIkRhdGUiLCJvblNlbGVjdGVkVGltZUNoYW5nZU1vY2siLCJqZXN0IiwiZm4iLCJfcmVuZGVyIiwicmVuZGVyIiwianN4Iiwic2VsZWN0ZWRUaW1lIiwib25TZWxlY3RlZFRpbWVDaGFuZ2UiLCJnZXRCeVRleHQiLCJnZXRCeVRlc3RJZCIsInF1ZXJ5QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsInRvQmVOdWxsIiwidGltZVN3aXRjaCIsImFjdCIsImZpcmVFdmVudCIsInByZXNzIiwid2FpdEZvciJdLCJzb3VyY2VzIjpbIlNldFRpbWUudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgYWN0LCB3YWl0Rm9yIH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgU2V0VGltZSBmcm9tIFwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVGFza1NjcmVlbkZlYXR1cmVzL1NldFRpbWVcIjtcblxuZGVzY3JpYmUoXCJTZXRUaW1lIGNvbXBvbmVudFwiLCAoKSA9PiB7XG4gIHRlc3QoXCJSZW5kZXIgU2V0VGltZSBmdW5jdGlvbiBjb3JyZWN0bHlcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGVkVGltZU1vY2sgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IG9uU2VsZWN0ZWRUaW1lQ2hhbmdlTW9jayA9IGplc3QuZm4oKTtcblxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCwgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPFNldFRpbWVcbiAgICAgICAgc2VsZWN0ZWRUaW1lPXtzZWxlY3RlZFRpbWVNb2NrfVxuICAgICAgICBvblNlbGVjdGVkVGltZUNoYW5nZT17b25TZWxlY3RlZFRpbWVDaGFuZ2VNb2NrfVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgZXhwZWN0KGdldEJ5VGV4dChcIlN0YXJ0IFRpbWVcIikpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKFwidGltZVN3aXRjaFwiKSkudG9CZURlZmluZWQoKTtcblxuICAgIGV4cGVjdChxdWVyeUJ5VGVzdElkKFwidGltZVBpY2tlclwiKSkudG9CZU51bGwoKTtcblxuICAgIGNvbnN0IHRpbWVTd2l0Y2ggPSBnZXRCeVRlc3RJZChcInRpbWVTd2l0Y2hcIik7XG4gICAgYWN0KCgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyh0aW1lU3dpdGNoKTtcbiAgICB9KTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoXCJ0aW1lUGlja2VyXCIpKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcblxufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsUUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXlFLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUV6RUksUUFBUSxDQUFDLG1CQUFtQixFQUFFLFlBQU07RUFDbENDLElBQUksQ0FBQyxtQ0FBbUMsTUFBQUMsa0JBQUEsQ0FBQUMsT0FBQSxFQUFFLGFBQVk7SUFDcEQsSUFBTUMsZ0JBQWdCLEdBQUcsSUFBSUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsSUFBTUMsd0JBQXdCLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFFMUMsSUFBQUMsT0FBQSxHQUFrRCxJQUFBQyxtQkFBTSxFQUN0RCxJQUFBWCxXQUFBLENBQUFZLEdBQUEsRUFBQ2IsUUFBQSxDQUFBSyxPQUFPO1FBQ05TLFlBQVksRUFBRVIsZ0JBQWlCO1FBQy9CUyxvQkFBb0IsRUFBRVA7TUFBeUIsQ0FDaEQsQ0FDSCxDQUFDO01BTE9RLFNBQVMsR0FBQUwsT0FBQSxDQUFUSyxTQUFTO01BQUVDLFdBQVcsR0FBQU4sT0FBQSxDQUFYTSxXQUFXO01BQUVDLGFBQWEsR0FBQVAsT0FBQSxDQUFiTyxhQUFhO0lBTzdDQyxNQUFNLENBQUNILFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDSSxXQUFXLENBQUMsQ0FBQztJQUM3Q0QsTUFBTSxDQUFDRixXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQ0csV0FBVyxDQUFDLENBQUM7SUFFL0NELE1BQU0sQ0FBQ0QsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUNHLFFBQVEsQ0FBQyxDQUFDO0lBRTlDLElBQU1DLFVBQVUsR0FBR0wsV0FBVyxDQUFDLFlBQVksQ0FBQztJQUM1QyxJQUFBTSxnQkFBRyxFQUFDLFlBQU07TUFDUkMsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSCxVQUFVLENBQUM7SUFDN0IsQ0FBQyxDQUFDO0lBRUYsTUFBTSxJQUFBSSxvQkFBTyxFQUFDLFlBQU07TUFDbEJQLE1BQU0sQ0FBQ0QsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUNFLFdBQVcsQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQztFQUNKLENBQUMsRUFBQztBQUVKLENBQUMsQ0FBQyJ9