c62466d99ec31106ed5a9a5667f79ea9
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatNumbers = formatNumbers;
exports.generateDay = generateDay;
exports.getLocale = getLocale;
exports.getPartialWeekDates = getPartialWeekDates;
exports.getWeekDates = getWeekDates;
exports.isDateNotInRange = isDateNotInRange;
exports.isGTE = isGTE;
exports.isLTE = isLTE;
exports.isPastDate = isPastDate;
exports.isToday = isToday;
exports.month = month;
exports.onSameDateRange = onSameDateRange;
exports.page = page;
exports.sameDate = sameDate;
exports.sameMonth = sameMonth;
exports.sameWeek = sameWeek;
exports.weekDayNames = weekDayNames;
var XDate = require('xdate');
var _require = require("./interface"),
  toMarkingFormat = _require.toMarkingFormat;
var latinNumbersPattern = /[0-9]/g;
function isValidXDate(date) {
  return date && date instanceof XDate;
}
function sameMonth(a, b) {
  if (!isValidXDate(a) || !isValidXDate(b)) {
    return false;
  } else {
    return (a == null ? void 0 : a.getFullYear()) === (b == null ? void 0 : b.getFullYear()) && (a == null ? void 0 : a.getMonth()) === (b == null ? void 0 : b.getMonth());
  }
}
function sameDate(a, b) {
  if (!isValidXDate(a) || !isValidXDate(b)) {
    return false;
  } else {
    return (a == null ? void 0 : a.getFullYear()) === (b == null ? void 0 : b.getFullYear()) && (a == null ? void 0 : a.getMonth()) === (b == null ? void 0 : b.getMonth()) && (a == null ? void 0 : a.getDate()) === (b == null ? void 0 : b.getDate());
  }
}
function onSameDateRange(_ref) {
  var firstDay = _ref.firstDay,
    secondDay = _ref.secondDay,
    numberOfDays = _ref.numberOfDays,
    firstDateInRange = _ref.firstDateInRange;
  var aDate = new XDate(firstDay);
  var bDate = new XDate(secondDay);
  var firstDayDate = new XDate(firstDateInRange);
  var aDiff = aDate.getTime() - firstDayDate.getTime();
  var bDiff = bDate.getTime() - firstDayDate.getTime();
  var aTotalDays = Math.ceil(aDiff / (1000 * 3600 * 24));
  var bTotalDays = Math.ceil(bDiff / (1000 * 3600 * 24));
  var aWeek = Math.floor(aTotalDays / numberOfDays);
  var bWeek = Math.floor(bTotalDays / numberOfDays);
  return aWeek === bWeek;
}
function sameWeek(a, b, firstDayOfWeek) {
  var weekDates = getWeekDates(a, firstDayOfWeek, 'yyyy-MM-dd');
  var element = weekDates instanceof XDate ? new XDate(b) : b;
  return weekDates == null ? void 0 : weekDates.includes(element);
}
function isPastDate(date) {
  var today = new XDate();
  var d = new XDate(date);
  if (today.getFullYear() > d.getFullYear()) {
    return true;
  }
  if (today.getFullYear() === d.getFullYear()) {
    if (today.getMonth() > d.getMonth()) {
      return true;
    }
    if (today.getMonth() === d.getMonth()) {
      if (today.getDate() > d.getDate()) {
        return true;
      }
    }
  }
  return false;
}
function isToday(date) {
  var d = date instanceof XDate ? date : new XDate(date);
  return sameDate(d, XDate.today());
}
function isGTE(a, b) {
  return b.diffDays(a) > -1;
}
function isLTE(a, b) {
  return a.diffDays(b) > -1;
}
function formatNumbers(date) {
  var numbers = getLocale().numbers;
  return numbers ? date.toString().replace(latinNumbersPattern, function (char) {
    return numbers[+char];
  }) : date;
}
function fromTo(a, b) {
  var days = [];
  var from = +a;
  var to = +b;
  for (; from <= to; from = new XDate(from, true).addDays(1).getTime()) {
    days.push(new XDate(from, true));
  }
  return days;
}
function month(date) {
  var year = date.getFullYear(),
    month = date.getMonth();
  var days = new XDate(year, month + 1, 0).getDate();
  var firstDay = new XDate(year, month, 1, 0, 0, 0, true);
  var lastDay = new XDate(year, month, days, 0, 0, 0, true);
  return fromTo(firstDay, lastDay);
}
function weekDayNames() {
  var firstDayOfWeek = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var weekDaysNames = getLocale().dayNamesShort;
  var dayShift = firstDayOfWeek % 7;
  if (dayShift) {
    weekDaysNames = weekDaysNames.slice(dayShift).concat(weekDaysNames.slice(0, dayShift));
  }
  return weekDaysNames;
}
function page(date) {
  var firstDayOfWeek = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var showSixWeeks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var days = month(date);
  var before = [];
  var after = [];
  var fdow = (7 + firstDayOfWeek) % 7 || 7;
  var ldow = (fdow + 6) % 7;
  firstDayOfWeek = firstDayOfWeek || 0;
  var from = days[0].clone();
  var daysBefore = from.getDay();
  if (from.getDay() !== fdow) {
    from.addDays(-(from.getDay() + 7 - fdow) % 7);
  }
  var to = days[days.length - 1].clone();
  var day = to.getDay();
  if (day !== ldow) {
    to.addDays((ldow + 7 - day) % 7);
  }
  var daysForSixWeeks = (daysBefore + days.length) / 6 >= 6;
  if (showSixWeeks && !daysForSixWeeks) {
    to.addDays(7);
  }
  if (isLTE(from, days[0])) {
    before = fromTo(from, days[0]);
  }
  if (isGTE(to, days[days.length - 1])) {
    after = fromTo(days[days.length - 1], to);
  }
  return before.concat(days.slice(1, days.length - 1), after);
}
function isDateNotInRange(date, minDate, maxDate) {
  return minDate && !isGTE(date, new XDate(minDate)) || maxDate && !isLTE(date, new XDate(maxDate));
}
function getWeekDates(date) {
  var firstDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var format = arguments.length > 2 ? arguments[2] : undefined;
  var d = new XDate(date);
  if (date && d.valid()) {
    var daysArray = [d];
    var dayOfTheWeek = d.getDay() - firstDay;
    if (dayOfTheWeek < 0) {
      dayOfTheWeek = 7 + dayOfTheWeek;
    }
    var newDate = d;
    var index = dayOfTheWeek - 1;
    while (index >= 0) {
      newDate = newDate.clone().addDays(-1);
      daysArray.unshift(newDate);
      index -= 1;
    }
    newDate = d;
    index = dayOfTheWeek + 1;
    while (index < 7) {
      newDate = newDate.clone().addDays(1);
      daysArray.push(newDate);
      index += 1;
    }
    if (format) {
      return daysArray.map(function (d) {
        return d.toString(format);
      });
    }
    return daysArray;
  }
}
function getPartialWeekDates(date) {
  var numberOfDays = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 7;
  var index = 0;
  var partialWeek = [];
  while (index < numberOfDays) {
    partialWeek.push(generateDay(date || new XDate(), index));
    index++;
  }
  return partialWeek;
}
function generateDay(originDate) {
  var daysOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var baseDate = originDate instanceof XDate ? originDate : new XDate(originDate);
  return toMarkingFormat(baseDate.clone().addDays(daysOffset));
}
function getLocale() {
  return XDate.locales[XDate.defaultLocale];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,