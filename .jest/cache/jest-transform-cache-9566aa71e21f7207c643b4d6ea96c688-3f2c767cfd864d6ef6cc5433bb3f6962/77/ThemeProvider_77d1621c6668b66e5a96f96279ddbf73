40b014cbeaa389f8750d9e2e80939fd3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ThemeContext = exports.ThemeConsumer = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireDefault(require("react"));
var _deepmerge = _interopRequireDefault(require("deepmerge"));
var _colors = _interopRequireDefault(require("./colors"));
var _colorsDark = _interopRequireDefault(require("./colorsDark"));
var _jsxRuntime = require("react/jsx-runtime");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var ThemeContext = _react.default.createContext({
  theme: {
    colors: _colors.default
  }
});
exports.ThemeContext = ThemeContext;
var ThemeProvider = function (_React$Component) {
  (0, _inherits2.default)(ThemeProvider, _React$Component);
  var _super = _createSuper(ThemeProvider);
  function ThemeProvider(props) {
    var _this;
    (0, _classCallCheck2.default)(this, ThemeProvider);
    _this = _super.call(this, props);
    _this.updateTheme = function (updates) {
      _this.setState(function (_ref) {
        var theme = _ref.theme;
        return {
          theme: (0, _deepmerge.default)(theme, updates)
        };
      });
    };
    _this.replaceTheme = function (theme) {
      _this.setState(function () {
        return {
          theme: (0, _deepmerge.default)(_this.defaultTheme, theme)
        };
      });
    };
    _this.getTheme = function () {
      return _this.state.theme;
    };
    var defaultColors = props.useDark ? _colorsDark.default : _colors.default;
    _this.defaultTheme = (0, _deepmerge.default)({
      colors: defaultColors
    }, props.theme);
    _this.state = {
      theme: _this.defaultTheme,
      useDark: Boolean(props.useDark)
    };
    return _this;
  }
  (0, _createClass2.default)(ThemeProvider, [{
    key: "render",
    value: function render() {
      return (0, _jsxRuntime.jsx)(ThemeContext.Provider, {
        value: {
          theme: this.state.theme,
          updateTheme: this.updateTheme,
          replaceTheme: this.replaceTheme
        },
        children: this.props.children
      });
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var useDark = props.useDark;
      var isTheme = function isTheme(theme) {
        return !(Object.keys(theme).length === 0 && theme.constructor === Object);
      };
      if (useDark !== state.useDark || isTheme(props.theme) && props.theme !== state.theme) {
        var defaultColors = useDark ? _colorsDark.default : _colors.default;
        return {
          theme: (0, _deepmerge.default)(state.theme, (0, _deepmerge.default)({
            colors: defaultColors
          }, props.theme)),
          useDark: useDark
        };
      }
      return null;
    }
  }]);
  return ThemeProvider;
}(_react.default.Component);
exports.default = ThemeProvider;
ThemeProvider.defaultProps = {
  theme: {},
  useDark: false
};
var ThemeConsumer = ThemeContext.Consumer;
exports.ThemeConsumer = ThemeConsumer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,