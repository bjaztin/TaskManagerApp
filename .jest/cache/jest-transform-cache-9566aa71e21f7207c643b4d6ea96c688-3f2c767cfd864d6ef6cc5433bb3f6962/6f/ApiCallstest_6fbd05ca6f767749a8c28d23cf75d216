21104b4a438e7b1db94141d334cd8f6c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ApiCalls = _interopRequireDefault(require("../../src/utilities/ApiCalls"));
var _jsxRuntime = require("react/jsx-runtime");
describe("ApiCalls component", function () {
  test("Calls the selected Api content correctly", function () {
    var mockSnippet = {
      title: "title",
      thumbnails: {
        maxres: {
          url: "https://example1234.com/thumbnail.jpg"
        }
      },
      resourceId: {
        videoId: "videoId"
      }
    };
    var onVideoSelectMock = jest.fn();
    var onAddToTaskMock = jest.fn();
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ApiCalls.default, {
        snippet: mockSnippet,
        onVideoSelect: onVideoSelectMock,
        onAddToTask: onAddToTaskMock
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    expect(getByText("title")).toBeDefined();
    var addTask = getByTestId("addTask");
    expect(addTask).toBeDefined();
    _reactNative.fireEvent.press(addTask);
    expect(onAddToTaskMock).toHaveBeenCalledWith("title", {
      videoId: "videoId"
    });
    _reactNative.fireEvent.press(getByText("title"));
    expect(onVideoSelectMock).toHaveBeenCalledWith("https://www.youtube.com/watch?v=videoId");
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9BcGlDYWxscyIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJ0ZXN0IiwibW9ja1NuaXBwZXQiLCJ0aXRsZSIsInRodW1ibmFpbHMiLCJtYXhyZXMiLCJ1cmwiLCJyZXNvdXJjZUlkIiwidmlkZW9JZCIsIm9uVmlkZW9TZWxlY3RNb2NrIiwiamVzdCIsImZuIiwib25BZGRUb1Rhc2tNb2NrIiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJzbmlwcGV0Iiwib25WaWRlb1NlbGVjdCIsIm9uQWRkVG9UYXNrIiwiZ2V0QnlUZXh0IiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsImFkZFRhc2siLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIl0sInNvdXJjZXMiOlsiQXBpQ2FsbHMudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IEFwaUNhbGxzIGZyb20gXCIuLi8uLi9zcmMvdXRpbGl0aWVzL0FwaUNhbGxzXCI7XG5cbmRlc2NyaWJlKFwiQXBpQ2FsbHMgY29tcG9uZW50XCIsICgpID0+IHtcbiAgdGVzdChcIkNhbGxzIHRoZSBzZWxlY3RlZCBBcGkgY29udGVudCBjb3JyZWN0bHlcIiwgKCkgPT4ge1xuICAgIFxuICAgIGNvbnN0IG1vY2tTbmlwcGV0ID0ge1xuICAgICAgdGl0bGU6IFwidGl0bGVcIixcbiAgICAgIHRodW1ibmFpbHM6IHtcbiAgICAgICAgbWF4cmVzOiB7XG4gICAgICAgICAgdXJsOiBcImh0dHBzOi8vZXhhbXBsZTEyMzQuY29tL3RodW1ibmFpbC5qcGdcIixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICByZXNvdXJjZUlkOiB7XG4gICAgICAgIHZpZGVvSWQ6IFwidmlkZW9JZFwiLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgY29uc3Qgb25WaWRlb1NlbGVjdE1vY2sgPSBqZXN0LmZuKCk7XG4gICAgY29uc3Qgb25BZGRUb1Rhc2tNb2NrID0gamVzdC5mbigpO1xuXG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8QXBpQ2FsbHNcbiAgICAgICAgc25pcHBldD17bW9ja1NuaXBwZXR9XG4gICAgICAgIG9uVmlkZW9TZWxlY3Q9e29uVmlkZW9TZWxlY3RNb2NrfVxuICAgICAgICBvbkFkZFRvVGFzaz17b25BZGRUb1Rhc2tNb2NrfVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgZXhwZWN0KGdldEJ5VGV4dChcInRpdGxlXCIpKS50b0JlRGVmaW5lZCgpO1xuXG4gICAgY29uc3QgYWRkVGFzayA9IGdldEJ5VGVzdElkKFwiYWRkVGFza1wiKTtcbiAgICBleHBlY3QoYWRkVGFzaykudG9CZURlZmluZWQoKTtcblxuICAgIGZpcmVFdmVudC5wcmVzcyhhZGRUYXNrKTtcblxuICAgIGV4cGVjdChvbkFkZFRvVGFza01vY2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwidGl0bGVcIiwge1xuICAgICAgdmlkZW9JZDogXCJ2aWRlb0lkXCIsXG4gICAgfSk7XG5cbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KFwidGl0bGVcIikpO1xuXG4gICAgZXhwZWN0KG9uVmlkZW9TZWxlY3RNb2NrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj12aWRlb0lkXCJcbiAgICApO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsU0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQW9ELElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUVwREksUUFBUSxDQUFDLG9CQUFvQixFQUFFLFlBQU07RUFDbkNDLElBQUksQ0FBQywwQ0FBMEMsRUFBRSxZQUFNO0lBRXJELElBQU1DLFdBQVcsR0FBRztNQUNsQkMsS0FBSyxFQUFFLE9BQU87TUFDZEMsVUFBVSxFQUFFO1FBQ1ZDLE1BQU0sRUFBRTtVQUNOQyxHQUFHLEVBQUU7UUFDUDtNQUNGLENBQUM7TUFDREMsVUFBVSxFQUFFO1FBQ1ZDLE9BQU8sRUFBRTtNQUNYO0lBQ0YsQ0FBQztJQUVELElBQU1DLGlCQUFpQixHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLElBQU1DLGVBQWUsR0FBR0YsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUVqQyxJQUFBRSxPQUFBLEdBQW1DLElBQUFDLG1CQUFNLEVBQ3ZDLElBQUFmLFdBQUEsQ0FBQWdCLEdBQUEsRUFBQ2pCLFNBQUEsQ0FBQWtCLE9BQVE7UUFDUEMsT0FBTyxFQUFFZixXQUFZO1FBQ3JCZ0IsYUFBYSxFQUFFVCxpQkFBa0I7UUFDakNVLFdBQVcsRUFBRVA7TUFBZ0IsQ0FDOUIsQ0FDSCxDQUFDO01BTk9RLFNBQVMsR0FBQVAsT0FBQSxDQUFUTyxTQUFTO01BQUVDLFdBQVcsR0FBQVIsT0FBQSxDQUFYUSxXQUFXO0lBUTlCQyxNQUFNLENBQUNGLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDRyxXQUFXLENBQUMsQ0FBQztJQUV4QyxJQUFNQyxPQUFPLEdBQUdILFdBQVcsQ0FBQyxTQUFTLENBQUM7SUFDdENDLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDLENBQUNELFdBQVcsQ0FBQyxDQUFDO0lBRTdCRSxzQkFBUyxDQUFDQyxLQUFLLENBQUNGLE9BQU8sQ0FBQztJQUV4QkYsTUFBTSxDQUFDVixlQUFlLENBQUMsQ0FBQ2Usb0JBQW9CLENBQUMsT0FBTyxFQUFFO01BQ3BEbkIsT0FBTyxFQUFFO0lBQ1gsQ0FBQyxDQUFDO0lBRUZpQixzQkFBUyxDQUFDQyxLQUFLLENBQUNOLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVuQ0UsTUFBTSxDQUFDYixpQkFBaUIsQ0FBQyxDQUFDa0Isb0JBQW9CLENBQzVDLHlDQUNGLENBQUM7RUFDSCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==