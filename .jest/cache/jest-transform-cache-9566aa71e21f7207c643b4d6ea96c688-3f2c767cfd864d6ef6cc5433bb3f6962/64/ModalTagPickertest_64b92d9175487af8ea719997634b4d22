2b25106f1f5d33de61e2b8d7b9d4cb39
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ModalTagPicker = _interopRequireDefault(require("../../src/utilities/ModalTagPicker"));
var _jsxRuntime = require("react/jsx-runtime");
describe("ModalTagPicker", function () {
  test("Renders ModalTagPicker correctly", function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModalTagPicker.default, {})),
      getByTestId = _render.getByTestId;
    expect(getByTestId("modal")).toBeDefined();
    expect(getByTestId("labelTag_0")).toBeDefined();
    expect(getByTestId("labelTag_1")).toBeDefined();
    expect(getByTestId("labelTag_2")).toBeDefined();
    expect(getByTestId("labelTag_3")).toBeDefined();
  });
  test("calls the appropriate callback when an option is selected", function () {
    var onTagSelected = jest.fn();
    var changeTagPickerModal = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModalTagPicker.default, {
        onTagSelected: onTagSelected,
        changeTagPickerModal: changeTagPickerModal
      })),
      getByText = _render2.getByText,
      getByTestId = _render2.getByTestId;
    _reactNative.fireEvent.press(getByTestId("labelTag_0"));
    _reactNative.fireEvent.press(getByTestId("labelTag_1"));
    _reactNative.fireEvent.press(getByTestId("labelTag_2"));
    _reactNative.fireEvent.press(getByTestId("labelTag_3"));
    expect(onTagSelected).toHaveBeenCalledWith("Red Tag");
    expect(onTagSelected).toHaveBeenCalledWith("Orange Tag");
    expect(onTagSelected).toHaveBeenCalledWith("Green Tag");
    expect(onTagSelected).toHaveBeenCalledWith("label-outline");
    expect(changeTagPickerModal).toHaveBeenCalledWith(false);
  });
  test("modal becomes visible when component is rendered", function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModalTagPicker.default, {})),
      getByTestId = _render3.getByTestId;
    var modal = getByTestId("modal");
    expect(modal).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Nb2RhbFRhZ1BpY2tlciIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwib25UYWdTZWxlY3RlZCIsImplc3QiLCJmbiIsImNoYW5nZVRhZ1BpY2tlck1vZGFsIiwiX3JlbmRlcjIiLCJnZXRCeVRleHQiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiX3JlbmRlcjMiLCJtb2RhbCJdLCJzb3VyY2VzIjpbIk1vZGFsVGFnUGlja2VyLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBNb2RhbFRhZ1BpY2tlciBmcm9tIFwiLi4vLi4vc3JjL3V0aWxpdGllcy9Nb2RhbFRhZ1BpY2tlclwiO1xuXG5kZXNjcmliZShcIk1vZGFsVGFnUGlja2VyXCIsICgpID0+IHtcbiAgdGVzdChcIlJlbmRlcnMgTW9kYWxUYWdQaWNrZXIgY29ycmVjdGx5XCIsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPE1vZGFsVGFnUGlja2VyIC8+KTtcblxuICAgIGV4cGVjdChnZXRCeVRlc3RJZChcIm1vZGFsXCIpKS50b0JlRGVmaW5lZCgpO1xuXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKFwibGFiZWxUYWdfMFwiKSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoXCJsYWJlbFRhZ18xXCIpKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChnZXRCeVRlc3RJZChcImxhYmVsVGFnXzJcIikpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKFwibGFiZWxUYWdfM1wiKSkudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgdGVzdChcImNhbGxzIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFjayB3aGVuIGFuIG9wdGlvbiBpcyBzZWxlY3RlZFwiLCAoKSA9PiB7XG4gICAgY29uc3Qgb25UYWdTZWxlY3RlZCA9IGplc3QuZm4oKTtcbiAgICBjb25zdCBjaGFuZ2VUYWdQaWNrZXJNb2RhbCA9IGplc3QuZm4oKTtcblxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPE1vZGFsVGFnUGlja2VyXG4gICAgICAgIG9uVGFnU2VsZWN0ZWQ9e29uVGFnU2VsZWN0ZWR9XG4gICAgICAgIGNoYW5nZVRhZ1BpY2tlck1vZGFsPXtjaGFuZ2VUYWdQaWNrZXJNb2RhbH1cbiAgICAgIC8+XG4gICAgKTtcblxuICAgIC8vU2ltdWxhdGUgdGhlIHRhZ3NcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoXCJsYWJlbFRhZ18wXCIpKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoXCJsYWJlbFRhZ18xXCIpKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoXCJsYWJlbFRhZ18yXCIpKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoXCJsYWJlbFRhZ18zXCIpKTsgICAgIFxuXG4gICAgZXhwZWN0KG9uVGFnU2VsZWN0ZWQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwiUmVkIFRhZ1wiKTtcbiAgICBleHBlY3Qob25UYWdTZWxlY3RlZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXCJPcmFuZ2UgVGFnXCIpO1xuICAgIGV4cGVjdChvblRhZ1NlbGVjdGVkKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcIkdyZWVuIFRhZ1wiKTtcbiAgICBleHBlY3Qob25UYWdTZWxlY3RlZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXCJsYWJlbC1vdXRsaW5lXCIpO1xuXG4gICAgZXhwZWN0KGNoYW5nZVRhZ1BpY2tlck1vZGFsKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChmYWxzZSk7XG4gIH0pO1xuXG4gIHRlc3QoXCJtb2RhbCBiZWNvbWVzIHZpc2libGUgd2hlbiBjb21wb25lbnQgaXMgcmVuZGVyZWRcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8TW9kYWxUYWdQaWNrZXIgLz4pO1xuICAgIGNvbnN0IG1vZGFsID0gZ2V0QnlUZXN0SWQoXCJtb2RhbFwiKTtcbiAgICBleHBlY3QobW9kYWwpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxlQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBZ0UsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBRWhFSSxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBTTtFQUMvQkMsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLFlBQU07SUFDN0MsSUFBQUMsT0FBQSxHQUF3QixJQUFBQyxtQkFBTSxFQUFDLElBQUFKLFdBQUEsQ0FBQUssR0FBQSxFQUFDTixlQUFBLENBQUFPLE9BQWMsSUFBRSxDQUFDLENBQUM7TUFBMUNDLFdBQVcsR0FBQUosT0FBQSxDQUFYSSxXQUFXO0lBRW5CQyxNQUFNLENBQUNELFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDRSxXQUFXLENBQUMsQ0FBQztJQUUxQ0QsTUFBTSxDQUFDRCxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQ0UsV0FBVyxDQUFDLENBQUM7SUFDL0NELE1BQU0sQ0FBQ0QsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUNFLFdBQVcsQ0FBQyxDQUFDO0lBQy9DRCxNQUFNLENBQUNELFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDRSxXQUFXLENBQUMsQ0FBQztJQUMvQ0QsTUFBTSxDQUFDRCxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQ0UsV0FBVyxDQUFDLENBQUM7RUFDakQsQ0FBQyxDQUFDO0VBRUZQLElBQUksQ0FBQywyREFBMkQsRUFBRSxZQUFNO0lBQ3RFLElBQU1RLGFBQWEsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUMvQixJQUFNQyxvQkFBb0IsR0FBR0YsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUV0QyxJQUFBRSxRQUFBLEdBQW1DLElBQUFWLG1CQUFNLEVBQ3ZDLElBQUFKLFdBQUEsQ0FBQUssR0FBQSxFQUFDTixlQUFBLENBQUFPLE9BQWM7UUFDYkksYUFBYSxFQUFFQSxhQUFjO1FBQzdCRyxvQkFBb0IsRUFBRUE7TUFBcUIsQ0FDNUMsQ0FDSCxDQUFDO01BTE9FLFNBQVMsR0FBQUQsUUFBQSxDQUFUQyxTQUFTO01BQUVSLFdBQVcsR0FBQU8sUUFBQSxDQUFYUCxXQUFXO0lBUTlCUyxzQkFBUyxDQUFDQyxLQUFLLENBQUNWLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMxQ1Msc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDVixXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDMUNTLHNCQUFTLENBQUNDLEtBQUssQ0FBQ1YsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzFDUyxzQkFBUyxDQUFDQyxLQUFLLENBQUNWLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUUxQ0MsTUFBTSxDQUFDRSxhQUFhLENBQUMsQ0FBQ1Esb0JBQW9CLENBQUMsU0FBUyxDQUFDO0lBQ3JEVixNQUFNLENBQUNFLGFBQWEsQ0FBQyxDQUFDUSxvQkFBb0IsQ0FBQyxZQUFZLENBQUM7SUFDeERWLE1BQU0sQ0FBQ0UsYUFBYSxDQUFDLENBQUNRLG9CQUFvQixDQUFDLFdBQVcsQ0FBQztJQUN2RFYsTUFBTSxDQUFDRSxhQUFhLENBQUMsQ0FBQ1Esb0JBQW9CLENBQUMsZUFBZSxDQUFDO0lBRTNEVixNQUFNLENBQUNLLG9CQUFvQixDQUFDLENBQUNLLG9CQUFvQixDQUFDLEtBQUssQ0FBQztFQUMxRCxDQUFDLENBQUM7RUFFRmhCLElBQUksQ0FBQyxrREFBa0QsRUFBRSxZQUFNO0lBQzdELElBQUFpQixRQUFBLEdBQXdCLElBQUFmLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLGVBQUEsQ0FBQU8sT0FBYyxJQUFFLENBQUMsQ0FBQztNQUExQ0MsV0FBVyxHQUFBWSxRQUFBLENBQVhaLFdBQVc7SUFDbkIsSUFBTWEsS0FBSyxHQUFHYixXQUFXLENBQUMsT0FBTyxDQUFDO0lBQ2xDQyxNQUFNLENBQUNZLEtBQUssQ0FBQyxDQUFDWCxXQUFXLENBQUMsQ0FBQztFQUM3QixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==