d96e1cf7fe35dda03291acff6a46dc42
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _isUndefined = _interopRequireDefault(require("lodash/isUndefined"));
var _debounce = _interopRequireDefault(require("lodash/debounce"));
var _infiniteList = _interopRequireDefault(require("../infinite-list"));
var _xdate = _interopRequireDefault(require("xdate"));
var _react = _interopRequireWildcard(require("react"));
var _hooks = require("../hooks");
var _momentResolver = require("../momentResolver");
var _dateutils = require("../dateutils");
var _services = require("../services");
var _commons = require("./commons");
var _style = _interopRequireDefault(require("./style"));
var _Context = _interopRequireDefault(require("./Context"));
var _constants = _interopRequireDefault(require("../commons/constants"));
var _interface = require("../interface");
var _LayoutProvider = require("recyclerlistview/dist/reactnative/core/dependencies/LayoutProvider");
var _agendaList = require("./agendaList");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var InfiniteAgendaList = function InfiniteAgendaList(props) {
  var _sections$, _infiniteListProps$vi;
  var theme = props.theme,
    sections = props.sections,
    scrollToNextEvent = props.scrollToNextEvent,
    avoidDateUpdates = props.avoidDateUpdates,
    onScroll = props.onScroll,
    renderSectionHeader = props.renderSectionHeader,
    sectionStyle = props.sectionStyle,
    dayFormatter = props.dayFormatter,
    _props$dayFormat = props.dayFormat,
    dayFormat = _props$dayFormat === void 0 ? 'dddd, MMM d' : _props$dayFormat,
    useMoment = props.useMoment,
    _props$markToday = props.markToday,
    markToday = _props$markToday === void 0 ? true : _props$markToday,
    infiniteListProps = props.infiniteListProps,
    renderItem = props.renderItem,
    onEndReached = props.onEndReached,
    onEndReachedThreshold = props.onEndReachedThreshold,
    refreshControl = props.refreshControl;
  var _useContext = (0, _react.useContext)(_Context.default),
    date = _useContext.date,
    updateSource = _useContext.updateSource,
    setDate = _useContext.setDate;
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var list = (0, _react.useRef)();
  var _topSection = (0, _react.useRef)((_sections$ = sections[0]) == null ? void 0 : _sections$.title);
  var didScroll = (0, _react.useRef)(false);
  var sectionScroll = (0, _react.useRef)(false);
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    data = _useState2[0],
    setData = _useState2[1];
  (0, _react.useEffect)(function () {
    var items = sections.reduce(function (acc, cur) {
      return [].concat((0, _toConsumableArray2.default)(acc), [{
        title: cur.title,
        isTitle: true
      }], (0, _toConsumableArray2.default)(cur.data));
    }, []);
    setData(items);
    if (date !== _topSection.current) {
      setTimeout(function () {
        scrollToSection(date);
      }, 500);
    }
  }, [sections]);
  (0, _hooks.useDidUpdate)(function () {
    if (updateSource !== _commons.UpdateSources.LIST_DRAG && updateSource !== _commons.UpdateSources.CALENDAR_INIT) {
      scrollToSection(date);
    }
  }, [date]);
  var getSectionIndex = function getSectionIndex(date) {
    var dataIndex = 0;
    for (var i = 0; i < sections.length; i++) {
      if (sections[i].title === date) {
        return dataIndex;
      }
      dataIndex += sections[i].data.length + 1;
    }
  };
  var getNextSectionIndex = function getNextSectionIndex(date) {
    var cur = new _xdate.default(date);
    var dataIndex = 0;
    for (var i = 0; i < sections.length; i++) {
      var titleDate = (0, _interface.parseDate)(sections[i].title);
      if ((0, _dateutils.isGTE)(titleDate, cur)) {
        return dataIndex;
      }
      dataIndex += sections[i].data.length + 1;
    }
  };
  var getSectionTitle = (0, _react.useCallback)(function (title) {
    if (!title) return;
    var sectionTitle = title;
    if (dayFormatter) {
      sectionTitle = dayFormatter(title);
    } else if (dayFormat) {
      if (useMoment) {
        var moment = (0, _momentResolver.getMoment)();
        sectionTitle = moment(title).format(dayFormat);
      } else {
        sectionTitle = new _xdate.default(title).toString(dayFormat);
      }
    }
    if (markToday) {
      var string = (0, _services.getDefaultLocale)().today || _commons.todayString;
      var today = (0, _dateutils.isToday)(title);
      sectionTitle = today ? `${string}, ${sectionTitle}` : sectionTitle;
    }
    return sectionTitle;
  }, []);
  var scrollToSection = (0, _react.useCallback)((0, _debounce.default)(function (d) {
    var sectionIndex = scrollToNextEvent ? getNextSectionIndex(d) : getSectionIndex(d);
    if ((0, _isUndefined.default)(sectionIndex)) {
      return;
    }
    if (list != null && list.current && sectionIndex !== undefined) {
      var _sections$findItemTit, _list$current;
      sectionScroll.current = true;
      _topSection.current = (_sections$findItemTit = sections[findItemTitleIndex(sectionIndex)]) == null ? void 0 : _sections$findItemTit.title;
      (_list$current = list.current) == null ? void 0 : _list$current.scrollToIndex(sectionIndex, true);
    }
  }, 1000, {
    leading: false,
    trailing: true
  }), [sections]);
  var layoutProvider = (0, _react.useMemo)(function () {
    return new _LayoutProvider.LayoutProvider(function (index) {
      var _data$index;
      return (_data$index = data[index]) != null && _data$index.isTitle ? 'title' : 'page';
    }, function (type, dim) {
      var _infiniteListProps$ti, _infiniteListProps$it;
      dim.width = _constants.default.screenWidth;
      dim.height = type === 'title' ? (_infiniteListProps$ti = infiniteListProps == null ? void 0 : infiniteListProps.titleHeight) != null ? _infiniteListProps$ti : 60 : (_infiniteListProps$it = infiniteListProps == null ? void 0 : infiniteListProps.itemHeight) != null ? _infiniteListProps$it : 80;
    });
  }, [data]);
  var _onScroll = (0, _react.useCallback)(function (rawEvent) {
    if (!didScroll.current) {
      didScroll.current = true;
      scrollToSection.cancel();
    }
    var event = {
      nativeEvent: {
        contentOffset: rawEvent.nativeEvent.contentOffset,
        layoutMeasurement: rawEvent.nativeEvent.layoutMeasurement,
        contentSize: rawEvent.nativeEvent.contentSize
      }
    };
    onScroll == null ? void 0 : onScroll(event);
  }, [onScroll]);
  var _onVisibleIndicesChanged = (0, _react.useCallback)((0, _debounce.default)(function (all) {
    if (all && all.length && !sectionScroll.current) {
      var topItemIndex = all[0];
      var topSection = data[findItemTitleIndex(topItemIndex)];
      if (topSection && topSection !== _topSection.current) {
        _topSection.current = topSection.title;
        if (didScroll.current && !avoidDateUpdates) {
          setDate == null ? void 0 : setDate(topSection.title, _commons.UpdateSources.LIST_DRAG);
        }
      }
    }
  }, (_infiniteListProps$vi = infiniteListProps == null ? void 0 : infiniteListProps.visibleIndicesChangedDebounce) != null ? _infiniteListProps$vi : 1000, {
    leading: false,
    trailing: true
  }), [avoidDateUpdates, setDate, data]);
  var findItemTitleIndex = (0, _react.useCallback)(function (itemIndex) {
    var titleIndex = itemIndex;
    while (titleIndex > 0 && !((_data$titleIndex = data[titleIndex]) != null && _data$titleIndex.isTitle)) {
      var _data$titleIndex;
      titleIndex--;
    }
    return titleIndex;
  }, [data]);
  var _onMomentumScrollEnd = (0, _react.useCallback)(function () {
    sectionScroll.current = false;
  }, []);
  var headerTextStyle = (0, _react.useMemo)(function () {
    return [style.current.sectionText, sectionStyle];
  }, [sectionStyle]);
  var _renderSectionHeader = (0, _react.useCallback)(function (info) {
    var _info$section;
    var title = info == null ? void 0 : (_info$section = info.section) == null ? void 0 : _info$section.title;
    if (renderSectionHeader) {
      return renderSectionHeader(title);
    }
    var headerTitle = getSectionTitle(title);
    return (0, _jsxRuntime.jsx)(_agendaList.AgendaSectionHeader, {
      title: headerTitle,
      style: headerTextStyle
    });
  }, [headerTextStyle]);
  var _renderItem = (0, _react.useCallback)(function (_type, item) {
    if (item != null && item.isTitle) {
      return _renderSectionHeader({
        section: item
      });
    }
    if (renderItem) {
      return renderItem({
        item: item
      });
    }
    return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
  }, [renderItem]);
  var _onEndReached = (0, _react.useCallback)(function () {
    if (onEndReached) {
      onEndReached({
        distanceFromEnd: 0
      });
    }
  }, [onEndReached]);
  return (0, _jsxRuntime.jsx)(_infiniteList.default, {
    ref: list,
    renderItem: _renderItem,
    data: data,
    style: infiniteListProps == null ? void 0 : infiniteListProps.style,
    layoutProvider: layoutProvider,
    onScroll: _onScroll,
    onVisibleIndicesChanged: _onVisibleIndicesChanged,
    scrollViewProps: {
      onMomentumScrollEnd: _onMomentumScrollEnd,
      nestedScrollEnabled: true,
      refreshControl: refreshControl
    },
    onEndReached: _onEndReached,
    onEndReachedThreshold: onEndReachedThreshold,
    disableScrollOnDataChange: true,
    renderFooter: infiniteListProps == null ? void 0 : infiniteListProps.renderFooter
  });
};
var _default = InfiniteAgendaList;
exports.default = _default;
InfiniteAgendaList.displayName = 'InfiniteAgendaList';
InfiniteAgendaList.propTypes = {
  dayFormat: _propTypes.default.string,
  dayFormatter: _propTypes.default.func,
  useMoment: _propTypes.default.bool,
  markToday: _propTypes.default.bool,
  sectionStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number, _propTypes.default.array]),
  avoidDateUpdates: _propTypes.default.bool
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,