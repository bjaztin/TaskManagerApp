7948bc3fa78b5b887b34b96324176ab8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CustomGreeting = _interopRequireDefault(require("../../../src/components/TaskScreenFeatures/CustomGreeting"));
var _jsxRuntime = require("react/jsx-runtime");
describe("CustomGreeting component", function () {
  test('Greet "Good Morning!" when it is morning', function () {
    var morningTime = new Date(2023, 0, 1, 10, 0, 0);
    var date = jest.spyOn(global, "Date").mockImplementation(function () {
      return morningTime;
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CustomGreeting.default, {})),
      getByText = _render.getByText;
    var text = getByText(/Good Morning/);
    expect(text).toBeDefined();
    date.mockRestore();
  });
  test('Greet "Good Afternoon!" when it is afternoon', function () {
    var afternoonTime = new Date(2023, 0, 1, 15, 0, 0);
    var date = jest.spyOn(global, "Date").mockImplementation(function () {
      return afternoonTime;
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CustomGreeting.default, {})),
      getByText = _render2.getByText;
    var text = getByText(/Good Afternoon/);
    expect(text).toBeDefined();
    date.mockRestore();
  });
  test('Greet "Good Evening!" when it is evening', function () {
    var eveningTime = new Date(2023, 0, 1, 19, 0, 0);
    var date = jest.spyOn(global, "Date").mockImplementation(function () {
      return eveningTime;
    });
    ``;
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CustomGreeting.default, {})),
      getByText = _render3.getByText;
    var text = getByText(/Good Evening/);
    expect(text).toBeDefined();
    date.mockRestore();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9DdXN0b21HcmVldGluZyIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJ0ZXN0IiwibW9ybmluZ1RpbWUiLCJEYXRlIiwiZGF0ZSIsImplc3QiLCJzcHlPbiIsImdsb2JhbCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiZ2V0QnlUZXh0IiwidGV4dCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwibW9ja1Jlc3RvcmUiLCJhZnRlcm5vb25UaW1lIiwiX3JlbmRlcjIiLCJldmVuaW5nVGltZSIsIl9yZW5kZXIzIl0sInNvdXJjZXMiOlsiQ3VzdG9tR3JlZXRpbmcudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBDdXN0b21HcmVldGluZyBmcm9tIFwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVGFza1NjcmVlbkZlYXR1cmVzL0N1c3RvbUdyZWV0aW5nXCI7XG5cbmRlc2NyaWJlKFwiQ3VzdG9tR3JlZXRpbmcgY29tcG9uZW50XCIsICgpID0+IHtcbiAgdGVzdCgnR3JlZXQgXCJHb29kIE1vcm5pbmchXCIgd2hlbiBpdCBpcyBtb3JuaW5nJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vcm5pbmdUaW1lID0gbmV3IERhdGUoMjAyMywgMCwgMSwgMTAsIDAsIDApOyBcbiAgICBjb25zdCBkYXRlID0gamVzdFxuICAgICAgLnNweU9uKGdsb2JhbCwgXCJEYXRlXCIpXG4gICAgICAubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IG1vcm5pbmdUaW1lKTtcblxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPEN1c3RvbUdyZWV0aW5nIC8+KTtcbiAgICBjb25zdCB0ZXh0ID0gZ2V0QnlUZXh0KC9Hb29kIE1vcm5pbmcvKTtcblxuICAgIGV4cGVjdCh0ZXh0KS50b0JlRGVmaW5lZCgpO1xuXG4gICAgZGF0ZS5tb2NrUmVzdG9yZSgpO1xuICB9KTtcblxuICB0ZXN0KCdHcmVldCBcIkdvb2QgQWZ0ZXJub29uIVwiIHdoZW4gaXQgaXMgYWZ0ZXJub29uJywgKCkgPT4ge1xuICAgIGNvbnN0IGFmdGVybm9vblRpbWUgPSBuZXcgRGF0ZSgyMDIzLCAwLCAxLCAxNSwgMCwgMCk7IFxuICAgIGNvbnN0IGRhdGUgPSBqZXN0XG4gICAgICAuc3B5T24oZ2xvYmFsLCBcIkRhdGVcIilcbiAgICAgIC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gYWZ0ZXJub29uVGltZSk7XG5cbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxDdXN0b21HcmVldGluZyAvPik7XG4gICAgY29uc3QgdGV4dCA9IGdldEJ5VGV4dCgvR29vZCBBZnRlcm5vb24vKTtcblxuICAgIGV4cGVjdCh0ZXh0KS50b0JlRGVmaW5lZCgpO1xuXG4gICAgZGF0ZS5tb2NrUmVzdG9yZSgpO1xuICB9KTtcblxuICB0ZXN0KCdHcmVldCBcIkdvb2QgRXZlbmluZyFcIiB3aGVuIGl0IGlzIGV2ZW5pbmcnLCAoKSA9PiB7XG4gICAgY29uc3QgZXZlbmluZ1RpbWUgPSBuZXcgRGF0ZSgyMDIzLCAwLCAxLCAxOSwgMCwgMCk7IFxuICAgIGNvbnN0IGRhdGUgPSBqZXN0XG4gICAgICAuc3B5T24oZ2xvYmFsLCBcIkRhdGVcIilcbiAgICAgIC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gZXZlbmluZ1RpbWUpO1xuICAgIGBgO1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPEN1c3RvbUdyZWV0aW5nIC8+KTtcbiAgICBjb25zdCB0ZXh0ID0gZ2V0QnlUZXh0KC9Hb29kIEV2ZW5pbmcvKTtcblxuICAgIGV4cGVjdCh0ZXh0KS50b0JlRGVmaW5lZCgpO1xu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