e9cd31ac30e4b483c9802f349d9537b0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Keyframe = void 0;
var _defineProperty3 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Easing = require("../../Easing");
var _animation = require("../../animation");
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var _worklet_14694207878983_init_data = {
  code: "function anonymous(_targetValues) {\n  const {\n    keyframes,\n    delayFunction,\n    delay,\n    withTiming,\n    Easing,\n    withSequence,\n    _this,\n    initialValues,\n    callback\n  } = this._closure;\n  const animations = {};\n  const addAnimation = function (key) {\n    const keyframePoints = keyframes[key];\n    if (keyframePoints.length === 0) return;\n    const animation = delayFunction(delay, keyframePoints.length === 1 ? withTiming(keyframePoints[0].value, {\n      duration: keyframePoints[0].duration,\n      easing: keyframePoints[0].easing ? keyframePoints[0].easing : Easing.linear\n    }) : withSequence.apply(_this, keyframePoints.map(function (keyframePoint) {\n      return withTiming(keyframePoint.value, {\n        duration: keyframePoint.duration,\n        easing: keyframePoint.easing ? keyframePoint.easing : Easing.linear\n      });\n    })));\n    if (key.includes('transform')) {\n      var _animations$transform;\n      if (!('transform' in animations)) {\n        animations.transform = [];\n      }\n      (_animations$transform = animations.transform) === null || _animations$transform === void 0 ? void 0 : _animations$transform.push({\n        [key.split(':')[1]]: animation\n      });\n    } else {\n      animations[key] = animation;\n    }\n  };\n  Object.keys(initialValues).forEach(function (key) {\n    if (key.includes('transform')) {\n      initialValues[key].forEach(function (transformProp, index) {\n        Object.keys(transformProp).forEach(function (transformPropKey) {\n          addAnimation(index.toString() + '_transform:' + transformPropKey);\n        });\n      });\n    } else {\n      addAnimation(key);\n    }\n  });\n  return {\n    animations: animations,\n    initialValues: initialValues,\n    callback: callback\n  };\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/layoutReanimation/animationBuilder/Keyframe.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"_targetValues\",\"keyframes\",\"delayFunction\",\"delay\",\"withTiming\",\"Easing\",\"withSequence\",\"_this\",\"initialValues\",\"callback\",\"_closure\",\"animations\",\"addAnimation\",\"key\",\"keyframePoints\",\"length\",\"animation\",\"value\",\"duration\",\"easing\",\"linear\",\"apply\",\"map\",\"keyframePoint\",\"includes\",\"_animations$transform\",\"transform\",\"push\",\"split\",\"Object\",\"keys\",\"forEach\",\"transformProp\",\"index\",\"transformPropKey\",\"toString\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/layoutReanimation/animationBuilder/Keyframe.js\"],\"mappings\":\"AAuBa,SAAAA,UAAAC,aAAiB;EAAA;IAAAC,SAAA;IAAAC,aAAA;IAAAC,KAAA;IAAAC,UAAA;IAAAC,MAAA;IAAAC,YAAA;IAAAC,KAAA;IAAAC,aAAA;IAAAC;EAAA,SAAAC,QAAA;EAGtB,MAAMC,UAAU,GAAG,CAAC,CAAC;EAMrB,MAAMC,YAAY,GAAG,SAAAA,CAAAC,GAAG,EAAI;IAC1B,MAAMC,cAAc,GAAGb,SAAS,CAACY,GAAG,CAAC;IAErC,IAAIC,cAAc,CAACC,MAAM,KAAK,CAAC,EAAE;IACjC,MAAMC,SAAS,GAAGd,aAAa,CAACC,KAAK,EAAEW,cAAc,CAACC,MAAM,KAAK,CAAC,GAAGX,UAAU,CAACU,cAAc,CAAC,CAAC,CAAC,CAACG,KAAK,EAAE;MACvGC,QAAQ,EAAEJ,cAAc,CAAC,CAAC,CAAC,CAACI,QAAQ;MACpCC,MAAM,EAAEL,cAAc,CAAC,CAAC,CAAC,CAACK,MAAM,GAAGL,cAAc,CAAC,CAAC,CAAC,CAACK,MAAM,GAAGd,MAAM,CAACe;IACvE,CAAC,CAAC,GAAGd,YAAY,CAACe,KAAK,CAACd,KAAI,EAAEO,cAAc,CAACQ,GAAG,CAAC,UAAAC,aAAa;MAAA,OAAInB,UAAU,CAACmB,aAAa,CAACN,KAAK,EAAE;QAChGC,QAAQ,EAAEK,aAAa,CAACL,QAAQ;QAChCC,MAAM,EAAEI,aAAa,CAACJ,MAAM,GAAGI,aAAa,CAACJ,MAAM,GAAGd,MAAM,CAACe;MAC/D,CAAC,CAAC;IAAA,EAAC,CAAC,CAAC;IACL,IAAIP,GAAG,CAACW,QAAQ,CAAC,WAAW,CAAC,EAAE;MAC7B,IAAIC,qBAAqB;MACzB,IAAI,EAAE,WAAW,IAAId,UAAU,CAAC,EAAE;QAChCA,UAAU,CAACe,SAAS,GAAG,EAAE;MAC3B;MACA,CAACD,qBAAqB,GAAGd,UAAU,CAACe,SAAS,MAAM,IAAI,IAAID,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACE,IAAI,CAAC;QAChI,CAACd,GAAG,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGZ;MACvB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLL,UAAU,CAACE,GAAG,CAAC,GAAGG,SAAS;IAC7B;EACF,CAAC;EACDa,MAAM,CAACC,IAAI,CAACtB,aAAa,CAAC,CAACuB,OAAO,CAAC,UAAAlB,GAAG,EAAI;IACxC,IAAIA,GAAG,CAACW,QAAQ,CAAC,WAAW,CAAC,EAAE;MAC7BhB,aAAa,CAACK,GAAG,CAAC,CAACkB,OAAO,CAAC,UAACC,aAAa,EAAEC,KAAK,EAAK;QACnDJ,MAAM,CAACC,IAAI,CAACE,aAAa,CAAC,CAACD,OAAO,CAAC,UAAAG,gBAAgB,EAAI;UACrDtB,YAAY,CAACqB,KAAK,CAACE,QAAQ,CAAC,CAAC,GAAG,aAAa,GAAGD,gBAAgB,CAAC;QACnE,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,MAAM;MACLtB,YAAY,CAACC,GAAG,CAAC;IACnB;EACF,CAAC,CAAC;EACF,OAAO;IACLF,UAAU,EAAEA,UAAU;IACtBH,aAAa,EAAEA,aAAa;IAC5BC,QAAQ,EAAEA;EACZ,CAAC;AACH\"}"
};
var _worklet_3737494808179_init_data = {
  code: "function anonymous(_, animation) {\n  return animation;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/layoutReanimation/animationBuilder/Keyframe.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"_\",\"animation\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/layoutReanimation/animationBuilder/Keyframe.js\"],\"mappings\":\"AAiM+B,SAACA,SAAGA,CAAAC,CAAA,EAAAC,SAAc;EAG3C,OAAOA,SAAS;AAClB\"}"
};
var Keyframe = function () {
  function Keyframe(definitions) {
    var _this = this;
    (0, _classCallCheck2.default)(this, Keyframe);
    _defineProperty(this, "durationV", void 0);
    _defineProperty(this, "delayV", void 0);
    _defineProperty(this, "callbackV", void 0);
    _defineProperty(this, "definitions", void 0);
    _defineProperty(this, "build", function () {
      var delay = _this.delayV;
      var delayFunction = _this.getDelayFunction();
      var _this$parseDefinition = _this.parseDefinitions(),
        keyframes = _this$parseDefinition.keyframes,
        initialValues = _this$parseDefinition.initialValues;
      var callback = _this.callbackV;
      return function () {
        var _e = [new global.Error(), -10, -27];
        var _f = function _f(_targetValues) {
          var animations = {};
          var addAnimation = function addAnimation(key) {
            var keyframePoints = keyframes[key];
            if (keyframePoints.length === 0) return;
            var animation = delayFunction(delay, keyframePoints.length === 1 ? (0, _animation.withTiming)(keyframePoints[0].value, {
              duration: keyframePoints[0].duration,
              easing: keyframePoints[0].easing ? keyframePoints[0].easing : _Easing.Easing.linear
            }) : _animation.withSequence.apply(_this, keyframePoints.map(function (keyframePoint) {
              return (0, _animation.withTiming)(keyframePoint.value, {
                duration: keyframePoint.duration,
                easing: keyframePoint.easing ? keyframePoint.easing : _Easing.Easing.linear
              });
            })));
            if (key.includes('transform')) {
              var _animations$transform;
              if (!('transform' in animations)) {
                animations.transform = [];
              }
              (_animations$transform = animations.transform) === null || _animations$transform === void 0 ? void 0 : _animations$transform.push((0, _defineProperty3.default)({}, key.split(':')[1], animation));
            } else {
              animations[key] = animation;
            }
          };
          Object.keys(initialValues).forEach(function (key) {
            if (key.includes('transform')) {
              initialValues[key].forEach(function (transformProp, index) {
                Object.keys(transformProp).forEach(function (transformPropKey) {
                  addAnimation(index.toString() + '_transform:' + transformPropKey);
                });
              });
            } else {
              addAnimation(key);
            }
          });
          return {
            animations: animations,
            initialValues: initialValues,
            callback: callback
          };
        };
        _f._closure = {
          keyframes: keyframes,
          delayFunction: delayFunction,
          delay: delay,
          withTiming: _animation.withTiming,
          Easing: _Easing.Easing,
          withSequence: _animation.withSequence,
          _this: _this,
          initialValues: initialValues,
          callback: callback
        };
        _f.__initData = _worklet_14694207878983_init_data;
        _f.__workletHash = 14694207878983;
        _f.__stackDetails = _e;
        _f.__version = "3.3.0";
        return _f;
      }();
    });
    this.definitions = definitions;
  }
  (0, _createClass2.default)(Keyframe, [{
    key: "parseDefinitions",
    value: function parseDefinitions() {
      var _this2 = this;
      var parsedKeyframes = {};
      if (this.definitions.from) {
        if (this.definitions['0']) {
          throw Error("You cannot provide both keyframe 0 and 'from' as they both specified initial values");
        }
        this.definitions['0'] = this.definitions.from;
        delete this.definitions.from;
      }
      if (this.definitions.to) {
        if (this.definitions['100']) {
          throw Error("You cannot provide both keyframe 100 and 'to' as they both specified values at the end of the animation.");
        }
        this.definitions['100'] = this.definitions.to;
        delete this.definitions.to;
      }
      if (!this.definitions['0']) {
        throw Error("Please provide 0, or 'from' keyframe with initial state of your object.");
      }
      var initialValues = this.definitions['0'];
      Object.keys(initialValues).forEach(function (styleProp) {
        if (styleProp === 'transform') {
          var _initialValues$styleP;
          (_initialValues$styleP = initialValues[styleProp]) === null || _initialValues$styleP === void 0 ? void 0 : _initialValues$styleP.forEach(function (transformStyle, index) {
            Object.keys(transformStyle).forEach(function (transformProp) {
              parsedKeyframes[index.toString() + '_transform:' + transformProp] = [];
            });
          });
        } else {
          parsedKeyframes[styleProp] = [];
        }
      });
      var duration = this.durationV ? this.durationV : 500;
      var animationKeyPoints = Array.from(Object.keys(this.definitions));
      var getAnimationDuration = function getAnimationDuration(key, currentKeyPoint) {
        var maxDuration = currentKeyPoint / 100 * duration;
        var currentDuration = parsedKeyframes[key].reduce(function (acc, value) {
          return acc + value.duration;
        }, 0);
        return maxDuration - currentDuration;
      };
      var addKeyPoint = function addKeyPoint(_ref) {
        var key = _ref.key,
          value = _ref.value,
          currentKeyPoint = _ref.currentKeyPoint,
          easing = _ref.easing;
        if (!(key in parsedKeyframes)) {
          throw Error("Keyframe can contain only that set of properties that were provide with initial values (keyframe 0 or 'from')");
        }
        parsedKeyframes[key].push({
          duration: getAnimationDuration(key, currentKeyPoint),
          value: value,
          easing: easing
        });
      };
      animationKeyPoints.filter(function (value) {
        return parseInt(value) !== 0;
      }).sort(function (a, b) {
        return parseInt(a) - parseInt(b);
      }).forEach(function (keyPoint) {
        if (parseInt(keyPoint) < 0 || parseInt(keyPoint) > 100) {
          throw Error('Keyframe should be in between range 0 - 100.');
        }
        var keyframe = _this2.definitions[keyPoint];
        var easing = keyframe.easing;
        delete keyframe.easing;
        var addKeyPointWith = function addKeyPointWith(key, value) {
          return addKeyPoint({
            key: key,
            value: value,
            currentKeyPoint: parseInt(keyPoint),
            easing: easing
          });
        };
        Object.keys(keyframe).forEach(function (key) {
          if (key === 'transform') {
            var _keyframe$key;
            (_keyframe$key = keyframe[key]) === null || _keyframe$key === void 0 ? void 0 : _keyframe$key.forEach(function (transformStyle, index) {
              Object.keys(transformStyle).forEach(function (transformProp) {
                addKeyPointWith(index.toString() + '_transform:' + transformProp, transformStyle[transformProp]);
              });
            });
          } else {
            addKeyPointWith(key, keyframe[key]);
          }
        });
      });
      return {
        initialValues: initialValues,
        keyframes: parsedKeyframes
      };
    }
  }, {
    key: "duration",
    value: function duration(durationMs) {
      this.durationV = durationMs;
      return this;
    }
  }, {
    key: "delay",
    value: function delay(delayMs) {
      this.delayV = delayMs;
      return this;
    }
  }, {
    key: "withCallback",
    value: function withCallback(callback) {
      this.callbackV = callback;
      return this;
    }
  }, {
    key: "getDelayFunction",
    value: function getDelayFunction() {
      var delay = this.delayV;
      return delay ? _animation.withDelay : function () {
        var _e = [new global.Error(), 1, -27];
        var _f = function _f(_, animation) {
          return animation;
        };
        _f._closure = {};
        _f.__initData = _worklet_3737494808179_init_data;
        _f.__workletHash = 3737494808179;
        _f.__stackDetails = _e;
        _f.__version = "3.3.0";
        return _f;
      }();
    }
  }]);
  return Keyframe;
}();
exports.Keyframe = Keyframe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,