eb79a8bea5c0a52b46d075606f3c0543
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeShareable = makeShareable;
exports.makeShareableCloneOnUIRecursive = void 0;
exports.makeShareableCloneRecursive = makeShareableCloneRecursive;
exports.registerShareableMapping = registerShareableMapping;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));
var _PlatformChecker = require("./PlatformChecker");
var _errors = require("./errors");
var _jsVersion = require("./platform-specific/jsVersion");
var USE_STUB_IMPLEMENTATION = (0, _PlatformChecker.shouldBeUseWeb)();
var _shareableCache = new WeakMap();
var _shareableFlag = Symbol('shareable flag');
var MAGIC_KEY = 'REANIMATED_MAGIC_KEY';
function isHostObject(value) {
  return MAGIC_KEY in value;
}
function registerShareableMapping(shareable, shareableRef) {
  if (USE_STUB_IMPLEMENTATION) {
    return;
  }
  _shareableCache.set(shareable, shareableRef || _shareableFlag);
}
function isPlainJSObject(object) {
  return Object.getPrototypeOf(object) === Object.prototype;
}
var _worklet_65486183985_init_data = {
  code: "function anonymous() {\n  return new Proxy({}, {\n    get: function (_, prop) {\n      if (prop === '_isReanimatedSharedValue') {\n        return false;\n      }\n      throw new Error(\"Trying to access property `\" + prop + \"` of an object which cannot be sent to the UI runtime.\");\n    },\n    set: function () {\n      throw new Error('Trying to write to an object which cannot be sent to the UI runtime.');\n    }\n  });\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/shareables.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"Proxy\",\"get\",\"_\",\"prop\",\"Error\",\"set\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/shareables.js\"],\"mappings\":\"AAwCU,SAAAA,SAAMA,CAAA;EAGZ,OAAO,IAAIC,KAAK,CAAC,CAAC,CAAC,EAAE;IACnBC,GAAG,EAAE,SAAAA,CAACC,CAAC,EAAEC,IAAI,EAAK;MAChB,IAAIA,IAAI,KAAK,0BAA0B,EAAE;QAQvC,OAAO,KAAK;MACd;MACA,MAAM,IAAIC,KAAK,iCAAgCD,IAAK,2DAAwD,CAAC;IAC/G,CAAC;IACDE,GAAG,EAAE,SAAAA,CAAA,EAAM;MACT,MAAM,IAAID,KAAK,CAAC,sEAAsE,CAAC;IACzF;EACF,CAAC,CAAC;AACJ\"}"
};
var INACCESSIBLE_OBJECT = {
  __init: function () {
    var _e = [new global.Error(), 1, -27];
    var _f = function _f() {
      return new Proxy({}, {
        get: function get(_, prop) {
          if (prop === '_isReanimatedSharedValue') {
            return false;
          }
          throw new Error(`Trying to access property \`${prop}\` of an object which cannot be sent to the UI runtime.`);
        },
        set: function set() {
          throw new Error('Trying to write to an object which cannot be sent to the UI runtime.');
        }
      });
    };
    _f._closure = {};
    _f.__initData = _worklet_65486183985_init_data;
    _f.__workletHash = 65486183985;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()
};
var DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD = 30;
var processedObjectAtThresholdDepth;
function makeShareableCloneRecursive(value) {
  var shouldPersistRemote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  if (USE_STUB_IMPLEMENTATION) {
    return value;
  }
  if (depth >= DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {
    if (depth === DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {
      processedObjectAtThresholdDepth = value;
    } else if (value === processedObjectAtThresholdDepth) {
      throw new Error('Trying to convert a cyclic object to a shareable. This is not supported.');
    }
  } else {
    processedObjectAtThresholdDepth = undefined;
  }
  var type = typeof value;
  var isTypeObject = type === 'object';
  var isTypeFunction = type === 'function';
  if ((isTypeObject || isTypeFunction) && value !== null) {
    var cached = _shareableCache.get(value);
    if (cached === _shareableFlag) {
      return value;
    } else if (cached !== undefined) {
      return cached;
    } else {
      var toAdapt;
      if (Array.isArray(value)) {
        toAdapt = value.map(function (element) {
          return makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);
        });
      } else if (isTypeFunction && value.__workletHash === undefined) {
        toAdapt = value;
      } else if (isHostObject(value)) {
        toAdapt = value;
      } else if (isPlainJSObject(value) || isTypeFunction) {
        toAdapt = {};
        if (value.__workletHash !== undefined) {
          if (__DEV__) {
            if (value.__version !== _jsVersion.jsVersion) {
              throw new Error(`[Reanimated] Mismatch between JavaScript code version and Reanimated Babel plugin version (${_jsVersion.jsVersion} vs. ${value.__version}). Please clear your Metro bundler cache with \`yarn start --reset-cache\`,
              \`npm start -- --reset-cache\` or \`expo start -c\` and run the app again.`);
            }
            (0, _errors.registerWorkletStackDetails)(value.__workletHash, value.__stackDetails);
            delete value.__stackDetails;
          }
          toAdapt.__initData = makeShareableCloneRecursive(value.__initData, true, depth + 1);
          delete value.__initData;
        }
        for (var _ref of Object.entries(value)) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
          var key = _ref2[0];
          var element = _ref2[1];
          toAdapt[key] = makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);
        }
      } else {
        var inaccessibleObject = makeShareableCloneRecursive(INACCESSIBLE_OBJECT);
        _shareableCache.set(value, inaccessibleObject);
        return inaccessibleObject;
      }
      if (__DEV__) {
        Object.freeze(value);
      }
      var adopted = _NativeReanimated.default.makeShareableClone(toAdapt, shouldPersistRemote);
      _shareableCache.set(value, adopted);
      _shareableCache.set(adopted, _shareableFlag);
      return adopted;
    }
  }
  return _NativeReanimated.default.makeShareableClone(value, shouldPersistRemote);
}
var _worklet_8401583828990_init_data = {
  code: "function makeShareableCloneOnUIRecursive(value) {\n  const {\n    USE_STUB_IMPLEMENTATION\n  } = this._closure;\n  if (USE_STUB_IMPLEMENTATION) {\n    return value;\n  }\n  function cloneRecursive(value) {\n    const type = typeof value;\n    if ((type === 'object' || type === 'function') && value !== null) {\n      let toAdapt;\n      if (Array.isArray(value)) {\n        toAdapt = value.map(function (element) {\n          return cloneRecursive(element);\n        });\n      } else if (value !== undefined) {\n        toAdapt = {};\n        for (const [key, element] of Object.entries(value)) {\n          toAdapt[key] = cloneRecursive(element);\n        }\n      }\n      return _makeShareableClone(toAdapt);\n    }\n    return _makeShareableClone(value);\n  }\n  return cloneRecursive(value);\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/shareables.js",
  sourceMap: "{\"version\":3,\"names\":[\"makeShareableCloneOnUIRecursive\",\"value\",\"USE_STUB_IMPLEMENTATION\",\"_closure\",\"cloneRecursive\",\"type\",\"toAdapt\",\"Array\",\"isArray\",\"map\",\"element\",\"undefined\",\"key\",\"Object\",\"entries\",\"_makeShareableClone\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/shareables.js\"],\"mappings\":\"AAkKO,SAAAA,+BAASA,CAAgCC,KAAA,EAAK;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAGnD,IAAID,uBAAuB,EAAE;IAG3B,OAAOD,KAAK;EACd;EACA,SAASG,cAAcA,CAACH,KAAK,EAAE;IAC7B,MAAMI,IAAI,GAAG,OAAOJ,KAAK;IACzB,IAAI,CAACI,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,UAAU,KAAKJ,KAAK,KAAK,IAAI,EAAE;MAChE,IAAIK,OAAO;MACX,IAAIC,KAAK,CAACC,OAAO,CAACP,KAAK,CAAC,EAAE;QACxBK,OAAO,GAAGL,KAAK,CAACQ,GAAG,CAAC,UAAAC,OAAO;UAAA,OAAIN,cAAc,CAACM,OAAO,CAAC;QAAA,EAAC;MACzD,CAAC,MAAM,IAAIT,KAAK,KAAKU,SAAS,EAAE;QAC9BL,OAAO,GAAG,CAAC,CAAC;QACZ,KAAK,MAAM,CAACM,GAAG,EAAEF,OAAO,CAAC,IAAIG,MAAM,CAACC,OAAO,CAACb,KAAK,CAAC,EAAE;UAClDK,OAAO,CAACM,GAAG,CAAC,GAAGR,cAAc,CAACM,OAAO,CAAC;QACxC;MACF;MACA,OAAOK,mBAAmB,CAACT,OAAO,CAAC;IACrC;IACA,OAAOS,mBAAmB,CAACd,KAAK,CAAC;EACnC;EACA,OAAOG,cAAc,CAACH,KAAK,CAAC;AAC9B\"}"
};
var makeShareableCloneOnUIRecursive = function () {
  var _e = [new global.Error(), -2, -27];
  var _f = function _f(value) {
    if (USE_STUB_IMPLEMENTATION) {
      return value;
    }
    function cloneRecursive(value) {
      var type = typeof value;
      if ((type === 'object' || type === 'function') && value !== null) {
        var toAdapt;
        if (Array.isArray(value)) {
          toAdapt = value.map(function (element) {
            return cloneRecursive(element);
          });
        } else if (value !== undefined) {
          toAdapt = {};
          for (var _ref3 of Object.entries(value)) {
            var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
            var key = _ref4[0];
            var element = _ref4[1];
            toAdapt[key] = cloneRecursive(element);
          }
        }
        return _makeShareableClone(toAdapt);
      }
      return _makeShareableClone(value);
    }
    return cloneRecursive(value);
  };
  _f._closure = {
    USE_STUB_IMPLEMENTATION: USE_STUB_IMPLEMENTATION
  };
  _f.__initData = _worklet_8401583828990_init_data;
  _f.__workletHash = 8401583828990;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
exports.makeShareableCloneOnUIRecursive = makeShareableCloneOnUIRecursive;
var _worklet_13878384066121_init_data = {
  code: "function anonymous() {\n  const {\n    value\n  } = this._closure;\n  return value;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/shareables.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"value\",\"_closure\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/shareables.js\"],\"mappings\":\"AAiMY,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAGZ,OAAOD,KAAK;AACd\"}"
};
function makeShareable(value) {
  if (USE_STUB_IMPLEMENTATION) {
    return value;
  }
  var handle = makeShareableCloneRecursive({
    __init: function () {
      var _e = [new global.Error(), -2, -27];
      var _f = function _f() {
        return value;
      };
      _f._closure = {
        value: value
      };
      _f.__initData = _worklet_13878384066121_init_data;
      _f.__workletHash = 13878384066121;
      _f.__stackDetails = _e;
      _f.__version = "3.3.0";
      return _f;
    }()
  });
  registerShareableMapping(value, handle);
  return value;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,