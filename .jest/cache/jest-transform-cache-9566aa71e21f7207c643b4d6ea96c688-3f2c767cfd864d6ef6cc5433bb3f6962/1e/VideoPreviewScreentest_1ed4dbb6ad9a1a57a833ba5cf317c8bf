bec536de8c41b3264d392beb3fc62da6
_getJestObj().mock("react-native-webview", function () {
  return {
    WebView: "WebView"
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _VideoPreviewScreen = _interopRequireDefault(require("../../src/screens/VideoPreviewScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("VideoPreviewScreen Component", function () {
  test("Render VideoPreviewScreen correctly", function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.NavigationContainer, {
      children: (0, _jsxRuntime.jsx)(_VideoPreviewScreen.default, {
        route: {
          params: {
            url: "https://www.youtube.com/watch?v=rrLkhg3fA0M"
          }
        }
      })
    }));
  });
  test('Navigate to TaskScreen when the "Back" button is pressed', function () {
    var mockNavigate = jest.fn();
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VideoPreviewScreen.default, {
        route: {
          params: {
            url: "https://example.com"
          }
        },
        navigation: {
          navigate: mockNavigate
        }
      })),
      getByText = _render.getByText;
    var backButton = getByText("Back");
    _reactNative.fireEvent.press(backButton);
    expect(mockNavigate).toHaveBeenCalledWith("Tasks");
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJXZWJWaWV3IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfbmF0aXZlIiwiX1ZpZGVvUHJldmlld1NjcmVlbiIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJqZXN0IiwiZGVzY3JpYmUiLCJ0ZXN0IiwicmVuZGVyIiwianN4IiwiTmF2aWdhdGlvbkNvbnRhaW5lciIsImNoaWxkcmVuIiwiZGVmYXVsdCIsInJvdXRlIiwicGFyYW1zIiwidXJsIiwibW9ja05hdmlnYXRlIiwiZm4iLCJfcmVuZGVyIiwibmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwiZ2V0QnlUZXh0IiwiYmFja0J1dHRvbiIsImZpcmVFdmVudCIsInByZXNzIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiXSwic291cmNlcyI6WyJWaWRlb1ByZXZpZXdTY3JlZW4udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkNvbnRhaW5lciB9IGZyb20gXCJAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmVcIjtcbmltcG9ydCBWaWRlb1ByZXZpZXdTY3JlZW4gZnJvbSBcIi4uLy4uL3NyYy9zY3JlZW5zL1ZpZGVvUHJldmlld1NjcmVlblwiO1xuXG5qZXN0Lm1vY2soXCJyZWFjdC1uYXRpdmUtd2Vidmlld1wiLCAoKSA9PiAoe1xuICBXZWJWaWV3OiBcIldlYlZpZXdcIixcbn0pKTtcblxuZGVzY3JpYmUoXCJWaWRlb1ByZXZpZXdTY3JlZW4gQ29tcG9uZW50XCIsICgpID0+IHtcbiAgICB0ZXN0KFwiUmVuZGVyIFZpZGVvUHJldmlld1NjcmVlbiBjb3JyZWN0bHlcIiwgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8TmF2aWdhdGlvbkNvbnRhaW5lcj5cbiAgICAgICAgICA8VmlkZW9QcmV2aWV3U2NyZWVuXG4gICAgICAgICAgICByb3V0ZT17e1xuICAgICAgICAgICAgICBwYXJhbXM6IHsgdXJsOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9cnJMa2hnM2ZBME1cIiB9LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L05hdmlnYXRpb25Db250YWluZXI+XG4gICAgICApO1xuICAgIH0pO1xuICB0ZXN0KCdOYXZpZ2F0ZSB0byBUYXNrU2NyZWVuIHdoZW4gdGhlIFwiQmFja1wiIGJ1dHRvbiBpcyBwcmVzc2VkJywgKCkgPT4ge1xuXG4gICAgY29uc3QgbW9ja05hdmlnYXRlID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8VmlkZW9QcmV2aWV3U2NyZWVuXG4gICAgICAgIHJvdXRlPXt7IHBhcmFtczogeyB1cmw6IFwiaHR0cHM6Ly9leGFtcGxlLmNvbVwiIH0gfX1cbiAgICAgICAgbmF2aWdhdGlvbj17eyBuYXZpZ2F0ZTogbW9ja05hdmlnYXRlIH19XG4gICAgICAvPlxuICAgICk7XG5cbiAgICBjb25zdCBiYWNrQnV0dG9uID0gZ2V0QnlUZXh0KFwiQmFja1wiKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoYmFja0J1dHRvbik7XG5cbiAgICBleHBlY3QobW9ja05hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcIlRhc2tzXCIpO1xuICB9KTtcbn0pO1xuXG4iXSwibWFwcGluZ3MiOiJBQUtBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtFQUFBLE9BQU87SUFDdkNDLE9BQU8sRUFBRTtFQUNYLENBQUM7QUFBQSxDQUFDLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBUEosSUFBQUMsTUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksbUJBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFzRSxJQUFBSyxXQUFBLEdBQUFMLE9BQUE7QUFBQSxTQUFBSixZQUFBO0VBQUEsSUFBQVUsUUFBQSxHQUFBTixPQUFBO0lBQUFPLElBQUEsR0FBQUQsUUFBQSxDQUFBQyxJQUFBO0VBQUFYLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFXLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQU10RUMsUUFBUSxDQUFDLDhCQUE4QixFQUFFLFlBQU07RUFDM0NDLElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxZQUFNO0lBQ2hELElBQUFDLG1CQUFNLEVBQ0osSUFBQUwsV0FBQSxDQUFBTSxHQUFBLEVBQUNSLE9BQUEsQ0FBQVMsbUJBQW1CO01BQUFDLFFBQUEsRUFDbEIsSUFBQVIsV0FBQSxDQUFBTSxHQUFBLEVBQUNQLG1CQUFBLENBQUFVLE9BQWtCO1FBQ2pCQyxLQUFLLEVBQUU7VUFDTEMsTUFBTSxFQUFFO1lBQUVDLEdBQUcsRUFBRTtVQUE4QztRQUMvRDtNQUFFLENBQ0g7SUFBQyxDQUNpQixDQUN2QixDQUFDO0VBQ0gsQ0FBQyxDQUFDO0VBQ0pSLElBQUksQ0FBQywwREFBMEQsRUFBRSxZQUFNO0lBRXJFLElBQU1TLFlBQVksR0FBR1gsSUFBSSxDQUFDWSxFQUFFLENBQUMsQ0FBQztJQUM5QixJQUFBQyxPQUFBLEdBQXNCLElBQUFWLG1CQUFNLEVBQzFCLElBQUFMLFdBQUEsQ0FBQU0sR0FBQSxFQUFDUCxtQkFBQSxDQUFBVSxPQUFrQjtRQUNqQkMsS0FBSyxFQUFFO1VBQUVDLE1BQU0sRUFBRTtZQUFFQyxHQUFHLEVBQUU7VUFBc0I7UUFBRSxDQUFFO1FBQ2xESSxVQUFVLEVBQUU7VUFBRUMsUUFBUSxFQUFFSjtRQUFhO01BQUUsQ0FDeEMsQ0FDSCxDQUFDO01BTE9LLFNBQVMsR0FBQUgsT0FBQSxDQUFURyxTQUFTO0lBT2pCLElBQU1DLFVBQVUsR0FBR0QsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUNwQ0Usc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDRixVQUFVLENBQUM7SUFFM0JHLE1BQU0sQ0FBQ1QsWUFBWSxDQUFDLENBQUNVLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztFQUNwRCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==