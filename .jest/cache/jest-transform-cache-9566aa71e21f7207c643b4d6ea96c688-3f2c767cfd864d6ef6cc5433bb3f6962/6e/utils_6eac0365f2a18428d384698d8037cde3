19f589b4a0cf8b34fdbdd061de5c8dd5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dateToMilliseconds = dateToMilliseconds;
exports.sharedPropsValidation = sharedPropsValidation;
exports.toMilliseconds = toMilliseconds;
var _invariant = _interopRequireDefault(require("invariant"));
function toMilliseconds(options) {
  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    keys[_key - 1] = arguments[_key];
  }
  keys.forEach(function each(key) {
    var value = options[key];
    if (Object.prototype.toString.call(value) === '[object Date]') {
      options[key] = value.getTime();
    }
  });
}
function dateToMilliseconds(date) {
  if (!date) {
    return;
  }
  return date.getTime();
}
function sharedPropsValidation(_ref) {
  var value = _ref.value,
    timeZoneName = _ref.timeZoneName,
    timeZoneOffsetInMinutes = _ref.timeZoneOffsetInMinutes;
  (0, _invariant.default)(value, 'A date or time must be specified as `value` prop');
  (0, _invariant.default)(value instanceof Date, '`value` prop must be an instance of Date object');
  (0, _invariant.default)(timeZoneName == null || timeZoneOffsetInMinutes == null, '`timeZoneName` and `timeZoneOffsetInMinutes` cannot be specified at the same time');
  if (timeZoneOffsetInMinutes !== undefined) {
    console.warn('`timeZoneOffsetInMinutes` is deprecated and will be removed in a future release. Use `timeZoneName` instead.');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW52YXJpYW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJ0b01pbGxpc2Vjb25kcyIsIm9wdGlvbnMiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwia2V5cyIsIkFycmF5IiwiX2tleSIsImZvckVhY2giLCJlYWNoIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJnZXRUaW1lIiwiZGF0ZVRvTWlsbGlzZWNvbmRzIiwiZGF0ZSIsInNoYXJlZFByb3BzVmFsaWRhdGlvbiIsIl9yZWYiLCJ0aW1lWm9uZU5hbWUiLCJ0aW1lWm9uZU9mZnNldEluTWludXRlcyIsImludmFyaWFudCIsIkRhdGUiLCJ1bmRlZmluZWQiLCJjb25zb2xlIiwid2FybiJdLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cbmltcG9ydCB0eXBlIHtEYXRlUGlja2VyT3B0aW9ucywgVGltZVBpY2tlck9wdGlvbnN9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG4vKipcbiAqIENvbnZlcnQgYSBEYXRlIHRvIGEgdGltZXN0YW1wLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9NaWxsaXNlY29uZHMoXG4gIG9wdGlvbnM6IERhdGVQaWNrZXJPcHRpb25zIHwgVGltZVBpY2tlck9wdGlvbnMsXG4gIC4uLmtleXM6IEFycmF5PHN0cmluZz5cbikge1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gZWFjaChrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcblxuICAgIC8vIElzIGl0IGEgdmFsaWQgRGF0ZSBvYmplY3Q/XG4gICAgLy8gJEZsb3dGaXhNZTogQ2Fubm90IGdldCBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgYmVjYXVzZSBwcm9wZXJ0eSBgdG9TdHJpbmdgIFsxXSBjYW5ub3QgYmUgdW5ib3VuZCBmcm9tIHRoZSBjb250ZXh0IFsyXSB3aGVyZSBpdCB3YXMgZGVmaW5lZC5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgICBvcHRpb25zW2tleV0gPSB2YWx1ZS5nZXRUaW1lKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGVUb01pbGxpc2Vjb25kcyhkYXRlOiA/RGF0ZSk6ID9udW1iZXIge1xuICBpZiAoIWRhdGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hhcmVkUHJvcHNWYWxpZGF0aW9uKHtcbiAgdmFsdWUsXG4gIHRpbWVab25lTmFtZSxcbiAgdGltZVpvbmVPZmZzZXRJbk1pbnV0ZXMsXG59OiB7XG4gIHZhbHVlOiBEYXRlLFxuICB0aW1lWm9uZU5hbWU/OiA/c3RyaW5nLFxuICB0aW1lWm9uZU9mZnNldEluTWludXRlcz86ID9udW1iZXIsXG59KSB7XG4gIGludmFyaWFudCh2YWx1ZSwgJ0EgZGF0ZSBvciB0aW1lIG11c3QgYmUgc3BlY2lmaWVkIGFzIGB2YWx1ZWAgcHJvcCcpO1xuICBpbnZhcmlhbnQoXG4gICAgdmFsdWUgaW5zdGFuY2VvZiBEYXRlLFxuICAgICdgdmFsdWVgIHByb3AgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBEYXRlIG9iamVjdCcsXG4gICk7XG4gIGludmFyaWFudChcbiAgICB0aW1lWm9uZU5hbWUgPT0gbnVsbCB8fCB0aW1lWm9uZU9mZnNldEluTWludXRlcyA9PSBudWxsLFxuICAgICdgdGltZVpvbmVOYW1lYCBhbmQgYHRpbWVab25lT2Zmc2V0SW5NaW51dGVzYCBjYW5ub3QgYmUgc3BlY2lmaWVkIGF0IHRoZSBzYW1lIHRpbWUnLFxuICApO1xuICBpZiAodGltZVpvbmVPZmZzZXRJbk1pbnV0ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdgdGltZVpvbmVPZmZzZXRJbk1pbnV0ZXNgIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiBVc2UgYHRpbWVab25lTmFtZWAgaW5zdGVhZC4nLFxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUtBLElBQUFBLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUtPLFNBQVNDLGNBQWNBLENBQzVCQyxPQUE4QyxFQUU5QztFQUFBLFNBQUFDLElBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBREdDLElBQUksT0FBQUMsS0FBQSxDQUFBSixJQUFBLE9BQUFBLElBQUEsV0FBQUssSUFBQSxNQUFBQSxJQUFBLEdBQUFMLElBQUEsRUFBQUssSUFBQTtJQUFKRixJQUFJLENBQUFFLElBQUEsUUFBQUosU0FBQSxDQUFBSSxJQUFBO0VBQUE7RUFFUEYsSUFBSSxDQUFDRyxPQUFPLENBQUMsU0FBU0MsSUFBSUEsQ0FBQ0MsR0FBRyxFQUFFO0lBQzlCLElBQU1DLEtBQUssR0FBR1YsT0FBTyxDQUFDUyxHQUFHLENBQUM7SUFJMUIsSUFBSUUsTUFBTSxDQUFDQyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDSixLQUFLLENBQUMsS0FBSyxlQUFlLEVBQUU7TUFDN0RWLE9BQU8sQ0FBQ1MsR0FBRyxDQUFDLEdBQUdDLEtBQUssQ0FBQ0ssT0FBTyxDQUFDLENBQUM7SUFDaEM7RUFDRixDQUFDLENBQUM7QUFDSjtBQUVPLFNBQVNDLGtCQUFrQkEsQ0FBQ0MsSUFBVyxFQUFXO0VBQ3ZELElBQUksQ0FBQ0EsSUFBSSxFQUFFO0lBQ1Q7RUFDRjtFQUNBLE9BQU9BLElBQUksQ0FBQ0YsT0FBTyxDQUFDLENBQUM7QUFDdkI7QUFFTyxTQUFTRyxxQkFBcUJBLENBQUFDLElBQUEsRUFRbEM7RUFBQSxJQVBEVCxLQUFLLEdBQUFTLElBQUEsQ0FBTFQsS0FBSztJQUNMVSxZQUFZLEdBQUFELElBQUEsQ0FBWkMsWUFBWTtJQUNaQyx1QkFBdUIsR0FBQUYsSUFBQSxDQUF2QkUsdUJBQXVCO0VBTXZCLElBQUFDLGtCQUFTLEVBQUNaLEtBQUssRUFBRSxrREFBa0QsQ0FBQztFQUNwRSxJQUFBWSxrQkFBUyxFQUNQWixLQUFLLFlBQVlhLElBQUksRUFDckIsaURBQ0YsQ0FBQztFQUNELElBQUFELGtCQUFTLEVBQ1BGLFlBQVksSUFBSSxJQUFJLElBQUlDLHVCQUF1QixJQUFJLElBQUksRUFDdkQsbUZBQ0YsQ0FBQztFQUNELElBQUlBLHVCQUF1QixLQUFLRyxTQUFTLEVBQUU7SUFDekNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUNWLDhHQUNGLENBQUM7RUFDSDtBQUNGIn0=