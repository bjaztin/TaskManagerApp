d8397ed27a1a7eddbc060009643d6936
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HOUR_BLOCK_HEIGHT = void 0;
exports.buildUnavailableHoursBlocks = buildUnavailableHoursBlocks;
exports.populateEvents = populateEvents;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _inRange = _interopRequireDefault(require("lodash/inRange"));
var _xdate = _interopRequireDefault(require("xdate"));
var _constants = _interopRequireDefault(require("../commons/constants"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var HOUR_BLOCK_HEIGHT = 100;
exports.HOUR_BLOCK_HEIGHT = HOUR_BLOCK_HEIGHT;
var OVERLAP_EVENTS_SPACINGS = 10;
var RIGHT_EDGE_SPACING = 10;
function buildEvent(event, left, width, _ref) {
  var _ref$dayStart = _ref.dayStart,
    dayStart = _ref$dayStart === void 0 ? 0 : _ref$dayStart,
    _ref$hourBlockHeight = _ref.hourBlockHeight,
    hourBlockHeight = _ref$hourBlockHeight === void 0 ? HOUR_BLOCK_HEIGHT : _ref$hourBlockHeight;
  var startTime = new _xdate.default(event.start);
  var endTime = event.end ? new _xdate.default(event.end) : new _xdate.default(startTime).addHours(1);
  var dayStartTime = new _xdate.default(startTime).clearTime();
  return _objectSpread(_objectSpread({}, event), {}, {
    top: (dayStartTime.diffHours(startTime) - dayStart) * hourBlockHeight,
    height: startTime.diffHours(endTime) * hourBlockHeight,
    width: width,
    left: left
  });
}
function hasCollision(a, b) {
  return a.end > b.start && a.start < b.end;
}
function calcColumnSpan(event, columnIndex, columns) {
  var colSpan = 1;
  for (var i = columnIndex + 1; i < columns.length; i++) {
    var column = columns[i];
    var foundCollision = column.find(function (ev) {
      return hasCollision(event, ev);
    });
    if (foundCollision) {
      return colSpan;
    }
    colSpan++;
  }
  return colSpan;
}
function packOverlappingEventGroup(columns, calculatedEvents, populateOptions) {
  var _populateOptions$scre = populateOptions.screenWidth,
    screenWidth = _populateOptions$scre === void 0 ? _constants.default.screenWidth : _populateOptions$scre,
    _populateOptions$righ = populateOptions.rightEdgeSpacing,
    rightEdgeSpacing = _populateOptions$righ === void 0 ? RIGHT_EDGE_SPACING : _populateOptions$righ,
    _populateOptions$over = populateOptions.overlapEventsSpacing,
    overlapEventsSpacing = _populateOptions$over === void 0 ? OVERLAP_EVENTS_SPACINGS : _populateOptions$over;
  columns.forEach(function (column, columnIndex) {
    column.forEach(function (event) {
      var totalWidth = screenWidth - rightEdgeSpacing;
      var columnSpan = calcColumnSpan(event, columnIndex, columns);
      var eventLeft = columnIndex / columns.length * totalWidth;
      var eventWidth = totalWidth * (columnSpan / columns.length);
      if (columnIndex + columnSpan <= columns.length - 1) {
        eventWidth -= overlapEventsSpacing;
      }
      calculatedEvents.push(buildEvent(event, eventLeft, eventWidth, populateOptions));
    });
  });
}
function populateEvents(_events, populateOptions) {
  var lastEnd = null;
  var columns = [];
  var calculatedEvents = [];
  var events = _events.map(function (ev, index) {
    return _objectSpread(_objectSpread({}, ev), {}, {
      index: index
    });
  }).sort(function (a, b) {
    if (a.start < b.start) return -1;
    if (a.start > b.start) return 1;
    if (a.end < b.end) return -1;
    if (a.end > b.end) return 1;
    return 0;
  });
  events.forEach(function (ev) {
    if (lastEnd !== null && ev.start >= lastEnd) {
      packOverlappingEventGroup(columns, calculatedEvents, populateOptions);
      columns = [];
      lastEnd = null;
    }
    var placed = false;
    for (var i = 0; i < columns.length; i++) {
      var col = columns[i];
      if (!hasCollision(col[col.length - 1], ev)) {
        col.push(ev);
        placed = true;
        break;
      }
    }
    if (!placed) {
      columns.push([ev]);
    }
    if (lastEnd === null || ev.end > lastEnd) {
      lastEnd = ev.end;
    }
  });
  if (columns.length > 0) {
    packOverlappingEventGroup(columns, calculatedEvents, populateOptions);
  }
  return calculatedEvents;
}
function buildUnavailableHoursBlocks() {
  var unavailableHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var options = arguments.length > 1 ? arguments[1] : undefined;
  var _ref2 = options || {},
    _ref2$hourBlockHeight = _ref2.hourBlockHeight,
    hourBlockHeight = _ref2$hourBlockHeight === void 0 ? HOUR_BLOCK_HEIGHT : _ref2$hourBlockHeight,
    _ref2$dayStart = _ref2.dayStart,
    dayStart = _ref2$dayStart === void 0 ? 0 : _ref2$dayStart,
    _ref2$dayEnd = _ref2.dayEnd,
    dayEnd = _ref2$dayEnd === void 0 ? 24 : _ref2$dayEnd;
  var totalDayHours = dayEnd - dayStart;
  var totalDayHeight = (dayEnd - dayStart) * hourBlockHeight;
  return unavailableHours.map(function (hours) {
    if (!(0, _inRange.default)(hours.start, 0, 25) || !(0, _inRange.default)(hours.end, 0, 25)) {
      console.error('Calendar Timeline unavailableHours is invalid. Hours should be between 0 and 24');
      return undefined;
    }
    if (hours.start >= hours.end) {
      console.error('Calendar Timeline availableHours is invalid. start hour should be earlier than end hour');
      return undefined;
    }
    var startFixed = Math.max(hours.start, dayStart);
    var endFixed = Math.min(hours.end, dayEnd);
    return {
      top: (startFixed - dayStart) / totalDayHours * totalDayHeight,
      height: (endFixed - startFixed) * hourBlockHeight
    };
  }).filter(Boolean);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,