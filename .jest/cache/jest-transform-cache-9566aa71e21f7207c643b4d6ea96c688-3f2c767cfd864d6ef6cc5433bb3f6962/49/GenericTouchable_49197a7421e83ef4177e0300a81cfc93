dd5053886f97f4ce2737d23fbf6886a3
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TOUCHABLE_STATE = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _State = require("../../State");
var _GestureButtons = require("../GestureButtons");
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TOUCHABLE_STATE = {
  UNDETERMINED: 0,
  BEGAN: 1,
  MOVED_OUTSIDE: 2
};
exports.TOUCHABLE_STATE = TOUCHABLE_STATE;
var GenericTouchable = function (_React$Component) {
  (0, _inherits2.default)(GenericTouchable, _React$Component);
  var _super = _createSuper(GenericTouchable);
  function GenericTouchable() {
    var _this;
    (0, _classCallCheck2.default)(this, GenericTouchable);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty((0, _assertThisInitialized2.default)(_this), "pressInTimeout", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "pressOutTimeout", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "longPressTimeout", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "longPressDetected", false);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "pointerInside", true);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "STATE", TOUCHABLE_STATE.UNDETERMINED);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "onGestureEvent", function (_ref2) {
      var pointerInside = _ref2.nativeEvent.pointerInside;
      if (_this.pointerInside !== pointerInside) {
        if (pointerInside) {
          _this.onMoveIn();
        } else {
          _this.onMoveOut();
        }
      }
      _this.pointerInside = pointerInside;
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "onHandlerStateChange", function (_ref3) {
      var nativeEvent = _ref3.nativeEvent;
      var state = nativeEvent.state;
      if (state === _State.State.CANCELLED || state === _State.State.FAILED) {
        _this.moveToState(TOUCHABLE_STATE.UNDETERMINED);
      } else if (state === (_reactNative.Platform.OS !== 'android' ? _State.State.ACTIVE : _State.State.BEGAN) && _this.STATE === TOUCHABLE_STATE.UNDETERMINED) {
        _this.handlePressIn();
      } else if (state === _State.State.END) {
        var shouldCallOnPress = !_this.longPressDetected && _this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE && _this.pressOutTimeout === null;
        _this.handleGoToUndetermined();
        if (shouldCallOnPress) {
          var _this$props$onPress, _this$props;
          (_this$props$onPress = (_this$props = _this.props).onPress) === null || _this$props$onPress === void 0 ? void 0 : _this$props$onPress.call(_this$props);
        }
      }
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "onLongPressDetected", function () {
      var _this$props$onLongPre, _this$props2;
      _this.longPressDetected = true;
      (_this$props$onLongPre = (_this$props2 = _this.props).onLongPress) === null || _this$props$onLongPre === void 0 ? void 0 : _this$props$onLongPre.call(_this$props2);
    });
    return _this;
  }
  (0, _createClass2.default)(GenericTouchable, [{
    key: "handlePressIn",
    value: function handlePressIn() {
      var _this2 = this;
      if (this.props.delayPressIn) {
        this.pressInTimeout = setTimeout(function () {
          _this2.moveToState(TOUCHABLE_STATE.BEGAN);
          _this2.pressInTimeout = null;
        }, this.props.delayPressIn);
      } else {
        this.moveToState(TOUCHABLE_STATE.BEGAN);
      }
      if (this.props.onLongPress) {
        var time = (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);
        this.longPressTimeout = setTimeout(this.onLongPressDetected, time);
      }
    }
  }, {
    key: "handleMoveOutside",
    value: function handleMoveOutside() {
      var _this3 = this;
      if (this.props.delayPressOut) {
        this.pressOutTimeout = this.pressOutTimeout || setTimeout(function () {
          _this3.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);
          _this3.pressOutTimeout = null;
        }, this.props.delayPressOut);
      } else {
        this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);
      }
    }
  }, {
    key: "handleGoToUndetermined",
    value: function handleGoToUndetermined() {
      var _this4 = this;
      clearTimeout(this.pressOutTimeout);
      if (this.props.delayPressOut) {
        this.pressOutTimeout = setTimeout(function () {
          if (_this4.STATE === TOUCHABLE_STATE.UNDETERMINED) {
            _this4.moveToState(TOUCHABLE_STATE.BEGAN);
          }
          _this4.moveToState(TOUCHABLE_STATE.UNDETERMINED);
          _this4.pressOutTimeout = null;
        }, this.props.delayPressOut);
      } else {
        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {
          this.moveToState(TOUCHABLE_STATE.BEGAN);
        }
        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.reset();
    }
  }, {
    key: "reset",
    value: function reset() {
      this.longPressDetected = false;
      this.pointerInside = true;
      clearTimeout(this.pressInTimeout);
      clearTimeout(this.pressOutTimeout);
      clearTimeout(this.longPressTimeout);
      this.pressOutTimeout = null;
      this.longPressTimeout = null;
      this.pressInTimeout = null;
    }
  }, {
    key: "moveToState",
    value: function moveToState(newState) {
      var _this$props$onStateCh, _this$props6;
      if (newState === this.STATE) {
        return;
      }
      if (newState === TOUCHABLE_STATE.BEGAN) {
        var _this$props$onPressIn, _this$props3;
        (_this$props$onPressIn = (_this$props3 = this.props).onPressIn) === null || _this$props$onPressIn === void 0 ? void 0 : _this$props$onPressIn.call(_this$props3);
      } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {
        var _this$props$onPressOu, _this$props4;
        (_this$props$onPressOu = (_this$props4 = this.props).onPressOut) === null || _this$props$onPressOu === void 0 ? void 0 : _this$props$onPressOu.call(_this$props4);
      } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {
        this.reset();
        if (this.STATE === TOUCHABLE_STATE.BEGAN) {
          var _this$props$onPressOu2, _this$props5;
          (_this$props$onPressOu2 = (_this$props5 = this.props).onPressOut) === null || _this$props$onPressOu2 === void 0 ? void 0 : _this$props$onPressOu2.call(_this$props5);
        }
      }
      (_this$props$onStateCh = (_this$props6 = this.props).onStateChange) === null || _this$props$onStateCh === void 0 ? void 0 : _this$props$onStateCh.call(_this$props6, this.STATE, newState);
      this.STATE = newState;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.reset();
    }
  }, {
    key: "onMoveIn",
    value: function onMoveIn() {
      if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {
        this.moveToState(TOUCHABLE_STATE.BEGAN);
      }
    }
  }, {
    key: "onMoveOut",
    value: function onMoveOut() {
      clearTimeout(this.longPressTimeout);
      this.longPressTimeout = null;
      if (this.STATE === TOUCHABLE_STATE.BEGAN) {
        this.handleMoveOutside();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _ref, _this$props$touchSoun;
      var hitSlop = (_ref = typeof this.props.hitSlop === 'number' ? {
        top: this.props.hitSlop,
        left: this.props.hitSlop,
        bottom: this.props.hitSlop,
        right: this.props.hitSlop
      } : this.props.hitSlop) !== null && _ref !== void 0 ? _ref : undefined;
      var coreProps = {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityHint: this.props.accessibilityHint,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityState: this.props.accessibilityState,
        accessibilityActions: this.props.accessibilityActions,
        onAccessibilityAction: this.props.onAccessibilityAction,
        nativeID: this.props.nativeID,
        onLayout: this.props.onLayout,
        hitSlop: hitSlop
      };
      return React.createElement(_GestureButtons.BaseButton, _extends({
        style: this.props.containerStyle,
        onHandlerStateChange: this.props.disabled ? undefined : this.onHandlerStateChange,
        onGestureEvent: this.onGestureEvent,
        hitSlop: hitSlop,
        shouldActivateOnStart: this.props.shouldActivateOnStart,
        disallowInterruption: this.props.disallowInterruption,
        testID: this.props.testID,
        touchSoundDisabled: (_this$props$touchSoun = this.props.touchSoundDisabled) !== null && _this$props$touchSoun !== void 0 ? _this$props$touchSoun : false,
        enabled: !this.props.disabled
      }, this.props.extraButtonProps), React.createElement(_reactNative.Animated.View, _extends({}, coreProps, {
        style: this.props.style
      }), this.props.children));
    }
  }]);
  return GenericTouchable;
}(React.Component);
exports.default = GenericTouchable;
_defineProperty(GenericTouchable, "defaultProps", {
  delayLongPress: 600,
  extraButtonProps: {
    rippleColor: 'transparent',
    exclusive: true
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,