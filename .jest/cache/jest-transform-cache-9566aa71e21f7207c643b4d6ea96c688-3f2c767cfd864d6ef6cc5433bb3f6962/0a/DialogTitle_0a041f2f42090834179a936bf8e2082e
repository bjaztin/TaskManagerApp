d879df9f34a896daf4125354dda1fec6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DialogTitle = function DialogTitle(_ref) {
  var title = _ref.title,
    titleStyle = _ref.titleStyle,
    titleProps = _ref.titleProps;
  return (0, _jsxRuntime.jsx)(_reactNative.Text, _objectSpread(_objectSpread({
    style: _reactNative.StyleSheet.flatten([styles.title, titleStyle]),
    testID: "Dialog__Title"
  }, titleProps), {}, {
    children: title
  }));
};
var styles = _reactNative.StyleSheet.create({
  title: {
    fontSize: 18,
    fontWeight: _reactNative.Platform.OS === 'ios' ? '600' : '700',
    marginBottom: 10
  }
});
var _default = (0, _config.withTheme)(DialogTitle, 'DialogTitle');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfanN4UnVudGltZSIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIkRpYWxvZ1RpdGxlIiwiX3JlZiIsInRpdGxlIiwidGl0bGVTdHlsZSIsInRpdGxlUHJvcHMiLCJqc3giLCJUZXh0Iiwic3R5bGUiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInN0eWxlcyIsInRlc3RJRCIsImNoaWxkcmVuIiwiY3JlYXRlIiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiUGxhdGZvcm0iLCJPUyIsIm1hcmdpbkJvdHRvbSIsIl9kZWZhdWx0Iiwid2l0aFRoZW1lIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkRpYWxvZ1RpdGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUZXh0LCBTdHlsZVNoZWV0LCBQbGF0Zm9ybSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuY29uc3QgRGlhbG9nVGl0bGUgPSAoeyB0aXRsZSwgdGl0bGVTdHlsZSwgdGl0bGVQcm9wcywgfSkgPT4ge1xuICAgIHJldHVybiAoPFRleHQgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbc3R5bGVzLnRpdGxlLCB0aXRsZVN0eWxlXSl9IHRlc3RJRD1cIkRpYWxvZ19fVGl0bGVcIiB7Li4udGl0bGVQcm9wc30+XG4gICAgICB7dGl0bGV9XG4gICAgPC9UZXh0Pik7XG59O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIHRpdGxlOiB7XG4gICAgICAgIGZvbnRTaXplOiAxOCxcbiAgICAgICAgZm9udFdlaWdodDogUGxhdGZvcm0uT1MgPT09ICdpb3MnID8gJzYwMCcgOiAnNzAwJyxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAxMCxcbiAgICB9LFxufSk7XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoRGlhbG9nVGl0bGUsICdEaWFsb2dUaXRsZScpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFBc0MsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBQUEsU0FBQUksUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFBLEVBQUFDLENBQUEsRUFBQVEsVUFBQSxPQUFBUCxDQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxDQUFBLEVBQUFJLENBQUEsWUFBQUosQ0FBQTtBQUFBLFNBQUFVLGNBQUFaLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFZLFNBQUEsQ0FBQUMsTUFBQSxFQUFBYixDQUFBLFVBQUFDLENBQUEsV0FBQVcsU0FBQSxDQUFBWixDQUFBLElBQUFZLFNBQUEsQ0FBQVosQ0FBQSxRQUFBQSxDQUFBLE9BQUFGLE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLE9BQUFhLE9BQUEsV0FBQWQsQ0FBQSxRQUFBZSxnQkFBQSxDQUFBQyxPQUFBLEVBQUFqQixDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxDQUFBRCxDQUFBLFNBQUFFLE1BQUEsQ0FBQWUseUJBQUEsR0FBQWYsTUFBQSxDQUFBZ0IsZ0JBQUEsQ0FBQW5CLENBQUEsRUFBQUcsTUFBQSxDQUFBZSx5QkFBQSxDQUFBaEIsQ0FBQSxLQUFBSCxPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxHQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQUUsTUFBQSxDQUFBaUIsY0FBQSxDQUFBcEIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQU4sQ0FBQSxFQUFBRCxDQUFBLGlCQUFBRCxDQUFBO0FBQ3RDLElBQU1xQixXQUFXLEdBQUcsU0FBZEEsV0FBV0EsQ0FBQUMsSUFBQSxFQUEyQztFQUFBLElBQXJDQyxLQUFLLEdBQUFELElBQUEsQ0FBTEMsS0FBSztJQUFFQyxVQUFVLEdBQUFGLElBQUEsQ0FBVkUsVUFBVTtJQUFFQyxVQUFVLEdBQUFILElBQUEsQ0FBVkcsVUFBVTtFQUNoRCxPQUFRLElBQUEzQixXQUFBLENBQUE0QixHQUFBLEVBQUM5QixZQUFBLENBQUErQixJQUFJLEVBQUFmLGFBQUEsQ0FBQUEsYUFBQTtJQUFDZ0IsS0FBSyxFQUFFQyx1QkFBVSxDQUFDQyxPQUFPLENBQUMsQ0FBQ0MsTUFBTSxDQUFDUixLQUFLLEVBQUVDLFVBQVUsQ0FBQyxDQUFFO0lBQUNRLE1BQU0sRUFBQztFQUFlLEdBQUtQLFVBQVU7SUFBQVEsUUFBQSxFQUN2R1Y7RUFBSyxFQUNGLENBQUM7QUFDWCxDQUFDO0FBQ0QsSUFBTVEsTUFBTSxHQUFHRix1QkFBVSxDQUFDSyxNQUFNLENBQUM7RUFDN0JYLEtBQUssRUFBRTtJQUNIWSxRQUFRLEVBQUUsRUFBRTtJQUNaQyxVQUFVLEVBQUVDLHFCQUFRLENBQUNDLEVBQUUsS0FBSyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUs7SUFDakRDLFlBQVksRUFBRTtFQUNsQjtBQUNKLENBQUMsQ0FBQztBQUFDLElBQUFDLFFBQUEsR0FDWSxJQUFBQyxpQkFBUyxFQUFDcEIsV0FBVyxFQUFFLGFBQWEsQ0FBQztBQUFBcUIsT0FBQSxDQUFBekIsT0FBQSxHQUFBdUIsUUFBQSJ9