{"version":3,"names":["_util","require","_springUtils","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_worklet_3329358150165_init_data","code","location","sourceMap","_worklet_13647237086619_init_data","withSpring","_e","global","Error","_f","toValue","userConfig","callback","defineAnimation","defaultConfig","damping","mass","stiffness","overshootClamping","restDisplacementThreshold","restSpeedThreshold","velocity","duration","dampingRatio","config","useDuration","configIsInvalid","some","x","console","warn","springOnFrame","animation","now","startTimestamp","current","timeFromStart","lastTimestamp","deltaTime","Math","min","v0","x0","zeta","omega0","omega1","_ref","underDampedSpringCalculations","criticallyDampedSpringCalculations","newPosition","position","newVelocity","_isAnimationTerminati","isAnimationTerminatingCalculation","isOvershooting","isVelocity","isDisplacement","springIsNotInMove","isTriggeredTwice","previousAnimation","onStart","value","startValue","triggeredTwice","Number","acutalDuration","calcuateNewMassToMatchDuration","_initialCalculations","initialCalculations","onFrame","_closure","__initData","__workletHash","__stackDetails","__version","exports"],"sources":["spring.ts"],"sourcesContent":["import { defineAnimation } from './util';\nimport {\n  Animation,\n  AnimationCallback,\n  AnimatableValue,\n  Timestamp,\n} from '../commonTypes';\nimport {\n  SpringConfig,\n  initialCalculations,\n  calcuateNewMassToMatchDuration,\n  SpringAnimation,\n  InnerSpringAnimation,\n  underDampedSpringCalculations,\n  criticallyDampedSpringCalculations,\n  isAnimationTerminatingCalculation,\n  SpringConfigInner,\n} from './springUtils';\n\nexport function withSpring(\n  toValue: AnimatableValue,\n  userConfig?: SpringConfig,\n  callback?: AnimationCallback\n): Animation<SpringAnimation> {\n  'worklet';\n\n  return defineAnimation<SpringAnimation>(toValue, () => {\n    'worklet';\n    const defaultConfig: Record<keyof SpringConfig, any> = {\n      damping: 10,\n      mass: 1,\n      stiffness: 100,\n      overshootClamping: false,\n      restDisplacementThreshold: 0.01,\n      restSpeedThreshold: 2,\n      velocity: 0,\n      duration: 2000,\n      dampingRatio: 0.5,\n    } as const;\n\n    const config: Record<keyof SpringConfig, any> & SpringConfigInner = {\n      ...defaultConfig,\n      ...userConfig,\n      useDuration: !!(userConfig?.duration || userConfig?.dampingRatio),\n      configIsInvalid: false,\n    };\n\n    if (\n      [\n        config.stiffness,\n        config.damping,\n        config.duration,\n        config.dampingRatio,\n        config.restDisplacementThreshold,\n        config.restSpeedThreshold,\n      ].some((x) => x <= 0) ||\n      config.mass === 0\n    ) {\n      config.configIsInvalid = true;\n      console.warn(\n        \"You have provided invalid spring animation configuration! \\n Value of stiffness, damping, duration and damping ratio must be greater than zero, and mass can't equal zero.\"\n      );\n    }\n\n    function springOnFrame(\n      animation: InnerSpringAnimation,\n      now: Timestamp\n    ): boolean {\n      const { toValue, startTimestamp, current } = animation;\n\n      const timeFromStart = now - startTimestamp;\n\n      if (config.useDuration && timeFromStart >= config.duration) {\n        animation.current = toValue;\n\n        // clear lastTimestamp to avoid using stale value by the next spring animation that starts after this one\n        animation.lastTimestamp = 0;\n        return true;\n      }\n\n      if (config.configIsInvalid) {\n        // We don't animate wrong config\n        if (config.useDuration) return false;\n        else {\n          animation.current = toValue;\n          animation.lastTimestamp = 0;\n          return true;\n        }\n      }\n      const { lastTimestamp, velocity } = animation;\n\n      const deltaTime = Math.min(now - lastTimestamp, 64);\n      animation.lastTimestamp = now;\n\n      const t = deltaTime / 1000;\n      const v0 = -velocity;\n      const x0 = toValue - current;\n\n      const { zeta, omega0, omega1 } = animation;\n\n      const { position: newPosition, velocity: newVelocity } =\n        zeta < 1\n          ? underDampedSpringCalculations(animation, {\n              zeta,\n              v0,\n              x0,\n              omega0,\n              omega1,\n              t,\n            })\n          : criticallyDampedSpringCalculations(animation, {\n              v0,\n              x0,\n              omega0,\n              t,\n            });\n\n      animation.current = newPosition;\n      animation.velocity = newVelocity;\n\n      const { isOvershooting, isVelocity, isDisplacement } =\n        isAnimationTerminatingCalculation(animation, config);\n\n      const springIsNotInMove =\n        isOvershooting || (isVelocity && isDisplacement);\n\n      if (!config.useDuration && springIsNotInMove) {\n        animation.velocity = 0;\n        animation.current = toValue;\n        // clear lastTimestamp to avoid using stale value by the next spring animation that starts after this one\n        animation.lastTimestamp = 0;\n        return true;\n      }\n\n      return false;\n    }\n\n    function isTriggeredTwice(\n      previousAnimation: SpringAnimation | undefined,\n      animation: SpringAnimation\n    ) {\n      return (\n        previousAnimation?.startTimestamp &&\n        previousAnimation?.toValue === animation.toValue &&\n        previousAnimation?.duration === animation.duration &&\n        previousAnimation?.dampingRatio === animation.dampingRatio\n      );\n    }\n\n    function onStart(\n      animation: SpringAnimation,\n      value: number,\n      now: Timestamp,\n      previousAnimation: SpringAnimation | undefined\n    ): void {\n      animation.current = value;\n      animation.startValue = value;\n\n      let mass = config.mass;\n      const triggeredTwice = isTriggeredTwice(previousAnimation, animation);\n\n      const duration = config.duration;\n\n      const x0 = triggeredTwice\n        ? // If animation is triggered twice we want to continue the previous animation\n          // form the previous starting point\n          (previousAnimation?.startValue as number)\n        : Number(animation.toValue) - value;\n\n      if (previousAnimation) {\n        animation.velocity =\n          (triggeredTwice\n            ? previousAnimation?.velocity\n            : previousAnimation?.velocity + config.velocity) || 0;\n      } else {\n        animation.velocity = config.velocity || 0;\n      }\n\n      if (triggeredTwice) {\n        animation.zeta = previousAnimation?.zeta || 0;\n        animation.omega0 = previousAnimation?.omega0 || 0;\n        animation.omega1 = previousAnimation?.omega1 || 0;\n      } else {\n        if (config.useDuration) {\n          const acutalDuration = triggeredTwice\n            ? // If animation is triggered twice we want to continue the previous animation\n              // so we need to include the time that already elapsed\n              duration -\n              ((previousAnimation?.lastTimestamp || 0) -\n                (previousAnimation?.startTimestamp || 0))\n            : duration;\n\n          config.duration = acutalDuration;\n          mass = calcuateNewMassToMatchDuration(x0, config, animation.velocity);\n        }\n\n        const { zeta, omega0, omega1 } = initialCalculations(mass, config);\n        animation.zeta = zeta;\n        animation.omega0 = omega0;\n        animation.omega1 = omega1;\n      }\n\n      animation.lastTimestamp = previousAnimation?.lastTimestamp || now;\n\n      animation.startTimestamp = triggeredTwice\n        ? previousAnimation?.startTimestamp || now\n        : now;\n    }\n\n    return {\n      onFrame: springOnFrame,\n      onStart,\n      toValue,\n      velocity: config.velocity || 0,\n      current: toValue,\n      startValue: 0,\n      callback,\n      lastTimestamp: 0,\n      startTimestamp: 0,\n      zeta: 0,\n      omega0: 0,\n      omega1: 0,\n    } as SpringAnimation;\n  });\n}\n"],"mappings":"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"}