910e0660f97e07e50bca916bf1dc4939
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withReanimatedTimer = exports.setUpTests = exports.getAnimatedStyle = exports.advanceAnimationByTime = exports.advanceAnimationByFrame = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _PlatformChecker = require("./PlatformChecker");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var config = {
  fps: 60
};
var isAnimatedStyle = function isAnimatedStyle(style) {
  return !!style.animatedStyle;
};
var getAnimatedStyleFromObject = function getAnimatedStyleFromObject(style) {
  return style.animatedStyle.current.value;
};
var getCurrentStyle = function getCurrentStyle(received) {
  var styleObject = received.props.style;
  var currentStyle = {};
  if (Array.isArray(styleObject)) {
    received.props.style.forEach(function (style) {
      if (isAnimatedStyle(style)) {
        currentStyle = _objectSpread(_objectSpread({}, currentStyle), getAnimatedStyleFromObject(style));
      } else {
        currentStyle = _objectSpread(_objectSpread({}, currentStyle), style);
      }
    });
  } else {
    if (isAnimatedStyle(styleObject)) {
      currentStyle = getAnimatedStyleFromObject(styleObject);
    } else {
      currentStyle = _objectSpread(_objectSpread({}, styleObject), received.props.animatedStyle.value);
    }
  }
  return currentStyle;
};
var checkEqual = function checkEqual(currentStyle, expectStyle) {
  if (Array.isArray(expectStyle)) {
    if (expectStyle.length !== currentStyle.length) return false;
    for (var i = 0; i < currentStyle.length; i++) {
      if (!checkEqual(currentStyle[i], expectStyle[i])) {
        return false;
      }
    }
  } else if (typeof currentStyle === 'object' && currentStyle) {
    for (var property in expectStyle) {
      if (!checkEqual(currentStyle[property], expectStyle[property])) {
        return false;
      }
    }
  } else {
    return currentStyle === expectStyle;
  }
  return true;
};
var findStyleDiff = function findStyleDiff(current, expect, shouldMatchAllProps) {
  var diffs = [];
  var isEqual = true;
  for (var property in expect) {
    if (!checkEqual(current[property], expect[property])) {
      isEqual = false;
      diffs.push({
        property: property,
        current: current[property],
        expect: expect[property]
      });
    }
  }
  if (shouldMatchAllProps && Object.keys(current).length !== Object.keys(expect).length) {
    isEqual = false;
    for (var _property in current) {
      if (expect[_property] === undefined) {
        diffs.push({
          property: _property,
          current: current[_property],
          expect: expect[_property]
        });
      }
    }
  }
  return {
    isEqual: isEqual,
    diffs: diffs
  };
};
var compareStyle = function compareStyle(received, expectedStyle, config) {
  if (!received.props.style) {
    return {
      message: function (_message) {
        function message() {
          return _message.apply(this, arguments);
        }
        message.toString = function () {
          return _message.toString();
        };
        return message;
      }(function () {
        return message;
      }),
      pass: false
    };
  }
  var shouldMatchAllProps = config.shouldMatchAllProps;
  var currentStyle = getCurrentStyle(received);
  var _findStyleDiff = findStyleDiff(currentStyle, expectedStyle, shouldMatchAllProps),
    isEqual = _findStyleDiff.isEqual,
    diffs = _findStyleDiff.diffs;
  if (isEqual) {
    return {
      message: function message() {
        return 'ok';
      },
      pass: true
    };
  }
  var currentStyleStr = JSON.stringify(currentStyle);
  var expectedStyleStr = JSON.stringify(expectedStyle);
  var differences = diffs.map(function (diff) {
    return `- '${diff.property}' should be ${JSON.stringify(diff.expect)}, but is ${JSON.stringify(diff.current)}`;
  }).join('\n');
  return {
    message: function message() {
      return `Expected: ${expectedStyleStr}\nReceived: ${currentStyleStr}\n\nDifferences:\n${differences}`;
    },
    pass: false
  };
};
var frameTime = 1000 / config.fps;
var beforeTest = function beforeTest() {
  jest.useFakeTimers();
};
var afterTest = function afterTest() {
  jest.runOnlyPendingTimers();
  jest.useRealTimers();
};
var withReanimatedTimer = function withReanimatedTimer(animationTest) {
  console.warn('This method is deprecated, you should define your own before and after test hooks to enable jest.useFakeTimers(). Check out the documentation for details on testing');
  beforeTest();
  animationTest();
  afterTest();
};
exports.withReanimatedTimer = withReanimatedTimer;
var advanceAnimationByTime = function advanceAnimationByTime() {
  var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : frameTime;
  console.warn('This method is deprecated, use jest.advanceTimersByTime directly');
  jest.advanceTimersByTime(time);
  jest.runOnlyPendingTimers();
};
exports.advanceAnimationByTime = advanceAnimationByTime;
var advanceAnimationByFrame = function advanceAnimationByFrame(count) {
  console.warn('This method is deprecated, use jest.advanceTimersByTime directly');
  jest.advanceTimersByTime(count * frameTime);
  jest.runOnlyPendingTimers();
};
exports.advanceAnimationByFrame = advanceAnimationByFrame;
var requireFunction = (0, _PlatformChecker.isJest)() ? require : function () {
  throw new Error('[Reanimated] setUpTests() is available only in Jest environment');
};
var setUpTests = function setUpTests() {
  var userConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var expect = global.expect;
  if (expect === undefined) {
    var expectModule = requireFunction('expect');
    expect = expectModule;
    if (typeof expect === 'object') {
      var jestGlobals = requireFunction('@jest/globals');
      expect = jestGlobals.expect;
    }
    if (expect === undefined || expect.extend === undefined) {
      expect = expectModule.default;
    }
  }
  frameTime = Math.round(1000 / config.fps);
  config = _objectSpread(_objectSpread({}, config), userConfig);
  expect.extend({
    toHaveAnimatedStyle: function toHaveAnimatedStyle(received, expectedStyle) {
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return compareStyle(received, expectedStyle, config);
    }
  });
};
exports.setUpTests = setUpTests;
var getAnimatedStyle = function getAnimatedStyle(received) {
  return getCurrentStyle(received);
};
exports.getAnimatedStyle = getAnimatedStyle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,