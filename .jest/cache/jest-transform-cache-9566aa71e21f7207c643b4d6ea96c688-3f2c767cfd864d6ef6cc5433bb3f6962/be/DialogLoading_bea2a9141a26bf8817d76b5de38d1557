b951461d51a36667397e68b13dcc98e6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DialogLoading = function DialogLoading(_ref) {
  var loadingStyle = _ref.loadingStyle,
    loadingProps = _ref.loadingProps,
    theme = _ref.theme;
  var _a, _b;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.loadingView,
    children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, _objectSpread({
      style: _reactNative.StyleSheet.flatten([styles.loading, loadingStyle]),
      color: (_a = loadingProps.color) !== null && _a !== void 0 ? _a : theme.colors.primary,
      size: (_b = loadingProps.size) !== null && _b !== void 0 ? _b : 'large',
      testID: "Dialog__Loading"
    }, loadingProps))
  });
};
DialogLoading.defaultProps = {
  loadingProps: {
    size: 'large'
  }
};
var styles = _reactNative.StyleSheet.create({
  loading: {
    marginVertical: 20
  },
  loadingView: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center'
  }
});
var _default = (0, _config.withTheme)(DialogLoading, 'DialogLoading');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfanN4UnVudGltZSIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIkRpYWxvZ0xvYWRpbmciLCJfcmVmIiwibG9hZGluZ1N0eWxlIiwibG9hZGluZ1Byb3BzIiwidGhlbWUiLCJfYSIsIl9iIiwianN4IiwiVmlldyIsInN0eWxlIiwic3R5bGVzIiwibG9hZGluZ1ZpZXciLCJjaGlsZHJlbiIsIkFjdGl2aXR5SW5kaWNhdG9yIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJsb2FkaW5nIiwiY29sb3IiLCJjb2xvcnMiLCJwcmltYXJ5Iiwic2l6ZSIsInRlc3RJRCIsImRlZmF1bHRQcm9wcyIsImNyZWF0ZSIsIm1hcmdpblZlcnRpY2FsIiwiZmxleERpcmVjdGlvbiIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsIl9kZWZhdWx0Iiwid2l0aFRoZW1lIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkRpYWxvZ0xvYWRpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN0eWxlU2hlZXQsIEFjdGl2aXR5SW5kaWNhdG9yLCBWaWV3LCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuY29uc3QgRGlhbG9nTG9hZGluZyA9ICh7IGxvYWRpbmdTdHlsZSwgbG9hZGluZ1Byb3BzLCB0aGVtZSwgfSkgPT4ge1xuICAgIHZhciBfYSwgX2I7XG4gICAgcmV0dXJuICg8VmlldyBzdHlsZT17c3R5bGVzLmxvYWRpbmdWaWV3fT5cbiAgICAgIDxBY3Rpdml0eUluZGljYXRvciBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtzdHlsZXMubG9hZGluZywgbG9hZGluZ1N0eWxlXSl9IGNvbG9yPXsoX2EgPSBsb2FkaW5nUHJvcHMuY29sb3IpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoZW1lLmNvbG9ycy5wcmltYXJ5fSBzaXplPXsoX2IgPSBsb2FkaW5nUHJvcHMuc2l6ZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJ2xhcmdlJ30gdGVzdElEPVwiRGlhbG9nX19Mb2FkaW5nXCIgey4uLmxvYWRpbmdQcm9wc30vPlxuICAgIDwvVmlldz4pO1xufTtcbkRpYWxvZ0xvYWRpbmcuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmdQcm9wczogeyBzaXplOiAnbGFyZ2UnIH0sXG59O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIGxvYWRpbmc6IHtcbiAgICAgICAgbWFyZ2luVmVydGljYWw6IDIwLFxuICAgIH0sXG4gICAgbG9hZGluZ1ZpZXc6IHtcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgfSxcbn0pO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKERpYWxvZ0xvYWRpbmcsICdEaWFsb2dMb2FkaW5nJyk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFF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