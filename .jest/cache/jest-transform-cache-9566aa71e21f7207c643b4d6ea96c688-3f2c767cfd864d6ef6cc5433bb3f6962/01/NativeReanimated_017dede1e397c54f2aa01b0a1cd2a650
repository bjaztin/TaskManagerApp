6ac6a657f65be3530f031ce014eea10e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeReanimated = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _reactNative = require("react-native");
var _checkCppVersion = require("../platform-specific/checkCppVersion");
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var NativeReanimated = function () {
  function NativeReanimated() {
    (0, _classCallCheck2.default)(this, NativeReanimated);
    var native = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    _defineProperty(this, "native", void 0);
    _defineProperty(this, "InnerNativeModule", void 0);
    if (global.__reanimatedModuleProxy === undefined && native) {
      var ReanimatedModule = _reactNative.NativeModules.ReanimatedModule;
      ReanimatedModule === null || ReanimatedModule === void 0 ? void 0 : ReanimatedModule.installTurboModule();
    }
    this.InnerNativeModule = global.__reanimatedModuleProxy;
    this.native = native;
    if (native) {
      if (this.InnerNativeModule === undefined) {
        throw new Error(`[Reanimated] The native part of Reanimated doesn't seem to be initialized. This could be caused by\n\
  - not rebuilding the app after installing or upgrading Reanimated\n\
  - trying to run Reanimated on an unsupported platform\n\
  - running in a brownfield app without manually initializing the native library`);
      }
      (0, _checkCppVersion.checkCppVersion)();
    }
  }
  (0, _createClass2.default)(NativeReanimated, [{
    key: "installCoreFunctions",
    value: function installCoreFunctions(callGuard, valueUnpacker) {
      return this.InnerNativeModule.installCoreFunctions(callGuard, valueUnpacker);
    }
  }, {
    key: "makeShareableClone",
    value: function makeShareableClone(value, shouldPersistRemote) {
      return this.InnerNativeModule.makeShareableClone(value, shouldPersistRemote);
    }
  }, {
    key: "makeSynchronizedDataHolder",
    value: function makeSynchronizedDataHolder(valueRef) {
      return this.InnerNativeModule.makeSynchronizedDataHolder(valueRef);
    }
  }, {
    key: "getDataSynchronously",
    value: function getDataSynchronously(ref) {
      return this.InnerNativeModule.getDataSynchronously(ref);
    }
  }, {
    key: "updateDataSynchronously",
    value: function updateDataSynchronously(ref, value) {
      this.InnerNativeModule.updateDataSynchronously(ref, value);
    }
  }, {
    key: "scheduleOnUI",
    value: function scheduleOnUI(shareable) {
      return this.InnerNativeModule.scheduleOnUI(shareable);
    }
  }, {
    key: "registerSensor",
    value: function registerSensor(sensorType, interval, iosReferenceFrame, handler) {
      return this.InnerNativeModule.registerSensor(sensorType, interval, iosReferenceFrame, handler);
    }
  }, {
    key: "unregisterSensor",
    value: function unregisterSensor(sensorId) {
      return this.InnerNativeModule.unregisterSensor(sensorId);
    }
  }, {
    key: "registerEventHandler",
    value: function registerEventHandler(eventHash, eventHandler) {
      return this.InnerNativeModule.registerEventHandler(eventHash, eventHandler);
    }
  }, {
    key: "unregisterEventHandler",
    value: function unregisterEventHandler(id) {
      return this.InnerNativeModule.unregisterEventHandler(id);
    }
  }, {
    key: "getViewProp",
    value: function getViewProp(viewTag, propName, callback) {
      return this.InnerNativeModule.getViewProp(viewTag, propName, callback);
    }
  }, {
    key: "configureLayoutAnimation",
    value: function configureLayoutAnimation(viewTag, type, sharedTransitionTag, config) {
      this.InnerNativeModule.configureLayoutAnimation(viewTag, type, sharedTransitionTag, config);
    }
  }, {
    key: "enableLayoutAnimations",
    value: function enableLayoutAnimations(flag) {
      this.InnerNativeModule.enableLayoutAnimations(flag);
    }
  }, {
    key: "configureProps",
    value: function configureProps(uiProps, nativeProps) {
      this.InnerNativeModule.configureProps(uiProps, nativeProps);
    }
  }, {
    key: "subscribeForKeyboardEvents",
    value: function subscribeForKeyboardEvents(handler, isStatusBarTranslucent) {
      return this.InnerNativeModule.subscribeForKeyboardEvents(handler, isStatusBarTranslucent);
    }
  }, {
    key: "unsubscribeFromKeyboardEvents",
    value: function unsubscribeFromKeyboardEvents(listenerId) {
      this.InnerNativeModule.unsubscribeFromKeyboardEvents(listenerId);
    }
  }]);
  return NativeReanimated;
}();
exports.NativeReanimated = NativeReanimated;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,