8cdbef1030f96bef18439502aaf81c89
_getJestObj().mock("../../firebase", function () {
  return {
    auth: {
      currentUser: {
        uid: "testUserId"
      }
    },
    db: {}
  };
});
_getJestObj().mock("../../src/utilities/Notification", function () {
  return {
    scheduleNotification: jest.fn()
  };
});
_getJestObj().mock("expo-haptics", function () {
  return {
    impactAsync: jest.fn(),
    ImpactFeedbackStyle: {
      Heavy: "Heavy"
    }
  };
});
_getJestObj().mock("firebase/firestore", function () {
  return {
    collection: jest.fn(),
    doc: jest.fn(),
    updateDoc: jest.fn().mockResolvedValue({}),
    addDoc: jest.fn().mockResolvedValue({
      id: "testDocumentId"
    })
  };
});
_getJestObj().mock("expo-calendar", function () {
  return {
    requestCalendarPermissionsAsync: jest.fn().mockResolvedValue({
      status: "granted"
    }),
    getCalendarsAsync: jest.fn().mockResolvedValue([{
      id: "1",
      allowsModifications: true,
      type: "local"
    }]),
    createEventAsync: jest.fn(),
    deleteEventAsync: jest.fn(),
    EntityTypes: {
      EVENT: "event"
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _LogicFunctions = require("../../src/utilities/LogicFunctions");
var _firestore = require("firebase/firestore");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("retrieveTask", function () {
  it("should retrieve tasks from Firestore", (0, _asyncToGenerator2.default)(function* () {
    _getJestObj().mock("firebase/firestore", function () {
      return {
        doc: function doc() {
          return {};
        },
        collection: jest.fn()
      };
    });
    var setTaskItems = jest.fn();
    var querySnapshot = {
      forEach: function forEach(callback) {
        callback({
          id: "1",
          data: function data() {
            return {
              task: "Task 1",
              selectedEndTime: {
                toDate: function toDate() {
                  return new Date();
                }
              },
              selectedDate: new Date(),
              note: "Note 1",
              url: "URL 1",
              selectedImage: "Image 1",
              eventId: "EventId 1"
            };
          }
        });
      }
    };
    var getDocs = jest.fn().mockResolvedValue(querySnapshot);
    var collection = jest.fn().mockReturnValue({
      getDocs: getDocs
    });
    yield (0, _LogicFunctions.retrieveTask)({
      setTaskItems: setTaskItems
    });
    expect(setTaskItems).toBeDefined();
  }));
});
describe("handleToggleComplete", function () {
  it("should update Firestore document and local state", (0, _asyncToGenerator2.default)(function* () {
    var documentId = "testDocumentId";
    var setTaskItems = jest.fn();
    var isComplete = true;
    var userTasksRef = jest.fn();
    var collection = jest.fn().mockReturnValue({
      doc: userTasksRef
    });
    var db = {
      collection: collection,
      updateDoc: jest.fn().mockResolvedValue({})
    };
    yield (0, _LogicFunctions.handleToggleComplete)(documentId, setTaskItems, db, isComplete);
    expect(db.collection).toBeDefined();
    expect(db.updateDoc).toBeDefined();
    expect(setTaskItems).toBeDefined();
  }));
});
describe("handleAddTask", function () {
  test("Add a task", (0, _asyncToGenerator2.default)(function* () {
    var taskItems = [];
    var setTaskItems = jest.fn();
    var noteTaskItems = [];
    var urlTaskItems = [];
    var dateTaskItems = [];
    var timeTaskItems = [];
    var endTimeTaskItems = [];
    var imageTaskItems = [];
    var setNoteTaskItems = jest.fn();
    var setUrlTaskItems = jest.fn();
    var setDateTaskItems = jest.fn();
    var setTimeTaskItems = jest.fn();
    var setEndTimeTaskItems = jest.fn();
    var setImageTaskItems = jest.fn();
    var setCompletedTasks = jest.fn();
    var setTask = jest.fn();
    var setNote = jest.fn();
    var setUrl = jest.fn();
    var setSelectedImage = jest.fn();
    var setIsOpen = jest.fn();
    var bottomSheetModalRef = {
      current: {
        dismiss: jest.fn()
      }
    };
    var task = "Test Task";
    var note = "Test Note";
    var url = "Test URL";
    var selectedDate = new Date();
    var selectedTime = new Date();
    var selectedEndTime = new Date(selectedTime.getTime() + 3600 * 1000);
    var selectedImage = "Test Image";
    var completedTasks = [];
    var db = {
      collection: jest.fn().mockReturnThis(),
      addDoc: jest.fn().mockResolvedValue({})
    };
    var auth = {};
    yield (0, _LogicFunctions.handleAddTask)(taskItems, setTaskItems, noteTaskItems, urlTaskItems, dateTaskItems, timeTaskItems, endTimeTaskItems, imageTaskItems, setNoteTaskItems, setUrlTaskItems, setDateTaskItems, setTimeTaskItems, setEndTimeTaskItems, setImageTaskItems, setCompletedTasks, setTask, setNote, setUrl, setSelectedImage, task, note, url, selectedDate, selectedTime, selectedEndTime, selectedImage, completedTasks, setIsOpen, bottomSheetModalRef, db, auth);
    expect(setTaskItems).toHaveBeenCalledWith([expect.objectContaining({
      task: "Test Task",
      note: "Test Note",
      url: "Test URL",
      selectedDate: expect.any(Date),
      selectedTime: expect.any(Date),
      selectedEndTime: expect.any(Date),
      selectedImage: "Test Image"
    })]);
    expect(setTask).toHaveBeenCalledWith("");
    expect(setNote).toHaveBeenCalledWith("");
    expect(setUrl).toHaveBeenCalledWith("");
    expect(setSelectedImage).toHaveBeenCalledWith("");
    expect(setIsOpen).toHaveBeenCalledWith(false);
    expect(bottomSheetModalRef.current.dismiss).toHaveBeenCalled();
    expect(db.collection).toBeDefined();
    expect(db.addDoc).toBeDefined();
  }));
});
describe("handleDeleteTask", function () {
  test("Delete a task", (0, _asyncToGenerator2.default)(function* () {
    var taskToDelete = {
      id: "testTaskId",
      eventId: "testEventId"
    };
    var setTaskItems = jest.fn();
    var db = {
      collection: jest.fn().mockReturnValue({
        doc: jest.fn().mockReturnValue({
          id: "testTaskId"
        })
      }),
      deleteDoc: jest.fn().mockResolvedValue({})
    };
    var auth = {};
    yield (0, _LogicFunctions.handleDeleteTask)(taskToDelete, db, auth, setTaskItems);
    expect(db.collection).toBeDefined();
    expect(db.deleteDoc).toBeDefined();
    expect(setTaskItems).toBeDefined();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,