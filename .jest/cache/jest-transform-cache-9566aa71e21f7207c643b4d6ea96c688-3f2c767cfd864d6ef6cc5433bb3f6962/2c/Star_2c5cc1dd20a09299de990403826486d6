9c71880dccc07a27a0da6c3636bc1124
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var STAR_IMAGE = require("../images/airbnb-star.png");
var STAR_SELECTED_IMAGE = require("../images/airbnb-star-selected.png");
var STAR_SIZE = 40;
var Star = function Star(props) {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    selected = _useState2[0],
    setSelected = _useState2[1];
  var springValue = new _reactNative.Animated.Value(1);
  var spring = function spring() {
    var position = props.position,
      starSelectedInPosition = props.starSelectedInPosition;
    springValue.setValue(1.2);
    _reactNative.Animated.spring(springValue, {
      toValue: 1,
      friction: 2,
      tension: 1,
      useNativeDriver: true
    }).start();
    setSelected(!selected);
    starSelectedInPosition(position);
  };
  var starImage = props.starImage,
    fill = props.fill,
    size = props.size,
    selectedColor = props.selectedColor,
    unSelectedColor = props.unSelectedColor,
    isDisabled = props.isDisabled,
    starStyle = props.starStyle;
  var starSource = fill && selectedColor === null ? STAR_SELECTED_IMAGE : starImage;
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
    activeOpacity: 1,
    onPress: spring,
    disabled: isDisabled,
    children: (0, _jsxRuntime.jsx)(_reactNative.Animated.Image, {
      source: starSource,
      style: [styles.starStyle, {
        tintColor: fill && selectedColor ? selectedColor : unSelectedColor,
        width: size || STAR_SIZE,
        height: size || STAR_SIZE,
        transform: [{
          scale: springValue
        }]
      }, starStyle]
    })
  });
};
Star.defaultProps = {
  starImage: STAR_IMAGE,
  selectedColor: "#f1c40f",
  unSelectedColor: "#BDC3C7"
};
var _default = Star;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  starStyle: {
    margin: 3
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJTVEFSX0lNQUdFIiwiU1RBUl9TRUxFQ1RFRF9JTUFHRSIsIlNUQVJfU0laRSIsIlN0YXIiLCJwcm9wcyIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsInNlbGVjdGVkIiwic2V0U2VsZWN0ZWQiLCJzcHJpbmdWYWx1ZSIsIkFuaW1hdGVkIiwiVmFsdWUiLCJzcHJpbmciLCJwb3NpdGlvbiIsInN0YXJTZWxlY3RlZEluUG9zaXRpb24iLCJzZXRWYWx1ZSIsInRvVmFsdWUiLCJmcmljdGlvbiIsInRlbnNpb24iLCJ1c2VOYXRpdmVEcml2ZXIiLCJzdGFydCIsInN0YXJJbWFnZSIsImZpbGwiLCJzaXplIiwic2VsZWN0ZWRDb2xvciIsInVuU2VsZWN0ZWRDb2xvciIsImlzRGlzYWJsZWQiLCJzdGFyU3R5bGUiLCJzdGFyU291cmNlIiwianN4IiwiVG91Y2hhYmxlT3BhY2l0eSIsImFjdGl2ZU9wYWNpdHkiLCJvblByZXNzIiwiZGlzYWJsZWQiLCJjaGlsZHJlbiIsIkltYWdlIiwic291cmNlIiwic3R5bGUiLCJzdHlsZXMiLCJ0aW50Q29sb3IiLCJ3aWR0aCIsImhlaWdodCIsInRyYW5zZm9ybSIsInNjYWxlIiwiZGVmYXVsdFByb3BzIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsIm1hcmdpbiJdLCJzb3VyY2VzIjpbIlN0YXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBBbmltYXRlZCwgVG91Y2hhYmxlT3BhY2l0eSB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmNvbnN0IFNUQVJfSU1BR0UgPSByZXF1aXJlKFwiLi4vaW1hZ2VzL2FpcmJuYi1zdGFyLnBuZ1wiKTtcbmNvbnN0IFNUQVJfU0VMRUNURURfSU1BR0UgPSByZXF1aXJlKFwiLi4vaW1hZ2VzL2FpcmJuYi1zdGFyLXNlbGVjdGVkLnBuZ1wiKTtcbmNvbnN0IFNUQVJfU0laRSA9IDQwO1xuY29uc3QgU3RhciA9IHByb3BzID0+IHtcbiAgICBjb25zdCBbc2VsZWN0ZWQsIHNldFNlbGVjdGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBzcHJpbmdWYWx1ZSA9IG5ldyBBbmltYXRlZC5WYWx1ZSgxKTtcbiAgICBjb25zdCBzcHJpbmcgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgcG9zaXRpb24sIHN0YXJTZWxlY3RlZEluUG9zaXRpb24gfSA9IHByb3BzO1xuICAgICAgICBzcHJpbmdWYWx1ZS5zZXRWYWx1ZSgxLjIpO1xuICAgICAgICBBbmltYXRlZC5zcHJpbmcoc3ByaW5nVmFsdWUsIHtcbiAgICAgICAgICAgIHRvVmFsdWU6IDEsXG4gICAgICAgICAgICBmcmljdGlvbjogMixcbiAgICAgICAgICAgIHRlbnNpb246IDEsXG4gICAgICAgICAgICB1c2VOYXRpdmVEcml2ZXI6IHRydWVcbiAgICAgICAgfSkuc3RhcnQoKTtcbiAgICAgICAgc2V0U2VsZWN0ZWQoIXNlbGVjdGVkKTtcbiAgICAgICAgc3RhclNlbGVjdGVkSW5Qb3NpdGlvbihwb3NpdGlvbik7XG4gICAgfTtcbiAgICBjb25zdCB7IHN0YXJJbWFnZSwgZmlsbCwgc2l6ZSwgc2VsZWN0ZWRDb2xvciwgdW5TZWxlY3RlZENvbG9yLCBpc0Rpc2FibGVkLCBzdGFyU3R5bGUgfSA9IHByb3BzO1xuICAgIGNvbnN0IHN0YXJTb3VyY2UgPSBmaWxsICYmIHNlbGVjdGVkQ29sb3IgPT09IG51bGwgPyBTVEFSX1NFTEVDVEVEX0lNQUdFIDogc3RhckltYWdlO1xuICAgIHJldHVybiAoPFRvdWNoYWJsZU9wYWNpdHkgYWN0aXZlT3BhY2l0eT17MX0gb25QcmVzcz17c3ByaW5nfSBkaXNhYmxlZD17aXNEaXNhYmxlZH0+XG4gICAgICA8QW5pbWF0ZWQuSW1hZ2Ugc291cmNlPXtzdGFyU291cmNlfSBzdHlsZT17W1xuICAgICAgICAgICAgc3R5bGVzLnN0YXJTdHlsZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aW50Q29sb3I6IGZpbGwgJiYgc2VsZWN0ZWRDb2xvciA/IHNlbGVjdGVkQ29sb3IgOiB1blNlbGVjdGVkQ29sb3IsXG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemUgfHwgU1RBUl9TSVpFLFxuICAgICAgICAgICAgICAgIGhlaWdodDogc2l6ZSB8fCBTVEFSX1NJWkUsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBbeyBzY2FsZTogc3ByaW5nVmFsdWUgfV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGFyU3R5bGVcbiAgICAgICAgXX0vPlxuICAgIDwvVG91Y2hhYmxlT3BhY2l0eT4pO1xufTtcblN0YXIuZGVmYXVsdFByb3BzID0ge1xuICAgIHN0YXJJbWFnZTogU1RBUl9JTUFHRSxcbiAgICBzZWxlY3RlZENvbG9yOiBcIiNmMWM0MGZcIixcbiAgICB1blNlbGVjdGVkQ29sb3I6IFwiI0JEQzNDN1wiXG59O1xuZXhwb3J0IGRlZmF1bHQgU3RhcjtcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBzdGFyU3R5bGU6IHtcbiAg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