f5bb7352e358a3599747fe81c0050592
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _range = _interopRequireDefault(require("lodash/range"));
var _times = _interopRequireDefault(require("lodash/times"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _constants = _interopRequireDefault(require("../commons/constants"));
var _presenter = require("./helpers/presenter");
var _Packer = require("./Packer");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var dimensionWidth = _constants.default.screenWidth;
var EVENT_DIFF = 20;
var TimelineHours = function TimelineHours(props) {
  var format24h = props.format24h,
    _props$start = props.start,
    start = _props$start === void 0 ? 0 : _props$start,
    _props$end = props.end,
    end = _props$end === void 0 ? 24 : _props$end,
    date = props.date,
    unavailableHours = props.unavailableHours,
    unavailableHoursColor = props.unavailableHoursColor,
    styles = props.styles,
    onBackgroundLongPress = props.onBackgroundLongPress,
    onBackgroundLongPressOut = props.onBackgroundLongPressOut,
    width = props.width,
    _props$numberOfDays = props.numberOfDays,
    numberOfDays = _props$numberOfDays === void 0 ? 1 : _props$numberOfDays,
    _props$timelineLeftIn = props.timelineLeftInset,
    timelineLeftInset = _props$timelineLeftIn === void 0 ? 0 : _props$timelineLeftIn;
  var lastLongPressEventTime = (0, _react.useRef)();
  var offset = _Packer.HOUR_BLOCK_HEIGHT;
  var unavailableHoursBlocks = (0, _Packer.buildUnavailableHoursBlocks)(unavailableHours, {
    dayStart: start,
    dayEnd: end
  });
  var hours = (0, _react.useMemo)(function () {
    return (0, _range.default)(start, end + 1).map(function (i) {
      var timeText;
      if (i === start) {
        timeText = '';
      } else if (i < 12) {
        timeText = !format24h ? `${i} AM` : `${i}:00`;
      } else if (i === 12) {
        timeText = !format24h ? `${i} PM` : `${i}:00`;
      } else if (i === 24) {
        timeText = !format24h ? '12 AM' : '23:59';
      } else {
        timeText = !format24h ? `${i - 12} PM` : `${i}:00`;
      }
      return {
        timeText: timeText,
        time: i
      };
    });
  }, [start, end, format24h]);
  var handleBackgroundPress = (0, _react.useCallback)(function (event) {
    var yPosition = event.nativeEvent.locationY;
    var xPosition = event.nativeEvent.locationX;
    var _calcTimeByPosition = (0, _presenter.calcTimeByPosition)(yPosition, _Packer.HOUR_BLOCK_HEIGHT),
      hour = _calcTimeByPosition.hour,
      minutes = _calcTimeByPosition.minutes;
    var dateByPosition = (0, _presenter.calcDateByPosition)(xPosition, timelineLeftInset, numberOfDays, date);
    lastLongPressEventTime.current = {
      hour: hour,
      minutes: minutes,
      date: dateByPosition
    };
    var timeString = (0, _presenter.buildTimeString)(hour, minutes, dateByPosition);
    onBackgroundLongPress == null ? void 0 : onBackgroundLongPress(timeString, lastLongPressEventTime.current);
  }, [onBackgroundLongPress, date]);
  var handlePressOut = (0, _react.useCallback)(function () {
    if (lastLongPressEventTime.current) {
      var _lastLongPressEventTi = lastLongPressEventTime.current,
        hour = _lastLongPressEventTi.hour,
        minutes = _lastLongPressEventTi.minutes,
        _date = _lastLongPressEventTi.date;
      var timeString = (0, _presenter.buildTimeString)(hour, minutes, _date);
      onBackgroundLongPressOut == null ? void 0 : onBackgroundLongPressOut(timeString, lastLongPressEventTime.current);
      lastLongPressEventTime.current = undefined;
    }
  }, [onBackgroundLongPressOut, date]);
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableWithoutFeedback, {
      onLongPress: handleBackgroundPress,
      onPressOut: handlePressOut,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _reactNative.StyleSheet.absoluteFillObject
      })
    }), unavailableHoursBlocks.map(function (block, index) {
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.unavailableHoursBlock, block, unavailableHoursColor ? {
          backgroundColor: unavailableHoursColor
        } : undefined, {
          left: timelineLeftInset
        }]
      }, index);
    }), hours.map(function (_ref, index) {
      var timeText = _ref.timeText,
        time = _ref.time;
      return (0, _jsxRuntime.jsxs)(_react.default.Fragment, {
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.timeLabel, {
            top: offset * index - 6,
            width: timelineLeftInset - 16
          }],
          children: timeText
        }, `timeLabel${time}`), time === start ? null : (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.line, {
            top: offset * index,
            width: dimensionWidth - EVENT_DIFF,
            left: timelineLeftInset - 16
          }]
        }, `line${time}`), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.line, {
            top: offset * (index + 0.5),
            width: dimensionWidth - EVENT_DIFF,
            left: timelineLeftInset - 16
          }]
        }, `lineHalf${time}`)]
      }, time);
    }), (0, _times.default)(numberOfDays, function (index) {
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.verticalLine, {
          right: (index + 1) * width / numberOfDays
        }]
      }, index);
    })]
  });
};
var _default = _react.default.memo(TimelineHours);
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,