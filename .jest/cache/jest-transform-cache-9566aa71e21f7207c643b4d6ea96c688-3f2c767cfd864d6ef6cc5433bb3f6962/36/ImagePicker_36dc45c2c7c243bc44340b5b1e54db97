be8270fa69382f65b2ec06db9686b78c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  getCameraPermissionsAsync: true,
  getMediaLibraryPermissionsAsync: true,
  requestCameraPermissionsAsync: true,
  requestMediaLibraryPermissionsAsync: true,
  useMediaLibraryPermissions: true,
  useCameraPermissions: true,
  getPendingResultAsync: true,
  launchCameraAsync: true,
  launchImageLibraryAsync: true,
  PermissionStatus: true
};
Object.defineProperty(exports, "PermissionStatus", {
  enumerable: true,
  get: function get() {
    return _expoModulesCore.PermissionStatus;
  }
});
exports.getCameraPermissionsAsync = getCameraPermissionsAsync;
exports.getMediaLibraryPermissionsAsync = getMediaLibraryPermissionsAsync;
exports.getPendingResultAsync = getPendingResultAsync;
exports.launchCameraAsync = launchCameraAsync;
exports.launchImageLibraryAsync = launchImageLibraryAsync;
exports.requestCameraPermissionsAsync = requestCameraPermissionsAsync;
exports.requestMediaLibraryPermissionsAsync = requestMediaLibraryPermissionsAsync;
exports.useMediaLibraryPermissions = exports.useCameraPermissions = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _expoModulesCore = require("expo-modules-core");
var _ExponentImagePicker = _interopRequireDefault(require("./ExponentImagePicker"));
var _ImagePicker = require("./ImagePicker.types");
Object.keys(_ImagePicker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ImagePicker[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ImagePicker[key];
    }
  });
});
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function validateOptions(options) {
  var aspect = options.aspect,
    quality = options.quality,
    videoMaxDuration = options.videoMaxDuration;
  if (aspect != null) {
    var _aspect = (0, _slicedToArray2.default)(aspect, 2),
      x = _aspect[0],
      y = _aspect[1];
    if (x <= 0 || y <= 0) {
      throw new _expoModulesCore.CodedError('ERR_INVALID_ARGUMENT', `Invalid aspect ratio values ${x}:${y}. Provide positive numbers.`);
    }
  }
  if (quality && (quality < 0 || quality > 1)) {
    throw new _expoModulesCore.CodedError('ERR_INVALID_ARGUMENT', `Invalid 'quality' value ${quality}. Provide a value between 0 and 1.`);
  }
  if (videoMaxDuration && videoMaxDuration < 0) {
    throw new _expoModulesCore.CodedError('ERR_INVALID_ARGUMENT', `Invalid 'videoMaxDuration' value ${videoMaxDuration}. Provide a non-negative number.`);
  }
  return options;
}
var DEPRECATED_RESULT_KEYS = ['uri', 'assetId', 'width', 'height', 'type', 'exif', 'base64', 'duration', 'fileName', 'fileSize'];
function mergeDeprecatedResult(result) {
  var _result$assets;
  var firstAsset = result == null ? void 0 : (_result$assets = result.assets) == null ? void 0 : _result$assets[0];
  var deprecatedResult = _objectSpread(_objectSpread({}, result), {}, {
    get cancelled() {
      console.warn('Key "cancelled" in the image picker result is deprecated and will be removed in SDK 48, use "canceled" instead');
      return this.canceled;
    }
  });
  var _loop = function _loop(key) {
    Object.defineProperty(deprecatedResult, key, {
      get: function get() {
        console.warn(`Key "${key}" in the image picker result is deprecated and will be removed in SDK 48, you can access selected assets through the "assets" array instead`);
        return firstAsset == null ? void 0 : firstAsset[key];
      }
    });
  };
  for (var key of DEPRECATED_RESULT_KEYS) {
    _loop(key);
  }
  return deprecatedResult;
}
function getCameraPermissionsAsync() {
  return _getCameraPermissionsAsync.apply(this, arguments);
}
function _getCameraPermissionsAsync() {
  _getCameraPermissionsAsync = (0, _asyncToGenerator2.default)(function* () {
    return _ExponentImagePicker.default.getCameraPermissionsAsync();
  });
  return _getCameraPermissionsAsync.apply(this, arguments);
}
function getMediaLibraryPermissionsAsync() {
  return _getMediaLibraryPermissionsAsync.apply(this, arguments);
}
function _getMediaLibraryPermissionsAsync() {
  _getMediaLibraryPermissionsAsync = (0, _asyncToGenerator2.default)(function* () {
    var writeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    return _ExponentImagePicker.default.getMediaLibraryPermissionsAsync(writeOnly);
  });
  return _getMediaLibraryPermissionsAsync.apply(this, arguments);
}
function requestCameraPermissionsAsync() {
  return _requestCameraPermissionsAsync.apply(this, arguments);
}
function _requestCameraPermissionsAsync() {
  _requestCameraPermissionsAsync = (0, _asyncToGenerator2.default)(function* () {
    return _ExponentImagePicker.default.requestCameraPermissionsAsync();
  });
  return _requestCameraPermissionsAsync.apply(this, arguments);
}
function requestMediaLibraryPermissionsAsync() {
  return _requestMediaLibraryPermissionsAsync.apply(this, arguments);
}
function _requestMediaLibraryPermissionsAsync() {
  _requestMediaLibraryPermissionsAsync = (0, _asyncToGenerator2.default)(function* () {
    var writeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var imagePickerMethod = _ExponentImagePicker.default.requestMediaLibraryPermissionsAsync;
    return imagePickerMethod(writeOnly);
  });
  return _requestMediaLibraryPermissionsAsync.apply(this, arguments);
}
var useMediaLibraryPermissions = (0, _expoModulesCore.createPermissionHook)({
  getMethod: function getMethod(options) {
    return getMediaLibraryPermissionsAsync(options == null ? void 0 : options.writeOnly);
  },
  requestMethod: function requestMethod(options) {
    return requestMediaLibraryPermissionsAsync(options == null ? void 0 : options.writeOnly);
  }
});
exports.useMediaLibraryPermissions = useMediaLibraryPermissions;
var useCameraPermissions = (0, _expoModulesCore.createPermissionHook)({
  getMethod: getCameraPermissionsAsync,
  requestMethod: requestCameraPermissionsAsync
});
exports.useCameraPermissions = useCameraPermissions;
function getPendingResultAsync() {
  return _getPendingResultAsync.apply(this, arguments);
}
function _getPendingResultAsync() {
  _getPendingResultAsync = (0, _asyncToGenerator2.default)(function* () {
    if (_ExponentImagePicker.default.getPendingResultAsync) {
      return _ExponentImagePicker.default.getPendingResultAsync();
    }
    return [];
  });
  return _getPendingResultAsync.apply(this, arguments);
}
function launchCameraAsync() {
  return _launchCameraAsync.apply(this, arguments);
}
function _launchCameraAsync() {
  _launchCameraAsync = (0, _asyncToGenerator2.default)(function* () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!_ExponentImagePicker.default.launchCameraAsync) {
      throw new _expoModulesCore.UnavailabilityError('ImagePicker', 'launchCameraAsync');
    }
    var result = yield _ExponentImagePicker.default.launchCameraAsync(validateOptions(options));
    return mergeDeprecatedResult(result);
  });
  return _launchCameraAsync.apply(this, arguments);
}
function launchImageLibraryAsync(_x) {
  return _launchImageLibraryAsync.apply(this, arguments);
}
function _launchImageLibraryAsync() {
  _launchImageLibraryAsync = (0, _asyncToGenerator2.default)(function* (options) {
    if (!_ExponentImagePicker.default.launchImageLibraryAsync) {
      throw new _expoModulesCore.UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');
    }
    if (options != null && options.allowsEditing && options.allowsMultipleSelection) {
      console.warn('[expo-image-picker] `allowsEditing` is not supported when `allowsMultipleSelection` is enabled and will be ignored.' + "Disable either 'allowsEditing' or 'allowsMultipleSelection' in 'launchImageLibraryAsync' " + 'to fix this warning.');
    }
    var result = yield _ExponentImagePicker.default.launchImageLibraryAsync(options != null ? options : {});
    return mergeDeprecatedResult(result);
  });
  return _launchImageLibraryAsync.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,