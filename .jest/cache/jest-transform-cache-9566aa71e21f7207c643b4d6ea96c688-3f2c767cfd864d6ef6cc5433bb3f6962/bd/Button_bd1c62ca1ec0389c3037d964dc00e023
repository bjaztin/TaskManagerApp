4fe287cafce3b22bee5fcfeeae7d4437
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Button = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _color = _interopRequireDefault(require("color"));
var _config = require("../config");
var _helpers = require("../helpers");
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var defaultLoadingProps = function defaultLoadingProps(type, theme) {
  var _a;
  return {
    color: type === 'solid' ? 'white' : (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.primary,
    size: 'small'
  };
};
var Button = function Button(props) {
  var _a, _b, _c, _d, _e, _f, _g;
  (0, _react.useEffect)(function () {
    if (props.linearGradientProps && !props.ViewComponent) {
      console.error("You need to pass a ViewComponent to use linearGradientProps !\nExample: ViewComponent={require('react-native-linear-gradient')}");
    }
  });
  var TouchableComponent = props.TouchableComponent,
    containerStyle = props.containerStyle,
    _props$onPress = props.onPress,
    onPress = _props$onPress === void 0 ? function () {
      return console.log('Please attach a method to this component');
    } : _props$onPress,
    buttonStyle = props.buttonStyle,
    _props$type = props.type,
    type = _props$type === void 0 ? 'solid' : _props$type,
    _props$loading = props.loading,
    loading = _props$loading === void 0 ? false : _props$loading,
    loadingStyle = props.loadingStyle,
    passedLoadingProps = props.loadingProps,
    _props$title = props.title,
    title = _props$title === void 0 ? '' : _props$title,
    titleProps = props.titleProps,
    passedTitleStyle = props.titleStyle,
    icon = props.icon,
    iconContainerStyle = props.iconContainerStyle,
    _props$iconRight = props.iconRight,
    iconRight = _props$iconRight === void 0 ? false : _props$iconRight,
    _props$disabled = props.disabled,
    disabled = _props$disabled === void 0 ? false : _props$disabled,
    disabledStyle = props.disabledStyle,
    disabledTitleStyle = props.disabledTitleStyle,
    _props$raised = props.raised,
    raised = _props$raised === void 0 ? false : _props$raised,
    linearGradientProps = props.linearGradientProps,
    _props$ViewComponent = props.ViewComponent,
    ViewComponent = _props$ViewComponent === void 0 ? _reactNative.View : _props$ViewComponent,
    theme = props.theme,
    _props$iconPosition = props.iconPosition,
    iconPosition = _props$iconPosition === void 0 ? 'left' : _props$iconPosition,
    attributes = __rest(props, ["TouchableComponent", "containerStyle", "onPress", "buttonStyle", "type", "loading", "loadingStyle", "loadingProps", "title", "titleProps", "titleStyle", "icon", "iconContainerStyle", "iconRight", "disabled", "disabledStyle", "disabledTitleStyle", "raised", "linearGradientProps", "ViewComponent", "theme", "iconPosition"]);
  var handleOnPress = (0, _react.useCallback)(function (evt) {
    if (!loading) {
      onPress(evt);
    }
  }, [loading, onPress]);
  var TouchableComponentInternal = TouchableComponent || _reactNative.Platform.select({
    android: linearGradientProps ? _reactNative.TouchableOpacity : _reactNative.TouchableNativeFeedback,
    default: _reactNative.TouchableOpacity
  });
  var titleStyle = _reactNative.StyleSheet.flatten([{
    color: type === 'solid' ? 'white' : (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.primary
  }, styles.title, passedTitleStyle, disabled && {
    color: (0, _helpers.color)((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.disabled).darken(0.3).string()
  }, disabled && disabledTitleStyle]);
  var background = _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= 21 ? _reactNative.TouchableNativeFeedback.Ripple((0, _color.default)((_c = titleStyle === null || titleStyle === void 0 ? void 0 : titleStyle.color) === null || _c === void 0 ? void 0 : _c.toString()).alpha(0.32).rgb().string(), true) : undefined;
  var loadingProps = Object.assign(Object.assign({}, defaultLoadingProps(type, theme)), passedLoadingProps);
  var accessibilityState = {
    disabled: !!disabled,
    busy: !!loading
  };
  var positionStyle = {
    top: 'column',
    bottom: 'column-reverse',
    left: 'row',
    right: 'row-reverse'
  };
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [styles.container, {
      borderRadius: 3 || styles.container.borderRadius
    }, containerStyle, raised && !disabled && type !== 'clear' && styles.raised],
    children: (0, _jsxRuntime.jsx)(TouchableComponentInternal, _objectSpread(_objectSpread({
      onPress: handleOnPress,
      delayPressIn: 0,
      activeOpacity: 0.3,
      accessibilityRole: "button",
      accessibilityState: accessibilityState,
      disabled: disabled,
      background: background
    }, attributes), {}, {
      children: (0, _jsxRuntime.jsxs)(ViewComponent, _objectSpread(_objectSpread({}, linearGradientProps), {}, {
        style: _reactNative.StyleSheet.flatten([styles.button, styles.buttonOrientation, {
          flexDirection: positionStyle[iconRight ? 'right' : iconPosition] || 'row'
        }, {
          backgroundColor: type === 'solid' ? (_d = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _d === void 0 ? void 0 : _d.primary : 'transparent',
          borderColor: (_e = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _e === void 0 ? void 0 : _e.primary,
          borderWidth: type === 'outline' ? _reactNative.StyleSheet.hairlineWidth : 0
        }, buttonStyle, disabled && type === 'solid' && {
          backgroundColor: (_f = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _f === void 0 ? void 0 : _f.disabled
        }, disabled && type === 'outline' && {
          borderColor: (0, _helpers.color)((_g = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _g === void 0 ? void 0 : _g.disabled).darken(0.3).string()
        }, disabled && disabledStyle]),
        children: [loading && (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, _objectSpread({
          style: _reactNative.StyleSheet.flatten([styles.loading, loadingStyle]),
          color: loadingProps.color,
          size: loadingProps.size
        }, loadingProps)), !loading && icon && (0, _helpers.renderNode)(_Icon.default, icon, {
          containerStyle: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle])
        }), !loading && !!title && (0, _helpers.renderNode)(_reactNative.Text, title, Object.assign({
          style: titleStyle
        }, titleProps))]
      }))
    }))
  });
};
exports.Button = Button;
var styles = _reactNative.StyleSheet.create({
  button: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 3,
    padding: 8
  },
  buttonOrientation: {
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 3,
    padding: 8
  },
  container: {
    overflow: 'hidden',
    borderRadius: 3
  },
  title: Object.assign({
    fontSize: 16,
    textAlign: 'center',
    paddingVertical: 1
  }, _reactNative.Platform.select({
    android: {
      fontFamily: 'sans-serif-medium'
    },
    default: {
      fontSize: 18
    }
  })),
  iconContainer: {
    marginHorizontal: 5
  },
  raised: Object.assign({
    backgroundColor: '#fff',
    overflow: 'visible'
  }, _reactNative.Platform.select({
    android: {
      elevation: 4
    },
    default: {
      shadowColor: 'rgba(0,0,0, .4)',
      shadowOffset: {
        height: 1,
        width: 1
      },
      shadowOpacity: 1,
      shadowRadius: 1
    }
  })),
  loading: {
    marginVertical: 2
  }
});
var _default = (0, _config.withTheme)(Button, 'Button');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfY29sb3IiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NvbmZpZyIsIl9oZWxwZXJzIiwiX0ljb24iLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJvd25LZXlzIiwiZSIsInIiLCJ0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJfX3Jlc3QiLCJzIiwicCIsImluZGV4T2YiLCJpIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJkZWZhdWx0TG9hZGluZ1Byb3BzIiwidHlwZSIsInRoZW1lIiwiX2EiLCJjb2xvciIsImNvbG9ycyIsInByaW1hcnkiLCJzaXplIiwiQnV0dG9uIiwicHJvcHMiLCJfYiIsIl9jIiwiX2QiLCJfZSIsIl9mIiwiX2ciLCJ1c2VFZmZlY3QiLCJsaW5lYXJHcmFkaWVudFByb3BzIiwiVmlld0NvbXBvbmVudCIsImNvbnNvbGUiLCJlcnJvciIsIlRvdWNoYWJsZUNvbXBvbmVudCIsImNvbnRhaW5lclN0eWxlIiwiX3Byb3BzJG9uUHJlc3MiLCJvblByZXNzIiwibG9nIiwiYnV0dG9uU3R5bGUiLCJfcHJvcHMkdHlwZSIsIl9wcm9wcyRsb2FkaW5nIiwibG9hZGluZyIsImxvYWRpbmdTdHlsZSIsInBhc3NlZExvYWRpbmdQcm9wcyIsImxvYWRpbmdQcm9wcyIsIl9wcm9wcyR0aXRsZSIsInRpdGxlIiwidGl0bGVQcm9wcyIsInBhc3NlZFRpdGxlU3R5bGUiLCJ0aXRsZVN0eWxlIiwiaWNvbiIsImljb25Db250YWluZXJTdHlsZSIsIl9wcm9wcyRpY29uUmlnaHQiLCJpY29uUmlnaHQiLCJfcHJvcHMkZGlzYWJsZWQiLCJkaXNhYmxlZCIsImRpc2FibGVkU3R5bGUiLCJkaXNhYmxlZFRpdGxlU3R5bGUiLCJfcHJvcHMkcmFpc2VkIiwicmFpc2VkIiwiX3Byb3BzJFZpZXdDb21wb25lbnQiLCJWaWV3IiwiX3Byb3BzJGljb25Qb3NpdGlvbiIsImljb25Qb3NpdGlvbiIsImF0dHJpYnV0ZXMiLCJoYW5kbGVPblByZXNzIiwidXNlQ2FsbGJhY2siLCJldnQiLCJUb3VjaGFibGVDb21wb25lbnRJbnRlcm5hbCIsIlBsYXRmb3JtIiwic2VsZWN0IiwiYW5kcm9pZCIsIlRvdWNoYWJsZU9wYWNpdHkiLCJUb3VjaGFibGVOYXRpdmVGZWVkYmFjayIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwic3R5bGVzIiwiZGFya2VuIiwic3RyaW5nIiwiYmFja2dyb3VuZCIsIk9TIiwiVmVyc2lvbiIsIlJpcHBsZSIsIkNvbG9yIiwidG9TdHJpbmciLCJhbHBoYSIsInJnYiIsInVuZGVmaW5lZCIsImFzc2lnbiIsImFjY2Vzc2liaWxpdHlTdGF0ZSIsImJ1c3kiLCJwb3NpdGlvblN0eWxlIiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwianN4Iiwic3R5bGUiLCJjb250YWluZXIiLCJib3JkZXJSYWRpdXMiLCJjaGlsZHJlbiIsImRlbGF5UHJlc3NJbiIsImFjdGl2ZU9wYWNpdHkiLCJhY2Nlc3NpYmlsaXR5Um9sZSIsImpzeHMiLCJidXR0b24iLCJidXR0b25PcmllbnRhdGlvbiIsImZsZXhEaXJlY3Rpb24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJDb2xvciIsImJvcmRlcldpZHRoIiwiaGFpcmxpbmVXaWR0aCIsIkFjdGl2aXR5SW5kaWNhdG9yIiwicmVuZGVyTm9kZSIsIkljb24iLCJpY29uQ29udGFpbmVyIiwiVGV4dCIsImV4cG9ydHMiLCJjcmVhdGUiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJwYWRkaW5nIiwib3ZlcmZsb3ciLCJmb250U2l6ZSIsInRleHRBbGlnbiIsInBhZGRpbmdWZXJ0aWNhbCIsImZvbnRGYW1pbHkiLCJtYXJnaW5Ib3Jpem9udGFsIiwiZWxldmF0aW9uIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXQiLCJoZWlnaHQiLCJ3aWR0aCIsInNoYWRvd09wYWNpdHkiLCJzaGFkb3dSYWRpdXMiLCJtYXJnaW5WZXJ0aWNhbCIsIl9kZWZhdWx0Iiwid2l0aFRoZW1lIl0sInNvdXJjZXMiOlsiQnV0dG9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVmlldywgVGV4dCwgVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2ssIFRvdWNoYWJsZU9wYWNpdHksIEFjdGl2aXR5SW5kaWNhdG9yLCBQbGF0Zm9ybSwgU3R5bGVTaGVldCwgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IENvbG9yIGZyb20gJ2NvbG9yJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyByZW5kZXJOb2RlLCBjb2xvciB9IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vaWNvbnMvSWNvbic7XG5jb25zdCBkZWZhdWx0TG9hZGluZ1Byb3BzID0gKHR5cGUsIHRoZW1lKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoe1xuICAgICAgICBjb2xvcjogdHlwZSA9PT0gJ3NvbGlkJyA/ICd3aGl0ZScgOiAoX2EgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJpbWFyeSxcbiAgICAgICAgc2l6ZTogJ3NtYWxsJyxcbiAgICB9KTtcbn07XG5jb25zdCBCdXR0b24gPSAocHJvcHMpID0+IHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2c7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHByb3BzLmxpbmVhckdyYWRpZW50UHJvcHMgJiYgIXByb3BzLlZpZXdDb21wb25lbnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJZb3UgbmVlZCB0byBwYXNzIGEgVmlld0NvbXBvbmVudCB0byB1c2UgbGluZWFyR3JhZGllbnRQcm9wcyAhXFxuRXhhbXBsZTogVmlld0NvbXBvbmVudD17cmVxdWlyZSgncmVhY3QtbmF0aXZlLWxpbmVhci1ncmFkaWVudCcpfVwiKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHsgVG91Y2hhYmxlQ29tcG9uZW50LCBjb250YWluZXJTdHlsZSwgb25QcmVzcyA9ICgpID0+IGNvbnNvbGUubG9nKCdQbGVhc2UgYXR0YWNoIGEgbWV0aG9kIHRvIHRoaXMgY29tcG9uZW50JyksIGJ1dHRvblN0eWxlLCB0eXBlID0gJ3NvbGlkJywgbG9hZGluZyA9IGZhbHNlLCBsb2FkaW5nU3R5bGUsIGxvYWRpbmdQcm9wczogcGFzc2VkTG9hZGluZ1Byb3BzLCB0aXRsZSA9ICcnLCB0aXRsZVByb3BzLCB0aXRsZVN0eWxlOiBwYXNzZWRUaXRsZVN0eWxlLCBpY29uLCBpY29uQ29udGFpbmVyU3R5bGUsIGljb25SaWdodCA9IGZhbHNlLCBkaXNhYmxlZCA9IGZhbHNlLCBkaXNhYmxlZFN0eWxlLCBkaXNhYmxlZFRpdGxlU3R5bGUsIHJhaXNlZCA9IGZhbHNlLCBsaW5lYXJHcmFkaWVudFByb3BzLCBWaWV3Q29tcG9uZW50ID0gVmlldywgdGhlbWUsIGljb25Qb3NpdGlvbiA9ICdsZWZ0JyB9ID0gcHJvcHMsIGF0dHJpYnV0ZXMgPSBfX3Jlc3QocHJvcHMsIFtcIlRvdWNoYWJsZUNvbXBvbmVudFwiLCBcImNvbnRhaW5lclN0eWxlXCIsIFwib25QcmVzc1wiLCBcImJ1dHRvblN0eWxlXCIsIFwidHlwZVwiLCBcImxvYWRpbmdcIiwgXCJsb2FkaW5nU3R5bGVcIiwgXCJsb2FkaW5nUHJvcHNcIiwgXCJ0aXRsZVwiLCBcInRpdGxlUHJvcHNcIiwgXCJ0aXRsZVN0eWxlXCIsIFwiaWNvblwiLCBcImljb25Db250YWluZXJTdHlsZVwiLCBcImljb25SaWdodFwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRTdHlsZVwiLCBcImRpc2FibGVkVGl0bGVTdHlsZVwiLCBcInJhaXNlZFwiLCBcImxpbmVhckdyYWRpZW50UHJvcHNcIiwgXCJWaWV3Q29tcG9uZW50XCIsIFwidGhlbWVcIiwgXCJpY29uUG9zaXRpb25cIl0pO1xuICAgIGNvbnN0IGhhbmRsZU9uUHJlc3MgPSB1c2VDYWxsYmFjaygoZXZ0KSA9PiB7XG4gICAgICAgIGlmICghbG9hZGluZykge1xuICAgICAgICAgICAgb25QcmVzcyhldnQpO1xuICAgICAgICB9XG4gICAgfSwgW2xvYWRpbmcsIG9uUHJlc3NdKTtcbiAgICAvLyBSZWZhY3RvciB0byBQcmVzc2FibGVcbiAgICBjb25zdCBUb3VjaGFibGVDb21wb25lbnRJbnRlcm5hbCA9IFRvdWNoYWJsZUNvbXBvbmVudCB8fFxuICAgICAgICBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICAgICAgYW5kcm9pZDogbGluZWFyR3JhZGllbnRQcm9wcyA/IFRvdWNoYWJsZU9wYWNpdHkgOiBUb3VjaGFibGVOYXRpdmVGZWVkYmFjayxcbiAgICAgICAgICAgIGRlZmF1bHQ6IFRvdWNoYWJsZU9wYWNpdHksXG4gICAgICAgIH0pO1xuICAgIGNvbnN0IHRpdGxlU3R5bGUgPSBTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICB7XG4gICAgICAgICAgICBjb2xvcjogdHlwZSA9PT0gJ3NvbGlkJyA/ICd3aGl0ZScgOiAoX2EgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJpbWFyeSxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGVzLnRpdGxlLFxuICAgICAgICBwYXNzZWRUaXRsZVN0eWxlLFxuICAgICAgICBkaXNhYmxlZCAmJiB7XG4gICAgICAgICAgICBjb2xvcjogY29sb3IoKF9iID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmRpc2FibGVkKS5kYXJrZW4oMC4zKS5zdHJpbmcoKSxcbiAgICAgICAgfSxcbiAgICAgICAgZGlzYWJsZWQgJiYgZGlzYWJsZWRUaXRsZVN0eWxlLFxuICAgIF0pO1xuICAgIGNvbnN0IGJhY2tncm91bmQgPSBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnICYmIFBsYXRmb3JtLlZlcnNpb24gPj0gMjFcbiAgICAgICAgPyBUb3VjaGFibGVOYXRpdmVGZWVkYmFjay5SaXBwbGUoQ29sb3IoKF9jID0gdGl0bGVTdHlsZSA9PT0gbnVsbCB8fCB0aXRsZVN0eWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aXRsZVN0eWxlLmNvbG9yKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudG9TdHJpbmcoKSkuYWxwaGEoMC4zMikucmdiKCkuc3RyaW5nKCksIHRydWUpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IGxvYWRpbmdQcm9wcyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdExvYWRpbmdQcm9wcyh0eXBlLCB0aGVtZSkpLCBwYXNzZWRMb2FkaW5nUHJvcHMpO1xuICAgIGNvbnN0IGFjY2Vzc2liaWxpdHlTdGF0ZSA9IHtcbiAgICAgICAgZGlzYWJsZWQ6ICEhZGlzYWJsZWQsXG4gICAgICAgIGJ1c3k6ICEhbG9hZGluZyxcbiAgICB9O1xuICAgIGNvbnN0IHBvc2l0aW9uU3R5bGUgPSB7XG4gICAgICAgIHRvcDogJ2NvbHVtbicsXG4gICAgICAgIGJvdHRvbTogJ2NvbHVtbi1yZXZlcnNlJyxcbiAgICAgICAgbGVmdDogJ3JvdycsXG4gICAgICAgIHJpZ2h0OiAncm93LXJldmVyc2UnLFxuICAgIH07XG4gICAgcmV0dXJuICg8VmlldyBzdHlsZT17W1xuICAgICAgICAgICAgc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDMgfHwgc3R5bGVzLmNvbnRhaW5lci5ib3JkZXJSYWRpdXMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGFpbmVyU3R5bGUsXG4gICAgICAgICAgICByYWlzZWQgJiYgIWRpc2FibGVkICYmIHR5cGUgIT09ICdjbGVhcicgJiYgc3R5bGVzLnJhaXNlZCxcbiAgICAgICAgXX0+XG4gICAgICA8VG91Y2hhYmxlQ29tcG9uZW50SW50ZXJuYWwgb25QcmVzcz17aGFuZGxlT25QcmVzc30gZGVsYXlQcmVzc0luPXswfSBhY3RpdmVPcGFjaXR5PXswLjN9IGFjY2Vzc2liaWxpdHlSb2xlPVwiYnV0dG9uXCIgYWNjZXNzaWJpbGl0eVN0YXRlPXthY2Nlc3NpYmlsaXR5U3RhdGV9IGRpc2FibGVkPXtkaXNhYmxlZH0gYmFja2dyb3VuZD17YmFja2dyb3VuZH0gey4uLmF0dHJpYnV0ZXN9PlxuICAgICAgICA8Vmlld0NvbXBvbmVudCB7Li4ubGluZWFyR3JhZGllbnRQcm9wc30gc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgICAgICBzdHlsZXMuYnV0dG9uLFxuICAgICAgICAgICAgc3R5bGVzLmJ1dHRvbk9yaWVudGF0aW9uLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246IHBvc2l0aW9uU3R5bGVbaWNvblJpZ2h0ID8gJ3JpZ2h0JyA6IGljb25Qb3NpdGlvbl0gfHwgJ3JvdycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdHlwZSA9PT0gJ3NvbGlkJyA/IChfZCA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5wcmltYXJ5IDogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogKF9lID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLnByaW1hcnksXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IHR5cGUgPT09ICdvdXRsaW5lJyA/IFN0eWxlU2hlZXQuaGFpcmxpbmVXaWR0aCA6IDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnV0dG9uU3R5bGUsXG4gICAgICAgICAgICBkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgIHR5cGUgPT09ICdzb2xpZCcgJiYge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogKF9mID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLmRpc2FibGVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgdHlwZSA9PT0gJ291dGxpbmUnICYmIHtcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogY29sb3IoKF9nID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nLmRpc2FibGVkKVxuICAgICAgICAgICAgICAgICAgICAuZGFya2VuKDAuMylcbiAgICAgICAgICAgICAgICAgICAgLnN0cmluZygpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpc2FibGVkICYmIGRpc2FibGVkU3R5bGUsXG4gICAgICAgIF0pfT5cbiAgICAgICAgICB7bG9hZGluZyAmJiAoPEFjdGl2aXR5SW5kaWNhdG9yIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW3N0eWxlcy5sb2FkaW5nLCBsb2FkaW5nU3R5bGVdKX0gY29sb3I9e2xvYWRpbmdQcm9wcy5jb2xvcn0gc2l6ZT17bG9hZGluZ1Byb3BzLnNpemV9IHsuLi5sb2FkaW5nUHJvcHN9Lz4pfVxuICAgICAgICAgIHshbG9hZGluZyAmJlxuICAgICAgICAgICAgaWNvbiAmJlxuICAgICAgICAgICAgcmVuZGVyTm9kZShJY29uLCBpY29uLCB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyU3R5bGU6IFN0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5pY29uQ29udGFpbmVyLFxuICAgICAgICAgICAgICAgICAgICBpY29uQ29udGFpbmVyU3R5bGUsXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICB9KX1cblxuICAgICAgICAgIHshbG9hZGluZyAmJlxuICAgICAgICAgICAgISF0aXRsZSAmJlxuICAgICAgICAgICAgcmVuZGVyTm9kZShUZXh0LCB0aXRsZSwgT2JqZWN0LmFzc2lnbih7IHN0eWxlOiB0aXRsZVN0eWxlIH0sIHRpdGxlUHJvcHMpKX1cbiAgICAgICAgPC9WaWV3Q29tcG9uZW50PlxuICAgICAgPC9Ub3VjaGFibGVDb21wb25lbnRJbnRlcm5hbD5cbiAgICA8L1ZpZXc+KTtcbn07XG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgYnV0dG9uOiB7XG4gICAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDMsXG4gICAgICAgIHBhZGRpbmc6IDgsXG4gICAgfSxcbiAgICBidXR0b25PcmllbnRhdGlvbjoge1xuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDMsXG4gICAgICAgIHBhZGRpbmc6IDgsXG4gICAgfSxcbiAgICBjb250YWluZXI6IHtcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDMsXG4gICAgfSxcbiAgICB0aXRsZTogT2JqZWN0LmFzc2lnbih7IGZvbnRTaXplOiAxNiwgdGV4dEFsaWduOiAnY2VudGVyJywgcGFkZGluZ1ZlcnRpY2FsOiAxIH0sIFBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICAgIGFuZHJvaWQ6IHtcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdzYW5zLXNlcmlmLW1lZGl1bScsXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAxOCxcbiAgICAgICAgfSxcbiAgICB9KSksXG4gICAgaWNvbkNvbnRhaW5lcjoge1xuICAgICAgICBtYXJnaW5Ib3Jpem9udGFsOiA1LFxuICAgIH0sXG4gICAgcmFpc2VkOiBPYmplY3QuYXNzaWduKHsgYmFja2dyb3VuZENvbG9yOiAnI2ZmZicsIG92ZXJmbG93OiAndmlzaWJsZScgfSwgUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgYW5kcm9pZDoge1xuICAgICAgICAgICAgZWxldmF0aW9uOiA0LFxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBzaGFkb3dDb2xvcjogJ3JnYmEoMCwwLDAsIC40KScsXG4gICAgICAgICAgICBzaGFkb3dPZmZzZXQ6IHsgaGVpZ2h0OiAxLCB3aWR0aDogMSB9LFxuICAgICAgICAgICAgc2hhZG93T3BhY2l0eTogMSxcbiAgICAgICAgICAgIHNoYWRvd1JhZGl1czogMSxcbiAgICAgICAgfSxcbiAgICB9KSksXG4gICAgbG9hZGluZzoge1xuICAgICAgICBtYXJnaW5WZXJ0aWNhbDogMixcbiAgICB9LFxufSk7XG5leHBvcnQgeyBCdXR0b24gfTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhU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