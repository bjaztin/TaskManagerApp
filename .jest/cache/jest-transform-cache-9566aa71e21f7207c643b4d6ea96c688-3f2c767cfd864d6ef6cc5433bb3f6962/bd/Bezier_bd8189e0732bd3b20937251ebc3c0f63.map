{"version":3,"names":["Bezier","_e","global","Error","_f","mX1","mY1","mX2","mY2","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","A","aA1","aA2","_closure","__initData","_worklet_3374392297911_init_data","__workletHash","__stackDetails","__version","B","_worklet_16740236581141_init_data","C","_worklet_17250667303223_init_data","calcBezier","aT","_worklet_3336129670125_init_data","getSlope","_worklet_6461718455249_init_data","binarySubdivide","aX","aA","aB","currentX","currentT","i","Math","abs","_worklet_249053909510_init_data","newtonRaphsonIterate","aGuessT","currentSlope","_worklet_303592406761_init_data","LinearEasing","x","_worklet_11601588428153_init_data","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","_worklet_16767251613109_init_data","_worklet_11458292201024_init_data","_worklet_11048418097672_init_data","exports"],"sources":["Bezier.ts"],"sourcesContent":["/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\n\nexport function Bezier(\n  mX1: number,\n  mY1: number,\n  mX2: number,\n  mY2: number\n): (x: number) => number {\n  'worklet';\n\n  const NEWTON_ITERATIONS = 4;\n  const NEWTON_MIN_SLOPE = 0.001;\n  const SUBDIVISION_PRECISION = 0.0000001;\n  const SUBDIVISION_MAX_ITERATIONS = 10;\n\n  const kSplineTableSize = 11;\n  const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\n  function A(aA1: number, aA2: number): number {\n    'worklet';\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n  function B(aA1: number, aA2: number): number {\n    'worklet';\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n  function C(aA1: number) {\n    'worklet';\n    return 3.0 * aA1;\n  }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function calcBezier(aT: number, aA1: number, aA2: number): number {\n    'worklet';\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function getSlope(aT: number, aA1: number, aA2: number): number {\n    'worklet';\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function binarySubdivide(\n    aX: number,\n    aA: number,\n    aB: number,\n    mX1: number,\n    mX2: number\n  ): number {\n    'worklet';\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (\n      Math.abs(currentX) > SUBDIVISION_PRECISION &&\n      ++i < SUBDIVISION_MAX_ITERATIONS\n    );\n    return currentT;\n  }\n\n  function newtonRaphsonIterate(\n    aX: number,\n    aGuessT: number,\n    mX1: number,\n    mX2: number\n  ): number {\n    'worklet';\n    for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n      const currentSlope = getSlope(aGuessT, mX1, mX2);\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n      const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n\n  function LinearEasing(x: number): number {\n    'worklet';\n    return x;\n  }\n\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  // FIXME: Float32Array is not available in Hermes right now\n  //\n  // var float32ArraySupported = typeof Float32Array === 'function';\n  // const sampleValues = float32ArraySupported\n  // ? new Float32Array(kSplineTableSize)\n  // : new Array(kSplineTableSize);\n\n  // Precompute samples table\n  const sampleValues = new Array(kSplineTableSize);\n\n  for (let i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX(aX: number): number {\n    'worklet';\n    let intervalStart = 0.0;\n    let currentSample = 1;\n    const lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    const dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    const guessForT = intervalStart + dist * kSampleStepSize;\n\n    const initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    'worklet';\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n"],"mappings":"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"}