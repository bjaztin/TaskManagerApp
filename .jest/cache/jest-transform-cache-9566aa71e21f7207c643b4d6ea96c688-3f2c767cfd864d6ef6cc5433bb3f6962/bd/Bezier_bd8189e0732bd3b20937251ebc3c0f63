082bd308b0be5aad5216bde029c0ccf7
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bezier = void 0;
var _worklet_11048418097672_init_data = {
  code: "function Bezier(mX1, mY1, mX2, mY2) {\n  const NEWTON_ITERATIONS = 4;\n  const NEWTON_MIN_SLOPE = 0.001;\n  const SUBDIVISION_PRECISION = 0.0000001;\n  const SUBDIVISION_MAX_ITERATIONS = 10;\n  const kSplineTableSize = 11;\n  const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n  function A(aA1, aA2) {\n    'worklet';\n\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n  function B(aA1, aA2) {\n    'worklet';\n\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n  function C(aA1) {\n    'worklet';\n\n    return 3.0 * aA1;\n  }\n  function calcBezier(aT, aA1, aA2) {\n    'worklet';\n\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n  function getSlope(aT, aA1, aA2) {\n    'worklet';\n\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n  function binarySubdivide(aX, aA, aB, mX1, mX2) {\n    'worklet';\n\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n    return currentT;\n  }\n  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    'worklet';\n\n    for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n      const currentSlope = getSlope(aGuessT, mX1, mX2);\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n      const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  function LinearEasing(x) {\n    'worklet';\n\n    return x;\n  }\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n  const sampleValues = new Array(kSplineTableSize);\n  for (let i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n  function getTForX(aX) {\n    'worklet';\n\n    let intervalStart = 0.0;\n    let currentSample = 1;\n    const lastSample = kSplineTableSize - 1;\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n    const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    const guessForT = intervalStart + dist * kSampleStepSize;\n    const initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n  return function BezierEasing(x) {\n    'worklet';\n\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x;\n    }\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js",
  sourceMap: "{\"version\":3,\"names\":[\"Bezier\",\"mX1\",\"mY1\",\"mX2\",\"mY2\",\"NEWTON_ITERATIONS\",\"NEWTON_MIN_SLOPE\",\"SUBDIVISION_PRECISION\",\"SUBDIVISION_MAX_ITERATIONS\",\"kSplineTableSize\",\"kSampleStepSize\",\"A\",\"aA1\",\"aA2\",\"B\",\"C\",\"calcBezier\",\"aT\",\"getSlope\",\"binarySubdivide\",\"aX\",\"aA\",\"aB\",\"currentX\",\"currentT\",\"i\",\"Math\",\"abs\",\"newtonRaphsonIterate\",\"aGuessT\",\"currentSlope\",\"LinearEasing\",\"x\",\"Error\",\"sampleValues\",\"Array\",\"getTForX\",\"intervalStart\",\"currentSample\",\"lastSample\",\"dist\",\"guessForT\",\"initialSlope\",\"BezierEasing\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"],\"mappings\":\"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\"}"
};
var _worklet_3374392297911_init_data = {
  code: "function A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js",
  sourceMap: "{\"version\":3,\"names\":[\"A\",\"aA1\",\"aA2\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"],\"mappings\":\"AAiBE,SAAAA,CAAUA,CAACC,GAAA,EAAGC,GAAE,EAAG;EAGjB,OAAO,GAAG,GAAG,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGD,GAAG;AACpC\"}"
};
var _worklet_16740236581141_init_data = {
  code: "function B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js",
  sourceMap: "{\"version\":3,\"names\":[\"B\",\"aA1\",\"aA2\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"],\"mappings\":\"AAsBE,SAAAA,CAAUA,CAACC,GAAA,EAAGC,GAAE,EAAG;EAGjB,OAAO,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGD,GAAG;AAC9B\"}"
};
var _worklet_17250667303223_init_data = {
  code: "function C(aA1) {\n  return 3.0 * aA1;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js",
  sourceMap: "{\"version\":3,\"names\":[\"C\",\"aA1\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"],\"mappings\":\"AA2BE,SAAAA,CAAUA,CAACC,GAAA,EAAG;EAGZ,OAAO,GAAG,GAAGA,GAAG;AAClB\"}"
};
var _worklet_3336129670125_init_data = {
  code: "function calcBezier(aT, aA1, aA2) {\n  const {\n    A,\n    B,\n    C\n  } = this._closure;\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js",
  sourceMap: "{\"version\":3,\"names\":[\"calcBezier\",\"aT\",\"aA1\",\"aA2\",\"A\",\"B\",\"C\",\"_closure\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"],\"mappings\":\"AAiCE,SAAAA,WAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,SAAAH,CAAA,CAAAF,GAAA,EAAAC,GAAA,IAAAF,EAAA,GAAAI,CAAA,CAAAH,GAAA,EAAAC,GAAA,KAAAF,EAAA,GAAAK,CAAA,CAAAJ,GAAA,KAAAD,EAAA;AACA\"}"
};
var _worklet_6461718455249_init_data = {
  code: "function getSlope(aT, aA1, aA2) {\n  const {\n    A,\n    B,\n    C\n  } = this._closure;\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js",
  sourceMap: "{\"version\":3,\"names\":[\"getSlope\",\"aT\",\"aA1\",\"aA2\",\"A\",\"B\",\"C\",\"_closure\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"],\"mappings\":\"AAwCE,SAAAA,SAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,aAAAH,CAAA,CAAAF,GAAA,EAAAC,GAAA,IAAAF,EAAA,GAAAA,EAAA,SAAAI,CAAA,CAAAH,GAAA,EAAAC,GAAA,IAAAF,EAAA,GAAAK,CAAA,CAAAJ,GAAA;AACA\"}"
};
var _worklet_249053909510_init_data = {
  code: "function binarySubdivide(aX, aA, aB, mX1, mX2) {\n  const {\n    SUBDIVISION_PRECISION,\n    SUBDIVISION_MAX_ITERATIONS,\n    calcBezier\n  } = this._closure;\n  let currentX;\n  let currentT;\n  let i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n  return currentT;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js",
  sourceMap: "{\"version\":3,\"names\":[\"binarySubdivide\",\"aX\",\"aA\",\"aB\",\"mX1\",\"mX2\",\"SUBDIVISION_PRECISION\",\"SUBDIVISION_MAX_ITERATIONS\",\"calcBezier\",\"_closure\",\"currentX\",\"currentT\",\"i\",\"Math\",\"abs\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"],\"mappings\":\"AA8CE,SAAAA,eAASA,CAAgBC,EAAA,EAAEC,EAAE,EAAEC,EAAE,EAAEC,GAAE,EAAGC,GAAE,EAAG;EAAA;IAAAC,qBAAA;IAAAC,0BAAA;IAAAC;EAAA,SAAAC,QAAA;EAG3C,IAAIC,QAAQ;EACZ,IAAIC,QAAQ;EACZ,IAAIC,CAAC,GAAG,CAAC;EACT,GAAG;IACDD,QAAQ,GAAGT,EAAE,GAAG,CAACC,EAAE,GAAGD,EAAE,IAAI,GAAG;IAC/BQ,QAAQ,GAAGF,UAAU,CAACG,QAAQ,EAAEP,GAAG,EAAEC,GAAG,CAAC,GAAGJ,EAAE;IAC9C,IAAIS,QAAQ,GAAG,GAAG,EAAE;MAClBP,EAAE,GAAGQ,QAAQ;IACf,CAAC,MAAM;MACLT,EAAE,GAAGS,QAAQ;IACf;EACF,CAAC,QAAQE,IAAI,CAACC,GAAG,CAACJ,QAAQ,CAAC,GAAGJ,qBAAqB,IAAI,EAAEM,CAAC,GAAGL,0BAA0B;EACvF,OAAOI,QAAQ;AACjB\"}"
};
var _worklet_303592406761_init_data = {
  code: "function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  const {\n    NEWTON_ITERATIONS,\n    getSlope,\n    calcBezier\n  } = this._closure;\n  for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n    const currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js",
  sourceMap: "{\"version\":3,\"names\":[\"newtonRaphsonIterate\",\"aX\",\"aGuessT\",\"mX1\",\"mX2\",\"NEWTON_ITERATIONS\",\"getSlope\",\"calcBezier\",\"_closure\",\"i\",\"currentSlope\",\"currentX\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"],\"mappings\":\"AA+DE,SAAAA,oBAASA,CAAqBC,EAAA,EAAEC,OAAE,EAAOC,GAAE,EAAGC,GAAE,EAAG;EAAA;IAAAC,iBAAA;IAAAC,QAAA;IAAAC;EAAA,SAAAC,QAAA;EAGjD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,iBAAiB,EAAE,EAAEI,CAAC,EAAE;IAC1C,MAAMC,YAAY,GAAGJ,QAAQ,CAACJ,OAAO,EAAEC,GAAG,EAAEC,GAAG,CAAC;IAChD,IAAIM,YAAY,KAAK,GAAG,EAAE;MACxB,OAAOR,OAAO;IAChB;IACA,MAAMS,QAAQ,GAAGJ,UAAU,CAACL,OAAO,EAAEC,GAAG,EAAEC,GAAG,CAAC,GAAGH,EAAE;IACnDC,OAAO,IAAIS,QAAQ,GAAGD,YAAY;EACpC;EACA,OAAOR,OAAO;AAChB\"}"
};
var _worklet_11601588428153_init_data = {
  code: "function LinearEasing(x) {\n  return x;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js",
  sourceMap: "{\"version\":3,\"names\":[\"LinearEasing\",\"x\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"],\"mappings\":\"AA4EE,SAAAA,YAASA,CAAaC,CAAC;EAGrB,OAAOA,CAAC;AACV\"}"
};
var _worklet_16767251613109_init_data = {
  code: "function getTForX(aX) {\n  const {\n    kSplineTableSize,\n    sampleValues,\n    kSampleStepSize,\n    getSlope,\n    mX1,\n    mX2,\n    NEWTON_MIN_SLOPE,\n    newtonRaphsonIterate,\n    binarySubdivide\n  } = this._closure;\n  let intervalStart = 0.0;\n  let currentSample = 1;\n  const lastSample = kSplineTableSize - 1;\n  for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n    intervalStart += kSampleStepSize;\n  }\n  --currentSample;\n  const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n  const guessForT = intervalStart + dist * kSampleStepSize;\n  const initialSlope = getSlope(guessForT, mX1, mX2);\n  if (initialSlope >= NEWTON_MIN_SLOPE) {\n    return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n  } else if (initialSlope === 0.0) {\n    return guessForT;\n  } else {\n    return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n  }\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js",
  sourceMap: "{\"version\":3,\"names\":[\"getTForX\",\"aX\",\"kSplineTableSize\",\"sampleValues\",\"kSampleStepSize\",\"getSlope\",\"mX1\",\"mX2\",\"NEWTON_MIN_SLOPE\",\"newtonRaphsonIterate\",\"binarySubdivide\",\"_closure\",\"intervalStart\",\"currentSample\",\"lastSample\",\"dist\",\"guessForT\",\"initialSlope\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"],\"mappings\":\"AAoGE,SAAAA,QAASA,CAASC,EAAA,EAAE;EAAA;IAAAC,gBAAA;IAAAC,YAAA;IAAAC,eAAA;IAAAC,QAAA;IAAAC,GAAA;IAAAC,GAAA;IAAAC,gBAAA;IAAAC,oBAAA;IAAAC;EAAA,SAAAC,QAAA;EAGlB,IAAIC,aAAa,GAAG,GAAG;EACvB,IAAIC,aAAa,GAAG,CAAC;EACrB,MAAMC,UAAU,GAAGZ,gBAAgB,GAAG,CAAC;EACvC,OAAOW,aAAa,KAAKC,UAAU,IAAIX,YAAY,CAACU,aAAa,CAAC,IAAIZ,EAAE,EAAE,EAAEY,aAAa,EAAE;IACzFD,aAAa,IAAIR,eAAe;EAClC;EACA,EAAES,aAAa;EAGf,MAAME,IAAI,GAAG,CAACd,EAAE,GAAGE,YAAY,CAACU,aAAa,CAAC,KAAKV,YAAY,CAACU,aAAa,GAAG,CAAC,CAAC,GAAGV,YAAY,CAACU,aAAa,CAAC,CAAC;EACjH,MAAMG,SAAS,GAAGJ,aAAa,GAAGG,IAAI,GAAGX,eAAe;EACxD,MAAMa,YAAY,GAAGZ,QAAQ,CAACW,SAAS,EAAEV,GAAG,EAAEC,GAAG,CAAC;EAClD,IAAIU,YAAY,IAAIT,gBAAgB,EAAE;IACpC,OAAOC,oBAAoB,CAACR,EAAE,EAAEe,SAAS,EAAEV,GAAG,EAAEC,GAAG,CAAC;EACtD,CAAC,MAAM,IAAIU,YAAY,KAAK,GAAG,EAAE;IAC/B,OAAOD,SAAS;EAClB,CAAC,MAAM;IACL,OAAON,eAAe,CAACT,EAAE,EAAEW,aAAa,EAAEA,aAAa,GAAGR,eAAe,EAAEE,GAAG,EAAEC,GAAG,CAAC;EACtF;AACF\"}"
};
var _worklet_11458292201024_init_data = {
  code: "function BezierEasing(x) {\n  const {\n    mX1,\n    mY1,\n    mX2,\n    mY2,\n    calcBezier,\n    getTForX\n  } = this._closure;\n  if (mX1 === mY1 && mX2 === mY2) {\n    return x;\n  }\n  if (x === 0) {\n    return 0;\n  }\n  if (x === 1) {\n    return 1;\n  }\n  return calcBezier(getTForX(x), mY1, mY2);\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js",
  sourceMap: "{\"version\":3,\"names\":[\"BezierEasing\",\"x\",\"mX1\",\"mY1\",\"mX2\",\"mY2\",\"calcBezier\",\"getTForX\",\"_closure\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"],\"mappings\":\"AA2HS,SAAAA,YAASA,CAAaC,CAAC;EAAA;IAAAC,GAAA;IAAAC,GAAA;IAAAC,GAAA;IAAAC,GAAA;IAAAC,UAAA;IAAAC;EAAA,SAAAC,QAAA;EAG5B,IAAIN,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,EAAE;IAC9B,OAAOJ,CAAC;EACV;EAEA,IAAIA,CAAC,KAAK,CAAC,EAAE;IACX,OAAO,CAAC;EACV;EACA,IAAIA,CAAC,KAAK,CAAC,EAAE;IACX,OAAO,CAAC;EACV;EACA,OAAOK,UAAU,CAACC,QAAQ,CAACN,CAAC,CAAC,EAAEE,GAAG,EAAEE,GAAG,CAAC;AAC1C\"}"
};
var Bezier = function () {
  var _e = [new global.Error(), 1, -27];
  var _f = function _f(mX1, mY1, mX2, mY2) {
    var NEWTON_ITERATIONS = 4;
    var NEWTON_MIN_SLOPE = 0.001;
    var SUBDIVISION_PRECISION = 0.0000001;
    var SUBDIVISION_MAX_ITERATIONS = 10;
    var kSplineTableSize = 11;
    var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
    var A = function () {
      var _e = [new global.Error(), 1, -27];
      var _f = function _f(aA1, aA2) {
        return 1.0 - 3.0 * aA2 + 3.0 * aA1;
      };
      _f._closure = {};
      _f.__initData = _worklet_3374392297911_init_data;
      _f.__workletHash = 3374392297911;
      _f.__stackDetails = _e;
      _f.__version = "3.3.0";
      return _f;
    }();
    var B = function () {
      var _e = [new global.Error(), 1, -27];
      var _f = function _f(aA1, aA2) {
        return 3.0 * aA2 - 6.0 * aA1;
      };
      _f._closure = {};
      _f.__initData = _worklet_16740236581141_init_data;
      _f.__workletHash = 16740236581141;
      _f.__stackDetails = _e;
      _f.__version = "3.3.0";
      return _f;
    }();
    var C = function () {
      var _e = [new global.Error(), 1, -27];
      var _f = function _f(aA1) {
        return 3.0 * aA1;
      };
      _f._closure = {};
      _f.__initData = _worklet_17250667303223_init_data;
      _f.__workletHash = 17250667303223;
      _f.__stackDetails = _e;
      _f.__version = "3.3.0";
      return _f;
    }();
    var calcBezier = function () {
      var _e = [new global.Error(), -4, -27];
      var _f = function _f(aT, aA1, aA2) {
        return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
      };
      _f._closure = {
        A: A,
        B: B,
        C: C
      };
      _f.__initData = _worklet_3336129670125_init_data;
      _f.__workletHash = 3336129670125;
      _f.__stackDetails = _e;
      _f.__version = "3.3.0";
      return _f;
    }();
    var getSlope = function () {
      var _e = [new global.Error(), -4, -27];
      var _f = function _f(aT, aA1, aA2) {
        return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
      };
      _f._closure = {
        A: A,
        B: B,
        C: C
      };
      _f.__initData = _worklet_6461718455249_init_data;
      _f.__workletHash = 6461718455249;
      _f.__stackDetails = _e;
      _f.__version = "3.3.0";
      return _f;
    }();
    var binarySubdivide = function () {
      var _e = [new global.Error(), -4, -27];
      var _f = function _f(aX, aA, aB, mX1, mX2) {
        var currentX;
        var currentT;
        var i = 0;
        do {
          currentT = aA + (aB - aA) / 2.0;
          currentX = calcBezier(currentT, mX1, mX2) - aX;
          if (currentX > 0.0) {
            aB = currentT;
          } else {
            aA = currentT;
          }
        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
        return currentT;
      };
      _f._closure = {
        SUBDIVISION_PRECISION: SUBDIVISION_PRECISION,
        SUBDIVISION_MAX_ITERATIONS: SUBDIVISION_MAX_ITERATIONS,
        calcBezier: calcBezier
      };
      _f.__initData = _worklet_249053909510_init_data;
      _f.__workletHash = 249053909510;
      _f.__stackDetails = _e;
      _f.__version = "3.3.0";
      return _f;
    }();
    var newtonRaphsonIterate = function () {
      var _e = [new global.Error(), -4, -27];
      var _f = function _f(aX, aGuessT, mX1, mX2) {
        for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
          var currentSlope = getSlope(aGuessT, mX1, mX2);
          if (currentSlope === 0.0) {
            return aGuessT;
          }
          var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
          aGuessT -= currentX / currentSlope;
        }
        return aGuessT;
      };
      _f._closure = {
        NEWTON_ITERATIONS: NEWTON_ITERATIONS,
        getSlope: getSlope,
        calcBezier: calcBezier
      };
      _f.__initData = _worklet_303592406761_init_data;
      _f.__workletHash = 303592406761;
      _f.__stackDetails = _e;
      _f.__version = "3.3.0";
      return _f;
    }();
    var LinearEasing = function () {
      var _e = [new global.Error(), 1, -27];
      var _f = function _f(x) {
        return x;
      };
      _f._closure = {};
      _f.__initData = _worklet_11601588428153_init_data;
      _f.__workletHash = 11601588428153;
      _f.__stackDetails = _e;
      _f.__version = "3.3.0";
      return _f;
    }();
    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }
    if (mX1 === mY1 && mX2 === mY2) {
      return LinearEasing;
    }
    var sampleValues = new Array(kSplineTableSize);
    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
    var getTForX = function () {
      var _e = [new global.Error(), -10, -27];
      var _f = function _f(aX) {
        var intervalStart = 0.0;
        var currentSample = 1;
        var lastSample = kSplineTableSize - 1;
        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
          intervalStart += kSampleStepSize;
        }
        --currentSample;
        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
        var guessForT = intervalStart + dist * kSampleStepSize;
        var initialSlope = getSlope(guessForT, mX1, mX2);
        if (initialSlope >= NEWTON_MIN_SLOPE) {
          return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
        } else if (initialSlope === 0.0) {
          return guessForT;
        } else {
          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
        }
      };
      _f._closure = {
        kSplineTableSize: kSplineTableSize,
        sampleValues: sampleValues,
        kSampleStepSize: kSampleStepSize,
        getSlope: getSlope,
        mX1: mX1,
        mX2: mX2,
        NEWTON_MIN_SLOPE: NEWTON_MIN_SLOPE,
        newtonRaphsonIterate: newtonRaphsonIterate,
        binarySubdivide: binarySubdivide
      };
      _f.__initData = _worklet_16767251613109_init_data;
      _f.__workletHash = 16767251613109;
      _f.__stackDetails = _e;
      _f.__version = "3.3.0";
      return _f;
    }();
    return function () {
      var _e = [new global.Error(), -7, -27];
      var _f = function _f(x) {
        if (mX1 === mY1 && mX2 === mY2) {
          return x;
        }
        if (x === 0) {
          return 0;
        }
        if (x === 1) {
          return 1;
        }
        return calcBezier(getTForX(x), mY1, mY2);
      };
      _f._closure = {
        mX1: mX1,
        mY1: mY1,
        mX2: mX2,
        mY2: mY2,
        calcBezier: calcBezier,
        getTForX: getTForX
      };
      _f.__initData = _worklet_11458292201024_init_data;
      _f.__workletHash = 11458292201024;
      _f.__stackDetails = _e;
      _f.__version = "3.3.0";
      return _f;
    }();
  };
  _f._closure = {};
  _f.__initData = _worklet_11048418097672_init_data;
  _f.__workletHash = 11048418097672;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
exports.Bezier = Bezier;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,