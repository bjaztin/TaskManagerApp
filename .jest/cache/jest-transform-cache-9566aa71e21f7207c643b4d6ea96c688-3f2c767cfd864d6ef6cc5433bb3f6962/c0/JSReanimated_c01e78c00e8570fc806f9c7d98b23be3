5bf0c77690c9c27c0813154d15d1f75f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _NativeReanimated2 = require("../NativeReanimated/NativeReanimated");
var _commonTypes = require("../commonTypes");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var JSReanimated = function (_NativeReanimated) {
  (0, _inherits2.default)(JSReanimated, _NativeReanimated);
  var _super = _createSuper(JSReanimated);
  function JSReanimated() {
    var _this;
    (0, _classCallCheck2.default)(this, JSReanimated);
    _this = _super.call(this, false);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "nextSensorId", 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "sensors", new Map());
    return _this;
  }
  (0, _createClass2.default)(JSReanimated, [{
    key: "makeShareableClone",
    value: function makeShareableClone(value) {
      return {
        __hostObjectShareableJSRef: value
      };
    }
  }, {
    key: "installCoreFunctions",
    value: function installCoreFunctions(_callGuard, _valueUnpacker) {}
  }, {
    key: "scheduleOnUI",
    value: function scheduleOnUI(worklet) {
      requestAnimationFrame(worklet);
    }
  }, {
    key: "registerEventHandler",
    value: function registerEventHandler(_eventHash, _eventHandler) {
      return '';
    }
  }, {
    key: "unregisterEventHandler",
    value: function unregisterEventHandler(_) {}
  }, {
    key: "enableLayoutAnimations",
    value: function enableLayoutAnimations() {
      console.warn('[Reanimated] Layout Animations are not supported on web yet.');
    }
  }, {
    key: "configureLayoutAnimation",
    value: function configureLayoutAnimation() {}
  }, {
    key: "registerSensor",
    value: function registerSensor(sensorType, interval, iosReferenceFrame, eventHandler) {
      if (!(this.getSensorName(sensorType) in window)) {
        return -1;
      }
      var sensor = this.initializeSensor(sensorType, interval);
      var callback;
      if (sensorType === _commonTypes.SensorType.ROTATION) {
        callback = function callback() {
          var _sensor$quaternion = (0, _slicedToArray2.default)(sensor.quaternion, 4),
            qw = _sensor$quaternion[0],
            qx = _sensor$quaternion[1],
            qy = _sensor$quaternion[2],
            qz = _sensor$quaternion[3];
          var yaw = Math.atan2(2.0 * (qy * qz + qw * qx), qw * qw - qx * qx - qy * qy + qz * qz);
          var pitch = Math.sin(-2.0 * (qx * qz - qw * qy));
          var roll = Math.atan2(2.0 * (qx * qy + qw * qz), qw * qw + qx * qx - qy * qy - qz * qz);
          eventHandler({
            qw: qw,
            qx: qx,
            qy: qy,
            qz: qz,
            yaw: yaw,
            pitch: pitch,
            roll: roll,
            interfaceOrientation: 0
          });
        };
      } else {
        callback = function callback() {
          var x = sensor.x,
            y = sensor.y,
            z = sensor.z;
          eventHandler({
            x: x,
            y: y,
            z: z,
            interfaceOrientation: 0
          });
        };
      }
      sensor.addEventListener('reading', callback);
      sensor.start();
      this.sensors.set(this.nextSensorId, sensor);
      return this.nextSensorId++;
    }
  }, {
    key: "unregisterSensor",
    value: function unregisterSensor(id) {
      var sensor = this.sensors.get(id);
      if (sensor !== undefined) {
        sensor.stop();
        this.sensors.delete(id);
      }
    }
  }, {
    key: "subscribeForKeyboardEvents",
    value: function subscribeForKeyboardEvents(_) {
      console.warn('[Reanimated] useAnimatedKeyboard is not available on web yet.');
      return -1;
    }
  }, {
    key: "unsubscribeFromKeyboardEvents",
    value: function unsubscribeFromKeyboardEvents(_) {}
  }, {
    key: "initializeSensor",
    value: function initializeSensor(sensorType, interval) {
      var config = interval <= 0 ? {
        referenceFrame: 'device'
      } : {
        frequency: 1000 / interval
      };
      switch (sensorType) {
        case _commonTypes.SensorType.ACCELEROMETER:
          return new window.Accelerometer(config);
        case _commonTypes.SensorType.GYROSCOPE:
          return new window.Gyroscope(config);
        case _commonTypes.SensorType.GRAVITY:
          return new window.GravitySensor(config);
        case _commonTypes.SensorType.MAGNETIC_FIELD:
          return new window.Magnetometer(config);
        case _commonTypes.SensorType.ROTATION:
          return new window.AbsoluteOrientationSensor(config);
      }
    }
  }, {
    key: "getSensorName",
    value: function getSensorName(sensorType) {
      switch (sensorType) {
        case _commonTypes.SensorType.ACCELEROMETER:
          return 'Accelerometer';
        case _commonTypes.SensorType.GRAVITY:
          return 'GravitySensor';
        case _commonTypes.SensorType.GYROSCOPE:
          return 'Gyroscope';
        case _commonTypes.SensorType.MAGNETIC_FIELD:
          return 'Magnetometer';
        case _commonTypes.SensorType.ROTATION:
          return 'AbsoluteOrientationSensor';
      }
    }
  }]);
  return JSReanimated;
}(_NativeReanimated2.NativeReanimated);
exports.default = JSReanimated;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,