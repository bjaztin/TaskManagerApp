c18266525c3f515bb1e2d7dcebdd671b
_getJestObj().mock("expo-calendar", function () {
  return {
    requestCalendarPermissionsAsync: jest.fn(),
    getCalendarsAsync: jest.fn(),
    createEventAsync: jest.fn(),
    deleteEventAsync: jest.fn(),
    EntityTypes: {
      EVENT: "event"
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _CalendarHelpers = require("../../src/utilities/CalendarHelpers");
var Calendar = _interopRequireWildcard(require("expo-calendar"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("CalendarHelpers component", function () {
  test("Render calendar ID when permission is granted ", (0, _asyncToGenerator2.default)(function* () {
    Calendar.requestCalendarPermissionsAsync.mockResolvedValueOnce({
      status: "granted"
    });
    Calendar.getCalendarsAsync.mockResolvedValueOnce([{
      id: "calendar 1",
      allowsModifications: true,
      type: "local"
    }]);
    var result = yield (0, _CalendarHelpers.getDefaultCalendarId)();
    expect(result).toEqual("calendar 1");
  }));
  test("Create an event Id and save the event in the calendar", (0, _asyncToGenerator2.default)(function* () {
    var eventDetails = {
      selectedDate: new Date(),
      selectedTime: new Date(),
      selectedEndTime: new Date(),
      task: "This is task",
      note: "This is note",
      url: "This is Url",
      selectedPhoto: "This is photo"
    };
    Calendar.requestCalendarPermissionsAsync.mockResolvedValueOnce({
      status: "granted"
    });
    Calendar.getCalendarsAsync.mockResolvedValueOnce([{
      id: "calendar 1",
      allowsModifications: true,
      type: "local"
    }]);
    Calendar.createEventAsync.mockResolvedValueOnce("eventID");
    var eventId = yield (0, _CalendarHelpers.saveTaskToCalendar)(eventDetails);
    expect(eventId).toEqual("eventID");
  }));
  test("Delete event in the calendar", (0, _asyncToGenerator2.default)(function* () {
    var eventDetails = {
      selectedDate: new Date(),
      selectedTime: new Date(),
      selectedEndTime: new Date(),
      task: "This is the task",
      note: "This is the note",
      url: "This is the Url",
      selectedPhoto: "This is the photo"
    };
    Calendar.requestCalendarPermissionsAsync.mockResolvedValueOnce({
      status: "granted"
    });
    Calendar.getCalendarsAsync.mockResolvedValueOnce([{
      id: "calendar 1",
      allowsModifications: true,
      type: "local"
    }]);
    Calendar.deleteEventAsync.mockResolvedValueOnce(true);
    yield (0, _CalendarHelpers.deleteEventAsync)(eventDetails);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,