{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_isEqual","_interopRequireDefault","_RNGestureHandlerModule","_State","_handlersRegistry","_gestureHandlerCommon","_utils","_ActionType","_PressabilityDebugView","_GestureHandlerRootViewContext","UIManagerAny","UIManager","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","registrationName","topOnGestureHandlerStateChange","customGHEventsConfig","_objectSpread","onGestureHandlerEvent","onGestureHandlerStateChange","isFabric","Platform","OS","genericDirectEventTypes","UIManagerConstants","_UIManagerAny$getView","_UIManagerAny$getView2","getViewManagerConfig","call","_UIManagerAny$getCons","getConstants","_UIManagerAny$setJSRe","setJSResponder","oldSetJSResponder","_UIManagerAny$clearJS","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","default","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","_stateToPropMappings","_defineProperty3","State","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","_ref","name","_ref$allowedProps","allowedProps","_ref$config","config","transformProps","_ref$customNativeProp","customNativeProps","Handler","_React$Component","_inherits2","_super","_createSuper","_this","_classCallCheck2","_defineProperty","_assertThisInitialized2","event","nativeEvent","handlerTag","onGestureEvent","_this$props$onGesture","_this$props","_this$props$onGesture2","_this$props2","onHandlerStateChange","_this$props$onHandler","_this$props3","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","ActionType","JS_FUNCTION_OLD_API","propsRef","registerOldGestureHandler","onGestureStateChange","actionType","_this$props5","_this$props6","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","scheduleFlushOperations","updateGestureHandler","getNextHandlerTag","createRef","isMountedRef","id","handlerIDToTag","Error","_createClass2","key","value","componentDidMount","_this2","inspectorToggleListener","setState","_","update","queueMicrotask","filterConfig","concat","_toConsumableArray2","findNodeHandle","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","handlerID","remainingTries","_this3","setNativeProps","updates","mergedProps","render","_this$props$testID","context","isJestEnv","gestureEventHandler","_this$props7","gestureStateEventHandler","_this$props8","events","e","tagMessage","grandChildren","type","displayName","toArray","push","createElement","PressabilityDebugView","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","testID","Component"],"sources":["createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  getNextHandlerTag,\n  registerOldGestureHandler,\n} from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n  scheduleFlushOperations,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\nimport { isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        queueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          if (\n            this.props?.onGestureEvent &&\n            'current' in this.props.onGestureEvent\n          ) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (\n            this.props?.onGestureEvent &&\n            '__isNative' in this.props.onGestureEvent\n          ) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        queueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isJestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isJestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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"}