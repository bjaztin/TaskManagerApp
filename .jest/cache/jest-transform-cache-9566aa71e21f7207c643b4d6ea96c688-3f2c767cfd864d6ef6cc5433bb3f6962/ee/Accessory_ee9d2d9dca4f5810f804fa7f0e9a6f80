39afcdc283539e20b7ec414b60215466
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Image = _interopRequireDefault(require("../image/Image"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Accessory = function Accessory(_a) {
  var _a$size = _a.size,
    size = _a$size === void 0 ? 10 : _a$size,
    style = _a.style,
    _a$underlayColor = _a.underlayColor,
    underlayColor = _a$underlayColor === void 0 ? '#000' : _a$underlayColor,
    onPress = _a.onPress,
    onLongPress = _a.onLongPress,
    source = _a.source,
    props = __rest(_a, ["size", "style", "underlayColor", "onPress", "onLongPress", "source"]);
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableHighlight, {
    style: [styles.accessory, {
      width: size,
      height: size,
      borderRadius: size / 2
    }, style],
    underlayColor: underlayColor,
    onPress: onPress,
    onLongPress: onLongPress,
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      children: source ? (0, _jsxRuntime.jsx)(_Image.default, _objectSpread({
        source: source,
        style: {
          width: size,
          height: size,
          borderRadius: size / 2
        }
      }, props)) : (0, _jsxRuntime.jsx)(_Icon.default, _objectSpread({
        name: "mode-edit",
        type: "material",
        color: "#fff",
        size: size * 0.8
      }, props))
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  accessory: Object.assign({
    position: 'absolute',
    bottom: 0,
    right: 0,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#aaa'
  }, _reactNative.Platform.select({
    android: {
      elevation: 1
    },
    default: {
      shadowColor: '#000',
      shadowOffset: {
        width: 1,
        height: 1
      },
      shadowRadius: 2,
      shadowOpacity: 0.5
    }
  }))
});
var _default = (0, _config.withTheme)(Accessory, 'AvatarAccessory');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,