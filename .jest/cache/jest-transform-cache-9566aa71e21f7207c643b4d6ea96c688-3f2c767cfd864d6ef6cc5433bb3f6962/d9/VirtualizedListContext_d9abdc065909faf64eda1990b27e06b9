922cde15c974220256d11f9899aa6373
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VirtualizedListCellContextProvider = VirtualizedListCellContextProvider;
exports.VirtualizedListContext = void 0;
exports.VirtualizedListContextProvider = VirtualizedListContextProvider;
exports.VirtualizedListContextResetter = VirtualizedListContextResetter;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var VirtualizedListContext = React.createContext(null);
exports.VirtualizedListContext = VirtualizedListContext;
if (__DEV__) {
  VirtualizedListContext.displayName = 'VirtualizedListContext';
}
function VirtualizedListContextResetter(_ref) {
  var children = _ref.children;
  return (0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
    value: null,
    children: children
  });
}
function VirtualizedListContextProvider(_ref2) {
  var children = _ref2.children,
    value = _ref2.value;
  var context = (0, React.useMemo)(function () {
    return {
      cellKey: null,
      getScrollMetrics: value.getScrollMetrics,
      horizontal: value.horizontal,
      getOutermostParentListRef: value.getOutermostParentListRef,
      registerAsNestedChild: value.registerAsNestedChild,
      unregisterAsNestedChild: value.unregisterAsNestedChild
    };
  }, [value.getScrollMetrics, value.horizontal, value.getOutermostParentListRef, value.registerAsNestedChild, value.unregisterAsNestedChild]);
  return (0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
    value: context,
    children: children
  });
}
function VirtualizedListCellContextProvider(_ref3) {
  var cellKey = _ref3.cellKey,
    children = _ref3.children;
  var currContext = (0, React.useContext)(VirtualizedListContext);
  var context = (0, React.useMemo)(function () {
    return currContext == null ? null : _objectSpread(_objectSpread({}, currContext), {}, {
      cellKey: cellKey
    });
  }, [currContext, cellKey]);
  return (0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
    value: context,
    children: children
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9qc3hSdW50aW1lIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIm93bktleXMiLCJlIiwiciIsInQiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIlZpcnR1YWxpemVkTGlzdENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiZXhwb3J0cyIsIl9fREVWX18iLCJkaXNwbGF5TmFtZSIsIlZpcnR1YWxpemVkTGlzdENvbnRleHRSZXNldHRlciIsIl9yZWYiLCJjaGlsZHJlbiIsImpzeCIsIlByb3ZpZGVyIiwidmFsdWUiLCJWaXJ0dWFsaXplZExpc3RDb250ZXh0UHJvdmlkZXIiLCJfcmVmMiIsImNvbnRleHQiLCJ1c2VNZW1vIiwiY2VsbEtleSIsImdldFNjcm9sbE1ldHJpY3MiLCJob3Jpem9udGFsIiwiZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZiIsInJlZ2lzdGVyQXNOZXN0ZWRDaGlsZCIsInVucmVnaXN0ZXJBc05lc3RlZENoaWxkIiwiVmlydHVhbGl6ZWRMaXN0Q2VsbENvbnRleHRQcm92aWRlciIsIl9yZWYzIiwiY3VyckNvbnRleHQiLCJ1c2VDb250ZXh0Il0sInNvdXJjZXMiOlsiVmlydHVhbGl6ZWRMaXN0Q29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGVvZiBWaXJ0dWFsaXplZExpc3QgZnJvbSAnLi9WaXJ0dWFsaXplZExpc3QnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZUNvbnRleHQsIHVzZU1lbW99IGZyb20gJ3JlYWN0JztcblxudHlwZSBDb250ZXh0ID0gJFJlYWRPbmx5PHtcbiAgY2VsbEtleTogP3N0cmluZyxcbiAgZ2V0U2Nyb2xsTWV0cmljczogKCkgPT4ge1xuICAgIGNvbnRlbnRMZW5ndGg6IG51bWJlcixcbiAgICBkT2Zmc2V0OiBudW1iZXIsXG4gICAgZHQ6IG51bWJlcixcbiAgICBvZmZzZXQ6IG51bWJlcixcbiAgICB0aW1lc3RhbXA6IG51bWJlcixcbiAgICB2ZWxvY2l0eTogbnVtYmVyLFxuICAgIHZpc2libGVMZW5ndGg6IG51bWJlcixcbiAgICB6b29tU2NhbGU6IG51bWJlcixcbiAgfSxcbiAgaG9yaXpvbnRhbDogP2Jvb2xlYW4sXG4gIGdldE91dGVybW9zdFBhcmVudExpc3RSZWY6ICgpID0+IFJlYWN0LkVsZW1lbnRSZWY8VmlydHVhbGl6ZWRMaXN0PixcbiAgcmVnaXN0ZXJBc05lc3RlZENoaWxkOiAoe1xuICAgIGNlbGxLZXk6IHN0cmluZyxcbiAgICByZWY6IFJlYWN0LkVsZW1lbnRSZWY8VmlydHVhbGl6ZWRMaXN0PixcbiAgfSkgPT4gdm9pZCxcbiAgdW5yZWdpc3RlckFzTmVzdGVkQ2hpbGQ6ICh7XG4gICAgcmVmOiBSZWFjdC5FbGVtZW50UmVmPFZpcnR1YWxpemVkTGlzdD4sXG4gIH0pID0+IHZvaWQsXG59PjtcblxuZXhwb3J0IGNvbnN0IFZpcnR1YWxpemVkTGlzdENvbnRleHQ6IFJlYWN0LkNvbnRleHQ8P0NvbnRleHQ+ID1cbiAgUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChfX0RFVl9fKSB7XG4gIFZpcnR1YWxpemVkTGlzdENvbnRleHQuZGlzcGxheU5hbWUgPSAnVmlydHVhbGl6ZWRMaXN0Q29udGV4dCc7XG59XG5cbi8qKlxuICogUmVzZXRzIHRoZSBjb250ZXh0LiBJbnRlbmRlZCBmb3IgdXNlIGJ5IHBvcnRhbC1saWtlIGNvbXBvbmVudHMgKGUuZy4gTW9kYWwpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gVmlydHVhbGl6ZWRMaXN0Q29udGV4dFJlc2V0dGVyKHtcbiAgY2hpbGRyZW4sXG59OiB7XG4gIGNoaWxkcmVuOiBSZWFjdC5Ob2RlLFxufSk6IFJlYWN0Lk5vZGUge1xuICByZXR1cm4gKFxuICAgIDxWaXJ0dWFsaXplZExpc3RDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtudWxsfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1ZpcnR1YWxpemVkTGlzdENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgY29udGV4dCB3aXRoIG1lbW9pemF0aW9uLiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IGBWaXJ0dWFsaXplZExpc3RgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gVmlydHVhbGl6ZWRMaXN0Q29udGV4dFByb3ZpZGVyKHtcbiAgY2hpbGRyZW4sXG4gIHZhbHVlLFxufToge1xuICBjaGlsZHJlbjogUmVhY3QuTm9kZSxcbiAgdmFsdWU6IENvbnRleHQsXG59KTogUmVhY3QuTm9kZSB7XG4gIC8vIEF2b2lkIHNldHRpbmcgYSBuZXdseSBjcmVhdGVkIGNvbnRleHQgb2JqZWN0IGlmIHRoZSB2YWx1ZXMgYXJlIGlkZW50aWNhbC5cbiAgY29uc3QgY29udGV4dCA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIGNlbGxLZXk6IG51bGwsXG4gICAgICBnZXRTY3JvbGxNZXRyaWNzOiB2YWx1ZS5nZXRTY3JvbGxNZXRyaWNzLFxuICAgICAgaG9yaXpvbnRhbDogdmFsdWUuaG9yaXpvbnRhbCxcbiAgICAgIGdldE91dGVybW9zdFBhcmVudExpc3RSZWY6IHZhbHVlLmdldE91dGVybW9zdFBhcmVudExpc3RSZWYsXG4gICAgICByZWdpc3RlckFzTmVzdGVkQ2hpbGQ6IHZhbHVlLnJlZ2lzdGVyQXNOZXN0ZWRDaGlsZCxcbiAgICAgIHVucmVnaXN0ZXJBc05lc3RlZENoaWxkOiB2YWx1ZS51bnJlZ2lzdGVyQXNOZXN0ZWRDaGlsZCxcbiAgICB9KSxcbiAgICBbXG4gICAgICB2YWx1ZS5nZXRTY3JvbGxNZXRyaWNzLFxuICAgICAgdmFsdWUuaG9yaXpvbnRhbCxcbiAgICAgIHZhbHVlLmdldE91dGVybW9zdFBhcmVudExpc3RSZWYsXG4gICAgICB2YWx1ZS5yZWdpc3RlckFzTmVzdGVkQ2hpbGQsXG4gICAgICB2YWx1ZS51bnJlZ2lzdGVyQXNOZXN0ZWRDaGlsZCxcbiAgICBdLFxuICApO1xuICByZXR1cm4gKFxuICAgIDxWaXJ0dWFsaXplZExpc3RDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1ZpcnR1YWxpemVkTGlzdENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgYGNlbGxLZXlgLiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IGBWaXJ0dWFsaXplZExpc3RgIGZvciBlYWNoIGNlbGwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBWaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyKHtcbiAgY2VsbEtleSxcbiAgY2hpbGRyZW4sXG59OiB7XG4gIGNlbGxLZXk6IHN0cmluZyxcbiAgY2hpbGRyZW46IFJlYWN0Lk5vZGUsXG59KTogUmVhY3QuTm9kZSB7XG4gIC8vIEF2b2lkIHNldHRpbmcgYSBuZXdseSBjcmVhdGVkIGNvbnRleHQgb2JqZWN0IGlmIHRoZSB2YWx1ZXMgYXJlIGlkZW50aWNhbC5cbiAgY29uc3QgY3VyckNvbnRleHQgPSB1c2VDb250ZXh0KFZpcnR1YWxpemVkTGlzdENvbnRleHQpO1xuICBjb25zdCBjb250ZXh0ID0gdXNlTWVtbyhcbiAgICAoKSA9PiAoY3VyckNvbnRleHQgPT0gbnVsbCA/IG51bGwgOiB7Li4uY3VyckNvbnRleHQsIGNlbGxLZXl9KSxcbiAgICBbY3VyckNvbnRleHQsIGNlbGxLZXldLFxuICApO1xuICByZXR1cm4gKFxuICAgIDxWaXJ0dWFsaXplZExpc3RDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1ZpcnR1YWxpemVkTGlzdENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVlBLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUErQixJQUFBQyxXQUFBLEdBQUFELE9BQUE7QUFBQSxTQUFBRSx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQUosd0JBQUFRLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FB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