a7ff009c3a4ed45801970a1afc0bd424
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _xdate = _interopRequireDefault(require("xdate"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _constants = _interopRequireDefault(require("../commons/constants"));
var _interface = require("../interface");
var _componentUpdater = require("../componentUpdater");
var _calendar = _interopRequireDefault(require("../calendar"));
var _header = _interopRequireDefault(require("../calendar/header"));
var _infiniteList = _interopRequireDefault(require("../infinite-list"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var NUMBER_OF_PAGES = 50;
var CALENDAR_HEIGHT = 360;
var CalendarList = function CalendarList(props) {
  var initialDate = props.initialDate,
    horizontal = props.horizontal,
    _props$scrollRange = props.scrollRange,
    scrollRange = _props$scrollRange === void 0 ? NUMBER_OF_PAGES : _props$scrollRange,
    staticHeader = props.staticHeader,
    scrollViewProps = props.scrollViewProps,
    calendarProps = props.calendarProps,
    testID = props.testID;
  var style = (0, _react.useRef)((0, _style.default)(calendarProps == null ? void 0 : calendarProps.theme));
  var list = (0, _react.useRef)();
  var _useState = (0, _react.useState)(getDatesArray(initialDate, scrollRange)),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    items = _useState2[0],
    setItems = _useState2[1];
  var _useState3 = (0, _react.useState)(scrollRange),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    positionIndex = _useState4[0],
    setPositionIndex = _useState4[1];
  var _useState5 = (0, _react.useState)(initialDate || items[scrollRange]),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    currentMonth = _useState6[0],
    setCurrentMonth = _useState6[1];
  var shouldRenderStaticHeader = staticHeader && horizontal;
  var headerProps = (0, _componentUpdater.extractHeaderProps)(props);
  var staticHeaderStyle = (0, _react.useMemo)(function () {
    return [style.current.staticHeader, calendarProps == null ? void 0 : calendarProps.headerStyle];
  }, [calendarProps == null ? void 0 : calendarProps.headerStyle]);
  (0, _react.useEffect)(function () {
    scrollToMonth(currentMonth);
  }, [currentMonth]);
  var getMonthIndex = (0, _react.useCallback)(function (month) {
    if (!month) {
      return -1;
    }
    return items.findIndex(function (item) {
      return item.includes(month.toString('yyyy-MM'));
    });
  }, [items]);
  var scrollToMonth = (0, _react.useCallback)(function (month) {
    if (month) {
      var index = getMonthIndex(new _xdate.default(month));
      if (index !== -1) {
        var _list$current;
        var shouldAnimate = _constants.default.isAndroid && !horizontal ? false : true;
        (_list$current = list.current) == null ? void 0 : _list$current.scrollToOffset == null ? void 0 : _list$current.scrollToOffset(index * _constants.default.screenWidth, 0, shouldAnimate);
      }
    }
  }, [getMonthIndex]);
  var updateMonth = (0, _react.useCallback)(function (count, month) {
    if (month) {
      var next = new _xdate.default(month).addMonths(count, true);
      var nextNext = new _xdate.default(month).addMonths(count * 2, true);
      var nextNextIndex = getMonthIndex(nextNext);
      if (nextNextIndex !== -1) {
        setCurrentMonth((0, _interface.toMarkingFormat)(next));
      }
    }
  }, [getMonthIndex]);
  var scrollToNextMonth = (0, _react.useCallback)(function (method, month) {
    if (calendarProps != null && calendarProps.onPressArrowLeft) {
      calendarProps == null ? void 0 : calendarProps.onPressArrowLeft == null ? void 0 : calendarProps.onPressArrowLeft(method, month);
    } else {
      updateMonth(1, month);
    }
  }, [updateMonth]);
  var scrollToPreviousMonth = (0, _react.useCallback)(function (method, month) {
    if (calendarProps != null && calendarProps.onPressArrowRight) {
      calendarProps == null ? void 0 : calendarProps.onPressArrowRight == null ? void 0 : calendarProps.onPressArrowRight(method, month);
    } else {
      updateMonth(-1, month);
    }
  }, [updateMonth]);
  var onPageChange = (0, _react.useCallback)(function (pageIndex, _, info) {
    if (shouldRenderStaticHeader && info.scrolledByUser) {
      setCurrentMonth(items[pageIndex]);
    }
  }, [items]);
  var renderStaticHeader = function renderStaticHeader() {
    if (shouldRenderStaticHeader) {
      return (0, _jsxRuntime.jsx)(_header.default, _objectSpread(_objectSpread({}, headerProps), {}, {
        month: new _xdate.default(currentMonth),
        onPressArrowRight: scrollToNextMonth,
        onPressArrowLeft: scrollToPreviousMonth,
        style: staticHeaderStyle,
        accessibilityElementsHidden: true,
        importantForAccessibility: 'no-hide-descendants',
        testID: 'static-header'
      }));
    }
  };
  var reloadPages = (0, _react.useCallback)(function (pageIndex) {
    horizontal ? replaceItems(pageIndex) : addItems(pageIndex);
  }, [items]);
  var replaceItems = function replaceItems(index) {
    var newItems = getDatesArray(items[index], scrollRange);
    setItems(newItems);
  };
  var addItems = function addItems(index) {
    var array = (0, _toConsumableArray2.default)(items);
    var startingDate = items[index];
    var shouldAppend = index > scrollRange;
    if (startingDate) {
      if (shouldAppend) {
        for (var i = 2; i <= scrollRange; i++) {
          var newDate = getDate(startingDate, i);
          array.push(newDate);
        }
      } else {
        for (var _i = -1; _i > -scrollRange; _i--) {
          var _newDate = getDate(startingDate, _i);
          array.unshift(_newDate);
        }
      }
      setPositionIndex(shouldAppend ? index : scrollRange - 1);
      setItems(array);
    }
  };
  var listContainerStyle = (0, _react.useMemo)(function () {
    return [style.current.flatListContainer, {
      flex: horizontal ? undefined : 1
    }];
  }, [style, horizontal]);
  var scrollProps = (0, _react.useMemo)(function () {
    return _objectSpread(_objectSpread({}, scrollViewProps), {}, {
      showsHorizontalScrollIndicator: false,
      showsVerticalScrollIndicator: false
    });
  }, [scrollViewProps]);
  var renderItem = (0, _react.useCallback)(function (_type, item) {
    return (0, _jsxRuntime.jsx)(_calendar.default, _objectSpread(_objectSpread(_objectSpread({}, calendarProps), headerProps), {}, {
      initialDate: item,
      disableMonthChange: true,
      hideArrows: !horizontal,
      onPressArrowRight: scrollToNextMonth,
      onPressArrowLeft: scrollToPreviousMonth,
      hideExtraDays: (calendarProps == null ? void 0 : calendarProps.hideExtraDays) || true,
      style: [style.current.calendar, calendarProps == null ? void 0 : calendarProps.style],
      headerStyle: horizontal ? calendarProps == null ? void 0 : calendarProps.headerStyle : undefined,
      testID: `${testID}_${item}`
    }));
  }, [calendarProps, scrollToNextMonth, scrollToPreviousMonth]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: listContainerStyle,
    children: [(0, _jsxRuntime.jsx)(_infiniteList.default, {
      ref: list,
      data: items,
      renderItem: renderItem,
      reloadPages: reloadPages,
      onReachNearEdgeThreshold: Math.round(NUMBER_OF_PAGES * 0.4),
      extendedState: calendarProps == null ? void 0 : calendarProps.markedDates,
      isHorizontal: horizontal,
      style: style.current.container,
      initialPageIndex: scrollRange,
      positionIndex: positionIndex,
      pageHeight: CALENDAR_HEIGHT,
      pageWidth: _constants.default.screenWidth,
      onPageChange: onPageChange,
      scrollViewProps: scrollProps
    }, "calendar-list"), renderStaticHeader()]
  });
};
var _default = CalendarList;
exports.default = _default;
function getDate(date, index) {
  var d = new _xdate.default(date);
  d.addMonths(index, true);
  d.setDate(1);
  return (0, _interface.toMarkingFormat)(d);
}
function getDatesArray(date) {
  var numberOfPages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NUMBER_OF_PAGES;
  var d = date || new _xdate.default().toString();
  var array = [];
  for (var index = -numberOfPages; index <= numberOfPages; index++) {
    var newDate = getDate(d, index);
    array.push(newDate);
  }
  return array;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,