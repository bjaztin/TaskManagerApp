cb728a05aa5936195ccda5db3f52f1f7
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var SyntheticError = function (_Error) {
  (0, _inherits2.default)(SyntheticError, _Error);
  var _super = _createSuper(SyntheticError);
  function SyntheticError() {
    var _this;
    (0, _classCallCheck2.default)(this, SyntheticError);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.name = '';
    return _this;
  }
  return (0, _createClass2.default)(SyntheticError);
}((0, _wrapNativeSuper2.default)(Error));
var userExceptionDecorator;
var inUserExceptionDecorator = false;
var decoratedExtraDataKey = Symbol('decoratedExtraDataKey');
function unstable_setExceptionDecorator(exceptionDecorator) {
  userExceptionDecorator = exceptionDecorator;
}
function preprocessException(data) {
  if (userExceptionDecorator && !inUserExceptionDecorator) {
    inUserExceptionDecorator = true;
    try {
      return userExceptionDecorator(data);
    } catch (_unused) {} finally {
      inUserExceptionDecorator = false;
    }
  }
  return data;
}
var exceptionID = 0;
function reportException(e, isFatal, reportToConsole) {
  var parseErrorStack = require("./Devtools/parseErrorStack");
  var stack = parseErrorStack(e == null ? void 0 : e.stack);
  var currentExceptionID = ++exceptionID;
  var originalMessage = e.message || '';
  var message = originalMessage;
  if (e.componentStack != null) {
    message += `\n\nThis error is located at:${e.componentStack}`;
  }
  var namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;
  if (!message.startsWith(namePrefix)) {
    message = namePrefix + message;
  }
  message = e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;
  var data = preprocessException({
    message: message,
    originalMessage: message === originalMessage ? null : originalMessage,
    name: e.name == null || e.name === '' ? null : e.name,
    componentStack: typeof e.componentStack === 'string' ? e.componentStack : null,
    stack: stack,
    id: currentExceptionID,
    isFatal: isFatal,
    extraData: _objectSpread(_objectSpread({}, e[decoratedExtraDataKey]), {}, {
      jsEngine: e.jsEngine,
      rawStack: e.stack
    })
  });
  if (reportToConsole) {
    console.error(data.message);
  }
  if (__DEV__) {
    var LogBox = require("../LogBox/LogBox").default;
    LogBox.addException(_objectSpread(_objectSpread({}, data), {}, {
      isComponentError: !!e.isComponentError
    }));
  } else if (isFatal || e.type !== 'warn') {
    var NativeExceptionsManager = require("./NativeExceptionsManager").default;
    if (NativeExceptionsManager) {
      NativeExceptionsManager.reportException(data);
    }
  }
}
var inExceptionHandler = false;
function handleException(e, isFatal) {
  var error;
  if (e instanceof Error) {
    error = e;
  } else {
    error = new SyntheticError(e);
  }
  try {
    inExceptionHandler = true;
    reportException(error, isFatal, true);
  } finally {
    inExceptionHandler = false;
  }
}
function reactConsoleErrorHandler() {
  var _console;
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  (_console = console)._errorOriginal.apply(_console, args);
  if (!console.reportErrorsAsExceptions) {
    return;
  }
  if (inExceptionHandler) {
    return;
  }
  var error;
  var firstArg = args[0];
  if (firstArg != null && firstArg.stack) {
    error = firstArg;
  } else {
    var stringifySafe = require("../Utilities/stringifySafe").default;
    if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {
      return;
    }
    var message = args.map(function (arg) {
      return typeof arg === 'string' ? arg : stringifySafe(arg);
    }).join(' ');
    error = new SyntheticError(message);
    error.name = 'console.error';
  }
  reportException(error, false, false);
}
function installConsoleErrorReporter() {
  if (console._errorOriginal) {
    return;
  }
  console._errorOriginal = console.error.bind(console);
  console.error = reactConsoleErrorHandler;
  if (console.reportErrorsAsExceptions === undefined) {
    console.reportErrorsAsExceptions = true;
  }
}
module.exports = {
  decoratedExtraDataKey: decoratedExtraDataKey,
  handleException: handleException,
  installConsoleErrorReporter: installConsoleErrorReporter,
  SyntheticError: SyntheticError,
  unstable_setExceptionDecorator: unstable_setExceptionDecorator
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfY3JlYXRlQ2xhc3MyIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9pbmhlcml0czIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJfZ2V0UHJvdG90eXBlT2YyIiwiX3dyYXBOYXRpdmVTdXBlcjIiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJyZXN1bHQiLCJOZXdUYXJnZXQiLCJjb25zdHJ1Y3RvciIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJTeW50aGV0aWNFcnJvciIsIl9FcnJvciIsIl9zdXBlciIsIl90aGlzIiwiX2xlbiIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjb25jYXQiLCJuYW1lIiwiRXJyb3IiLCJ1c2VyRXhjZXB0aW9uRGVjb3JhdG9yIiwiaW5Vc2VyRXhjZXB0aW9uRGVjb3JhdG9yIiwiZGVjb3JhdGVkRXh0cmFEYXRhS2V5IiwiU3ltYm9sIiwidW5zdGFibGVfc2V0RXhjZXB0aW9uRGVjb3JhdG9yIiwiZXhjZXB0aW9uRGVjb3JhdG9yIiwicHJlcHJvY2Vzc0V4Y2VwdGlvbiIsImRhdGEiLCJfdW51c2VkIiwiZXhjZXB0aW9uSUQiLCJyZXBvcnRFeGNlcHRpb24iLCJpc0ZhdGFsIiwicmVwb3J0VG9Db25zb2xlIiwicGFyc2VFcnJvclN0YWNrIiwic3RhY2siLCJjdXJyZW50RXhjZXB0aW9uSUQiLCJvcmlnaW5hbE1lc3NhZ2UiLCJtZXNzYWdlIiwiY29tcG9uZW50U3RhY2siLCJuYW1lUHJlZml4Iiwic3RhcnRzV2l0aCIsImpzRW5naW5lIiwiaWQiLCJleHRyYURhdGEiLCJyYXdTdGFjayIsImNvbnNvbGUiLCJlcnJvciIsIl9fREVWX18iLCJMb2dCb3giLCJhZGRFeGNlcHRpb24iLCJpc0NvbXBvbmVudEVycm9yIiwidHlwZSIsIk5hdGl2ZUV4Y2VwdGlvbnNNYW5hZ2VyIiwiaW5FeGNlcHRpb25IYW5kbGVyIiwiaGFuZGxlRXhjZXB0aW9uIiwicmVhY3RDb25zb2xlRXJyb3JIYW5kbGVyIiwiX2NvbnNvbGUiLCJfbGVuMiIsIl9rZXkyIiwiX2Vycm9yT3JpZ2luYWwiLCJyZXBvcnRFcnJvcnNBc0V4Y2VwdGlvbnMiLCJmaXJzdEFyZyIsInN0cmluZ2lmeVNhZmUiLCJtYXAiLCJhcmciLCJqb2luIiwiaW5zdGFsbENvbnNvbGVFcnJvclJlcG9ydGVyIiwiYmluZCIsInVuZGVmaW5lZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJFeGNlcHRpb25zTWFuYWdlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSB7RXh0ZW5kZWRFcnJvcn0gZnJvbSAnLi9FeHRlbmRlZEVycm9yJztcbmltcG9ydCB0eXBlIHtFeGNlcHRpb25EYXRhfSBmcm9tICcuL05hdGl2ZUV4Y2VwdGlvbnNNYW5hZ2VyJztcblxuY2xhc3MgU3ludGhldGljRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIG5hbWU6IHN0cmluZyA9ICcnO1xufVxuXG50eXBlIEV4Y2VwdGlvbkRlY29yYXRvciA9IEV4Y2VwdGlvbkRhdGEgPT4gRXhjZXB0aW9uRGF0YTtcblxubGV0IHVzZXJFeGNlcHRpb25EZWNvcmF0b3I6ID9FeGNlcHRpb25EZWNvcmF0b3I7XG5sZXQgaW5Vc2VyRXhjZXB0aW9uRGVjb3JhdG9yID0gZmFsc2U7XG5cbi8vIFRoaXMgU3ltYm9sIGlzIHVzZWQgdG8gZGVjb3JhdGUgYW4gRXh0ZW5kZWRFcnJvciB3aXRoIGV4dHJhIGRhdGEgaW4gc2VsZWN0IHVzZWNhc2VzLlxuLy8gTm90ZSB0aGF0IGRhdGEgcGFzc2VkIHVzaW5nIHRoaXMgbWV0aG9kIHNob3VsZCBiZSBzdHJpY3RseSBjb250YWluZWQsXG4vLyBhcyBkYXRhIHRoYXQncyBub3Qgc2VyaWFsaXphYmxlL3RvbyBsYXJnZSBtYXkgY2F1c2UgaXNzdWVzIHdpdGggcGFzc2luZyB0aGUgZXJyb3IgdG8gdGhlIG5hdGl2ZSBjb2RlLlxuY29uc3QgZGVjb3JhdGVkRXh0cmFEYXRhS2V5OiBzeW1ib2wgPSBTeW1ib2woJ2RlY29yYXRlZEV4dHJhRGF0YUtleScpO1xuXG4vKipcbiAqIEFsbG93cyB0aGUgYXBwIHRvIGFkZCBpbmZvcm1hdGlvbiB0byB0aGUgZXhjZXB0aW9uIHJlcG9ydCBiZWZvcmUgaXQgaXMgc2VudFxuICogdG8gbmF0aXZlLiBUaGlzIEFQSSBpcyBub3QgZmluYWwuXG4gKi9cblxuZnVuY3Rpb24gdW5zdGFibGVfc2V0RXhjZXB0aW9uRGVjb3JhdG9yKFxuICBleGNlcHRpb25EZWNvcmF0b3I6ID9FeGNlcHRpb25EZWNvcmF0b3IsXG4pIHtcbiAgdXNlckV4Y2VwdGlvbkRlY29yYXRvciA9IGV4Y2VwdGlvbkRlY29yYXRvcjtcbn1cblxuZnVuY3Rpb24gcHJlcHJvY2Vzc0V4Y2VwdGlvbihkYXRhOiBFeGNlcHRpb25EYXRhKTogRXhjZXB0aW9uRGF0YSB7XG4gIGlmICh1c2VyRXhjZXB0aW9uRGVjb3JhdG9yICYmICFpblVzZXJFeGNlcHRpb25EZWNvcmF0b3IpIHtcbiAgICBpblVzZXJFeGNlcHRpb25EZWNvcmF0b3IgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gdXNlckV4Y2VwdGlvbkRlY29yYXRvcihkYXRhKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIEZhbGwgdGhyb3VnaFxuICAgIH0gZmluYWxseSB7XG4gICAgICBpblVzZXJFeGNlcHRpb25EZWNvcmF0b3IgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogSGFuZGxlcyB0aGUgZGV2ZWxvcGVyLXZpc2libGUgYXNwZWN0IG9mIGVycm9ycyBhbmQgZXhjZXB0aW9uc1xuICovXG5sZXQgZXhjZXB0aW9uSUQgPSAwO1xuZnVuY3Rpb24gcmVwb3J0RXhjZXB0aW9uKFxuICBlOiBFeHRlbmRlZEVycm9yLFxuICBpc0ZhdGFsOiBib29sZWFuLFxuICByZXBvcnRUb0NvbnNvbGU6IGJvb2xlYW4sIC8vIG9ubHkgdHJ1ZSB3aGVuIGNvbWluZyBmcm9tIGhhbmRsZUV4Y2VwdGlvbjsgdGhlIGVycm9yIGhhcyBub3QgeWV0IGJlZW4gbG9nZ2VkXG4pIHtcbiAgY29uc3QgcGFyc2VFcnJvclN0YWNrID0gcmVxdWlyZSgnLi9EZXZ0b29scy9wYXJzZUVycm9yU3RhY2snKTtcbiAgY29uc3Qgc3RhY2sgPSBwYXJzZUVycm9yU3RhY2soZT8uc3RhY2spO1xuICBjb25zdCBjdXJyZW50RXhjZXB0aW9uSUQgPSArK2V4Y2VwdGlvbklEO1xuICBjb25zdCBvcmlnaW5hbE1lc3NhZ2UgPSBlLm1lc3NhZ2UgfHwgJyc7XG4gIGxldCBtZXNzYWdlID0gb3JpZ2luYWxNZXNzYWdlO1xuICBpZiAoZS5jb21wb25lbnRTdGFjayAhPSBudWxsKSB7XG4gICAgbWVzc2FnZSArPSBgXFxuXFxuVGhpcyBlcnJvciBpcyBsb2NhdGVkIGF0OiR7ZS5jb21wb25lbnRTdGFja31gO1xuICB9XG4gIGNvbnN0IG5hbWVQcmVmaXggPSBlLm5hbWUgPT0gbnVsbCB8fCBlLm5hbWUgPT09ICcnID8gJycgOiBgJHtlLm5hbWV9OiBgO1xuXG4gIGlmICghbWVzc2FnZS5zdGFydHNXaXRoKG5hbWVQcmVmaXgpKSB7XG4gICAgbWVzc2FnZSA9IG5hbWVQcmVmaXggKyBtZXNzYWdlO1xuICB9XG5cbiAgbWVzc2FnZSA9XG4gICAgZS5qc0VuZ2luZSA9PSBudWxsID8gbWVzc2FnZSA6IGAke21lc3NhZ2V9LCBqcyBlbmdpbmU6ICR7ZS5qc0VuZ2luZX1gO1xuXG4gIGNvbnN0IGRhdGEgPSBwcmVwcm9jZXNzRXhjZXB0aW9uKHtcbiAgICBtZXNzYWdlLFxuICAgIG9yaWdpbmFsTWVzc2FnZTogbWVzc2FnZSA9PT0gb3JpZ2luYWxNZXNzYWdlID8gbnVsbCA6IG9yaWdpbmFsTWVzc2FnZSxcbiAgICBuYW1lOiBlLm5hbWUgPT0gbnVsbCB8fCBlLm5hbWUgPT09ICcnID8gbnVsbCA6IGUubmFtZSxcbiAgICBjb21wb25lbnRTdGFjazpcbiAgICAgIHR5cGVvZiBlLmNvbXBvbmVudFN0YWNrID09PSAnc3RyaW5nJyA/IGUuY29tcG9uZW50U3RhY2sgOiBudWxsLFxuICAgIHN0YWNrLFxuICAgIGlkOiBjdXJyZW50RXhjZXB0aW9uSUQsXG4gICAgaXNGYXRhbCxcbiAgICBleHRyYURhdGE6IHtcbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV0gd2UgY2FuJ3QgZGVmaW5lIGEgdHlwZSB3aXRoIGEgU3ltYm9sLWtleWVkIGZpZWxkIGluIGZsb3dcbiAgICAgIC4uLmVbZGVjb3JhdGVkRXh0cmFEYXRhS2V5XSxcbiAgICAgIGpzRW5naW5lOiBlLmpzRW5naW5lLFxuICAgICAgcmF3U3RhY2s6IGUuc3RhY2ssXG4gICAgfSxcbiAgfSk7XG5cbiAgaWYgKHJlcG9ydFRvQ29uc29sZSkge1xuICAgIC8vIHdlIGZlZWQgYmFjayBpbnRvIGNvbnNvbGUuZXJyb3IsIHRvIG1ha2Ugc3VyZSBhbnkgbWV0aG9kcyB0aGF0IGFyZVxuICAgIC8vIG1vbmtleSBwYXRjaGVkIG9uIHRvcCBvZiBjb25zb2xlLmVycm9yIGFyZSBjYWxsZWQgd2hlbiBjb21pbmcgZnJvbVxuICAgIC8vIGhhbmRsZUV4Y2VwdGlvblxuICAgIGNvbnNvbGUuZXJyb3IoZGF0YS5tZXNzYWdlKTtcbiAgfVxuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgY29uc3QgTG9nQm94ID0gcmVxdWlyZSgnLi4vTG9nQm94L0xvZ0JveCcpLmRlZmF1bHQ7XG4gICAgTG9nQm94LmFkZEV4Y2VwdGlvbih7XG4gICAgICAuLi5kYXRhLFxuICAgICAgaXNDb21wb25lbnRFcnJvcjogISFlLmlzQ29tcG9uZW50RXJyb3IsXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNGYXRhbCB8fCBlLnR5cGUgIT09ICd3YXJuJykge1xuICAgIGNvbnN0IE5hdGl2ZUV4Y2VwdGlvbnNNYW5hZ2VyID1cbiAgICAgIHJlcXVpcmUoJy4vTmF0aXZlRXhjZXB0aW9uc01hbmFnZXInKS5kZWZhdWx0O1xuICAgIGlmIChOYXRpdmVFeGNlcHRpb25zTWFuYWdlcikge1xuICAgICAgTmF0aXZlRXhjZXB0aW9uc01hbmFnZXIucmVwb3J0RXhjZXB0aW9uKGRhdGEpO1xuICAgIH1cbiAgfVxufVxuXG5kZWNsYXJlIHZhciBjb25zb2xlOiB0eXBlb2YgY29uc29sZSAmIHtcbiAgX2Vycm9yT3JpZ2luYWw6IHR5cGVvZiBjb25zb2xlLmVycm9yLFxuICByZXBvcnRFcnJvcnNBc0V4Y2VwdGlvbnM6IGJvb2xlYW4sXG4gIC4uLlxufTtcblxuLy8gSWYgd2UgdHJpZ2dlciBjb25zb2xlLmVycm9yIF9mcm9tXyBoYW5kbGVFeGNlcHRpb24sXG4vLyB3ZSBkbyB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0IGNvbnNvbGUuZXJyb3IgZG9lc24ndCB0cmlnZ2VyIGVycm9yIHJlcG9ydGluZyBhZ2FpblxubGV0IGluRXhjZXB0aW9uSGFuZGxlciA9IGZhbHNlO1xuXG4vKipcbiAqIExvZ3MgZXhjZXB0aW9ucyB0byB0aGUgKG5hdGl2ZSkgY29uc29sZSBhbmQgZGlzcGxheXMgdGhlbVxuICovXG5mdW5jdGlvbiBoYW5kbGVFeGNlcHRpb24oZTogbWl4ZWQsIGlzRmF0YWw6IGJvb2xlYW4pIHtcbiAgbGV0IGVycm9yOiBFcnJvcjtcbiAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGVycm9yID0gZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBXb3JrYXJvdW5kIGZvciByZXBvcnRpbmcgZXJyb3JzIGNhdXNlZCBieSBgdGhyb3cgJ3NvbWUgc3RyaW5nJ2BcbiAgICAvLyBVbmZvcnR1bmF0ZWx5IHRoZXJlIGlzIG5vIHdheSB0byBmaWd1cmUgb3V0IHRoZSBzdGFja3RyYWNlIGluIHRoaXNcbiAgICAvLyBjYXNlLCBzbyBpZiB5b3UgZW5kZWQgdXAgaGVyZSB0cnlpbmcgdG8gdHJhY2UgYW4gZXJyb3IsIGxvb2sgZm9yXG4gICAgLy8gYHRocm93ICc8ZXJyb3IgbWVzc2FnZT4nYCBzb21ld2hlcmUgaW4geW91ciBjb2RlYmFzZS5cbiAgICBlcnJvciA9IG5ldyBTeW50aGV0aWNFcnJvcihlKTtcbiAgfVxuICB0cnkge1xuICAgIGluRXhjZXB0aW9uSGFuZGxlciA9IHRydWU7XG4gICAgLyogJEZsb3dGaXhNZVtjbGFzcy1vYmplY3Qtc3VidHlwaW5nXSBhZGRlZCB3aGVuIGltcHJvdmluZyB0eXBpbmcgZm9yIHRoaXNcbiAgICAgKiBwYXJhbWV0ZXJzICovXG4gICAgcmVwb3J0RXhjZXB0aW9uKGVycm9yLCBpc0ZhdGFsLCAvKnJlcG9ydFRvQ29uc29sZSovIHRydWUpO1xuICB9IGZpbmFsbHkge1xuICAgIGluRXhjZXB0aW9uSGFuZGxlciA9IGZhbHNlO1xuICB9XG59XG5cbi8qICRGbG93Rml4TWVbbWlzc2luZy1sb2NhbC1hbm5vdF0gVGhlIHR5cGUgYW5ub3RhdGlvbihzKSByZXF1aXJlZCBieSBGbG93J3NcbiAqIExUSSB1cGRhdGUgY291bGQgbm90IGJlIGFkZGVkIHZpYSBjb2RlbW9kICovXG5mdW5jdGlvbiByZWFjdENvbnNvbGVFcnJvckhhbmRsZXIoLi4uYXJncykge1xuICAvLyBidWJibGUgdXAgdG8gYW55IG9yaWdpbmFsIGhhbmRsZXJzXG4gIGNvbnNvbGUuX2Vycm9yT3JpZ2luYWwoLi4uYXJncyk7XG4gIGlmICghY29uc29sZS5yZXBvcnRFcnJvcnNBc0V4Y2VwdGlvbnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGluRXhjZXB0aW9uSGFuZGxlcikge1xuICAgIC8vIFRoZSBmdW5kYW1lbnRhbCB0cmljayBoZXJlIGlzIHRoYXQgYXJlIG11bHRpcGxlIGVudHJ5IHBvaW50IHRvIGxvZ2dpbmcgZXJyb3JzOlxuICAgIC8vIChzZWUgRDE5NzQzMDc1IGZvciBtb3JlIGJhY2tncm91bmQpXG4gICAgLy9cbiAgICAvLyAxLiBBbiB1bmNhdWdodCBleGNlcHRpb24gYmVpbmcgY2F1Z2h0IGJ5IHRoZSBnbG9iYWwgaGFuZGxlclxuICAgIC8vIDIuIEFuIGVycm9yIGJlaW5nIGxvZ2dlZCB0aHJvdyBjb25zb2xlLmVycm9yXG4gICAgLy9cbiAgICAvLyBIb3dldmVyLCBjb25zb2xlLmVycm9yIGlzIG1vbmtleSBwYXRjaGVkIG11bHRpcGxlIHRpbWVzOiBieSB0aGlzIG1vZHVsZSwgYW5kIGJ5IHRoZVxuICAgIC8vIERldlRvb2xzIHNldHVwIHRoYXQgc2VuZHMgbWVzc2FnZXMgdG8gTWV0cm8uXG4gICAgLy8gVGhlIHBhdGNoaW5nIG9yZGVyIGNhbm5vdCBiZSByZWxpZWQgdXBvbi5cbiAgICAvL1xuICAgIC8vIFNvLCBzb21lIHNjZW5hcmlvcyB0aGF0IGFyZSBoYW5kbGVkIGJ5IHRoaXMgZmxhZzpcbiAgICAvL1xuICAgIC8vIExvZ2dpbmcgYW4gZXJyb3I6XG4gICAgLy8gMS4gY29uc29sZS5lcnJvciBjYWxsZWQgZnJvbSB1c2VyIGNvZGVcbiAgICAvLyAyLiAocG9zc2libHkpIGFycml2ZXMgX2ZpcnN0XyBhdCBEZXZUb29sIGhhbmRsZXIsIHNlbmQgdG8gTWV0cm9cbiAgICAvLyAzLiBCdWJibGVzIHRvIGhlcmVcbiAgICAvLyA0LiBnb2VzIGludG8gcmVwb3J0IEV4Y2VwdGlvbi5cbiAgICAvLyA1LiBzaG91bGQgbm90IHRyaWdnZXIgY29uc29sZS5lcnJvciBhZ2FpbiwgdG8gYXZvaWQgbG9vcGluZyAvIGxvZ2dpbmcgdHdpY2VcbiAgICAvLyA2LiBzaG91bGQgc3RpbGwgYnViYmxlIHVwIHRvIG9yaWdpbmFsIGNvbnNvbGVcbiAgICAvLyAgICAod2hpY2ggbWlnaHQgZWl0aGVyIGJlIGNvbnNvbGUubG9nLCBvciB0aGUgRGV2VG9vbHMgaGFuZGxlciBpbiBjYXNlIGl0IHBhdGNoZWQgX2VhcmxpZXJfIGFuZCAoMikgZGlkbid0IGhhcHBlbilcbiAgICAvL1xuICAgIC8vIFRocm93aW5nIGFuIHVuY2F1Z2h0IGV4Y2VwdGlvbjpcbiAgICAvLyAxLiBleGNlcHRpb24gdGhyb3duXG4gICAgLy8gMi4gcGlja2VkIHVwIGJ5IGhhbmRsZUV4Y2VwdGlvblxuICAgIC8vIDMuIHNob3VsZCBiZSBzZW50IHRvIGNvbnNvbGUuZXJyb3IgKG5vdCBjb25zb2xlLl9lcnJvck9yaWdpbmFsLCBhcyBEZXZUb29scyBtaWdodCBoYXZlIHBhdGNoZWQgX2xhdGVyXyBhbmQgaXQgbmVlZHMgdG8gc2VuZCBpdCB0byBNZXRybylcbiAgICAvLyA0LiB0aGF0IF9taWdodF8gYnViYmxlIGFnYWluIHRvIHRoZSBgcmVhY3RDb25zb2xlRXJyb3JIYW5kbGVgIGRlZmluZWQgaGVyZVxuICAgIC8vICAgIC0+IHNob3VsZCBub3QgaGFuZGxlIGV4Y2VwdGlvbiBfYWdhaW5fLCB0byBhdm9pZCBsb29waW5nIC8gc2hvd2luZyB0d2ljZSAodGhpcyBjb2RlIGJyYW5jaClcbiAgICAvLyA1LiBzaG91bGQgc3RpbGwgYnViYmxlIHVwIHRvIG9yaWdpbmFsIGNvbnNvbGUgKHdoaWNoIG1pZ2h0IGVpdGhlciBiZSBjb25zb2xlLmxvZywgb3IgdGhlIERldlRvb2xzIGhhbmRsZXIgaW4gY2FzZSB0aGF0IG9uZSBwYXRjaGVkIF9lYXJsaWVyXylcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgZXJyb3I7XG5cbiAgY29uc3QgZmlyc3RBcmcgPSBhcmdzWzBdO1xuICBpZiAoZmlyc3RBcmc/LnN0YWNrKSB7XG4gICAgLy8gcmVwb3J0RXhjZXB0aW9uIHdpbGwgY29uc29sZS5lcnJvciB0aGlzIHdpdGggaGlnaCBlbm91Z2ggZmlkZWxpdHkuXG4gICAgZXJyb3IgPSBmaXJzdEFyZztcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzdHJpbmdpZnlTYWZlID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL3N0cmluZ2lmeVNhZmUnKS5kZWZhdWx0O1xuICAgIGlmICh0eXBlb2YgZmlyc3RBcmcgPT09ICdzdHJpbmcnICYmIGZpcnN0QXJnLnN0YXJ0c1dpdGgoJ1dhcm5pbmc6ICcpKSB7XG4gICAgICAvLyBSZWFjdCB3YXJuaW5ncyB1c2UgY29uc29sZS5lcnJvciBzbyB0aGF0IGEgc3RhY2sgdHJhY2UgaXMgc2hvd24sIGJ1dFxuICAgICAgLy8gd2UgZG9uJ3QgKGN1cnJlbnRseSkgd2FudCB0aGVzZSB0byBzaG93IGEgcmVkYm94XG4gICAgICAvLyAoTm90ZTogTG9naWMgZHVwbGljYXRlZCBpbiBwb2x5ZmlsbHMvY29uc29sZS5qcy4pXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBhcmdzXG4gICAgICAubWFwKGFyZyA9PiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgPyBhcmcgOiBzdHJpbmdpZnlTYWZlKGFyZykpKVxuICAgICAgLmpvaW4oJyAnKTtcblxuICAgIGVycm9yID0gbmV3IFN5bnRoZXRpY0Vycm9yKG1lc3NhZ2UpO1xuICAgIGVycm9yLm5hbWUgPSAnY29uc29sZS5lcnJvcic7XG4gIH1cblxuICByZXBvcnRFeGNlcHRpb24oXG4gICAgLyogJEZsb3dGaXhNZVtjbGFzcy1vYmplY3Qtc3VidHlwaW5nXSBhZGRlZCB3aGVuIGltcHJvdmluZyB0eXBpbmcgZm9yIHRoaXNcbiAgICAgKiBwYXJhbWV0ZXJzICovXG4gICAgZXJyb3IsXG4gICAgZmFsc2UsIC8vIGlzRmF0YWxcbiAgICBmYWxzZSwgLy8gcmVwb3J0VG9Db25zb2xlXG4gICk7XG59XG5cbi8qKlxuICogU2hvd3MgYSByZWRib3ggd2l0aCBzdGFja3RyYWNlIGZvciBhbGwgY29uc29sZS5lcnJvciBtZXNzYWdlcy4gIERpc2FibGUgYnlcbiAqIHNldHRpbmcgYGNvbnNvbGUucmVwb3J0RXJyb3JzQXNFeGNlcHRpb25zID0gZmFsc2U7YCBpbiB5b3VyIGFwcC5cbiAqL1xuZnVuY3Rpb24gaW5zdGFsbENvbnNvbGVFcnJvclJlcG9ydGVyKCkge1xuICAvLyBFbmFibGUgcmVwb3J0RXJyb3JzQXNFeGNlcHRpb25zXG4gIGlmIChjb25zb2xlLl9lcnJvck9yaWdpbmFsKSB7XG4gICAgcmV0dXJuOyAvLyBhbHJlYWR5IGluc3RhbGxlZFxuICB9XG4gIC8vIEZsb3cgZG9lc24ndCBsaWtlIGl0IHdoZW4geW91IHNldCBhcmJpdHJhcnkgdmFsdWVzIG9uIGEgZ2xvYmFsIG9iamVjdFxuICBjb25zb2xlLl9lcnJvck9yaWdpbmFsID0gY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpO1xuICBjb25zb2xlLmVycm9yID0gcmVhY3RDb25zb2xlRXJyb3JIYW5kbGVyO1xuICBpZiAoY29uc29sZS5yZXBvcnRFcnJvcnNBc0V4Y2VwdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIEluZGl2aWR1YWwgYXBwcyBjYW4gZGlzYWJsZSB0aGlzXG4gICAgLy8gRmxvdyBkb2Vzbid0IGxpa2UgaXQgd2hlbiB5b3Ugc2V0IGFyYml0cmFyeSB2YWx1ZXMgb24gYSBnbG9iYWwgb2JqZWN0XG4gICAgY29uc29sZS5yZXBvcnRFcnJvcnNBc0V4Y2VwdGlvbnMgPSB0cnVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZWNvcmF0ZWRFeHRyYURhdGFLZXksXG4gIGhhbmRsZUV4Y2VwdGlvbixcbiAgaW5zdGFsbENvbnNvbGVFcnJvclJlcG9ydGVyLFxuICBTeW50aGV0aWNFcnJvcixcbiAgdW5zdGFibGVfc2V0RXhjZXB0aW9uRGVjb3JhdG9yLFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFHLGdCQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSSxVQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSywyQkFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQU0sZ0JBQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFPLGlCQUFBLEdBQUFSLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxTQUFBUSxRQUFBQyxDQUFBLEVBQUFDLENBQUEsUUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLElBQUEsQ0FBQUosQ0FBQSxPQUFBRyxNQUFBLENBQUFFLHFCQUFBLFFBQUFDLENBQUEsR0FBQUgsTUFBQSxDQUFBRSxxQkFBQSxDQUFBTCxDQUFBLEdBQUFDLENBQUEsS0FBQUssQ0FBQSxHQUFBQSxDQUFBLENBQUFDLE1BQUEsV0FBQU4sQ0FBQSxXQUFBRSxNQUFBLENBQUFLLHdCQUFBLENBQUFSLENBQUEsRUFBQUMsQ0FBQSxFQUFBUSxVQUFBLE9BQUFQLENBQUEsQ0FBQVEsSUFBQSxDQUFBQyxLQUFBLENBQUFULENBQUEsRUFBQUksQ0FBQSxZQUFBSixDQUFBO0FBQUEsU0FBQVUsY0FBQVosQ0FBQSxhQUFBQyxD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