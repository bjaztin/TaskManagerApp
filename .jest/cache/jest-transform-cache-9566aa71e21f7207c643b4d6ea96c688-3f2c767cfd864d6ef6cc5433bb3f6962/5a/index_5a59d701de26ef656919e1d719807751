429b68979d5d99ce3f2aaab8143bf82c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _interface = require("../../../interface");
var _style = _interopRequireDefault(require("./style"));
var _dot = _interopRequireDefault(require("../dot"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var PeriodDay = function PeriodDay(props) {
  var theme = props.theme,
    marking = props.marking,
    date = props.date,
    onPress = props.onPress,
    onLongPress = props.onLongPress,
    state = props.state,
    accessibilityLabel = props.accessibilityLabel,
    testID = props.testID,
    children = props.children;
  var dateData = date ? (0, _interface.xdateToData)(date) : undefined;
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var markingStyle = (0, _react.useMemo)(function () {
    var defaultStyle = {
      textStyle: {},
      containerStyle: {}
    };
    if (!marking) {
      return defaultStyle;
    } else {
      if (marking.disabled) {
        defaultStyle.textStyle = {
          color: style.current.disabledText.color
        };
      } else if (marking.inactive) {
        defaultStyle.textStyle = {
          color: style.current.inactiveText.color
        };
      } else if (marking.selected) {
        defaultStyle.textStyle = {
          color: style.current.selectedText.color
        };
      }
      if (marking.startingDay) {
        defaultStyle.startingDay = {
          backgroundColor: marking.color
        };
      }
      if (marking.endingDay) {
        defaultStyle.endingDay = {
          backgroundColor: marking.color
        };
      }
      if (!marking.startingDay && !marking.endingDay) {
        defaultStyle.day = {
          backgroundColor: marking.color
        };
      }
      if (marking.textColor) {
        defaultStyle.textStyle = {
          color: marking.textColor
        };
      }
      if (marking.customTextStyle) {
        defaultStyle.textStyle = marking.customTextStyle;
      }
      if (marking.customContainerStyle) {
        defaultStyle.containerStyle = marking.customContainerStyle;
      }
      return defaultStyle;
    }
  }, [marking]);
  var containerStyle = (0, _react.useMemo)(function () {
    var containerStyle = [style.current.base];
    if (state === 'today') {
      containerStyle.push(style.current.today);
    }
    if (marking) {
      containerStyle.push({
        borderRadius: 17,
        overflow: 'hidden'
      });
      if (markingStyle.containerStyle) {
        containerStyle.push(markingStyle.containerStyle);
      }
      var start = markingStyle.startingDay;
      var end = markingStyle.endingDay;
      if (start && !end) {
        var _markingStyle$startin;
        containerStyle.push({
          backgroundColor: (_markingStyle$startin = markingStyle.startingDay) == null ? void 0 : _markingStyle$startin.backgroundColor
        });
      } else if (end && !start || end && start) {
        var _markingStyle$endingD;
        containerStyle.push({
          backgroundColor: (_markingStyle$endingD = markingStyle.endingDay) == null ? void 0 : _markingStyle$endingD.backgroundColor
        });
      }
    }
    return containerStyle;
  }, [marking, state]);
  var textStyle = (0, _react.useMemo)(function () {
    var textStyle = [style.current.text];
    if (state === 'disabled') {
      textStyle.push(style.current.disabledText);
    } else if (state === 'inactive') {
      textStyle.push(style.current.inactiveText);
    } else if (state === 'today') {
      textStyle.push(style.current.todayText);
    }
    if (marking) {
      if (markingStyle.textStyle) {
        textStyle.push(markingStyle.textStyle);
      }
    }
    return textStyle;
  }, [marking, state]);
  var fillerStyles = (0, _react.useMemo)(function () {
    var leftFillerStyle = {
      backgroundColor: undefined
    };
    var rightFillerStyle = {
      backgroundColor: undefined
    };
    var fillerStyle = {};
    var start = markingStyle.startingDay;
    var end = markingStyle.endingDay;
    if (start && !end) {
      var _markingStyle$startin2;
      rightFillerStyle.backgroundColor = (_markingStyle$startin2 = markingStyle.startingDay) == null ? void 0 : _markingStyle$startin2.backgroundColor;
    } else if (end && !start) {
      var _markingStyle$endingD2;
      leftFillerStyle.backgroundColor = (_markingStyle$endingD2 = markingStyle.endingDay) == null ? void 0 : _markingStyle$endingD2.backgroundColor;
    } else if (markingStyle.day) {
      var _markingStyle$day, _markingStyle$day2, _markingStyle$day3;
      leftFillerStyle.backgroundColor = (_markingStyle$day = markingStyle.day) == null ? void 0 : _markingStyle$day.backgroundColor;
      rightFillerStyle.backgroundColor = (_markingStyle$day2 = markingStyle.day) == null ? void 0 : _markingStyle$day2.backgroundColor;
      fillerStyle = {
        backgroundColor: (_markingStyle$day3 = markingStyle.day) == null ? void 0 : _markingStyle$day3.backgroundColor
      };
    }
    return {
      leftFillerStyle: leftFillerStyle,
      rightFillerStyle: rightFillerStyle,
      fillerStyle: fillerStyle
    };
  }, [marking]);
  var renderFillers = function renderFillers() {
    if (marking) {
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [style.current.fillers, fillerStyles.fillerStyle],
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [style.current.leftFiller, fillerStyles.leftFillerStyle]
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [style.current.rightFiller, fillerStyles.rightFillerStyle]
        })]
      });
    }
  };
  var _onPress = (0, _react.useCallback)(function () {
    onPress == null ? void 0 : onPress(dateData);
  }, [onPress]);
  var _onLongPress = (0, _react.useCallback)(function () {
    onLongPress == null ? void 0 : onLongPress(dateData);
  }, [onLongPress]);
  var Component = marking ? _reactNative.TouchableWithoutFeedback : _reactNative.TouchableOpacity;
  return (0, _jsxRuntime.jsx)(Component, {
    testID: testID,
    onPress: _onPress,
    onLongPress: _onLongPress,
    disabled: marking == null ? void 0 : marking.disableTouchEvent,
    accessible: true,
    accessibilityRole: marking != null && marking.disableTouchEvent ? undefined : 'button',
    accessibilityLabel: accessibilityLabel,
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: style.current.wrapper,
      children: [renderFillers(), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: containerStyle,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          allowFontScaling: false,
          style: textStyle,
          children: String(children)
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: style.current.dotContainer,
          children: (0, _jsxRuntime.jsx)(_dot.default, {
            theme: theme,
            color: marking == null ? void 0 : marking.dotColor,
            marked: marking == null ? void 0 : marking.marked
          })
        })]
      })]
    })
  });
};
var _default = PeriodDay;
exports.default = _default;
PeriodDay.displayName = 'PeriodDay';
PeriodDay.propTypes = {
  state: _propTypes.default.oneOf(['selected', 'disabled', 'inactive', 'today', '']),
  marking: _propTypes.default.any,
  theme: _propTypes.default.object,
  onPress: _propTypes.default.func,
  onLongPress: _propTypes.default.func,
  date: _propTypes.default.string
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,