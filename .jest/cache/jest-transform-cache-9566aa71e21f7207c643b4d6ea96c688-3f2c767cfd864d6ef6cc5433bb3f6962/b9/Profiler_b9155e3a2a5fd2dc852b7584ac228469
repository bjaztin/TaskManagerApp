1f040687696492aa1cdcad2793d4d94d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logProfileData = exports.getProfileData = exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var cumulativeDuration = {};
var Profiler = function (_React$Component) {
  (0, _inherits2.default)(Profiler, _React$Component);
  var _super = _createSuper(Profiler);
  function Profiler() {
    var _this;
    (0, _classCallCheck2.default)(this, Profiler);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.onRender = function () {
      for (var _len2 = arguments.length, profileData = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        profileData[_key2] = arguments[_key2];
      }
      logProfileData(getProfileData(profileData));
    };
    return _this;
  }
  (0, _createClass2.default)(Profiler, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        children = _this$props.children,
        id = _this$props.id;
      return (0, _jsxRuntime.jsx)(_react.Profiler, {
        id: id,
        onRender: this.onRender,
        children: children
      });
    }
  }]);
  return Profiler;
}(_react.default.Component);
exports.default = Profiler;
var getProfileData = function getProfileData(_ref) {
  var _cumulativeDuration$i;
  var _ref2 = (0, _slicedToArray2.default)(_ref, 7),
    id = _ref2[0],
    phase = _ref2[1],
    actualDuration = _ref2[2],
    baseDuration = _ref2[3],
    startTime = _ref2[4],
    commitTime = _ref2[5],
    interactions = _ref2[6];
  cumulativeDuration[id] = Number((((_cumulativeDuration$i = cumulativeDuration[id]) != null ? _cumulativeDuration$i : 0) + actualDuration).toFixed(2));
  return {
    id: id,
    interactions: interactions,
    phase: phase,
    actualDuration: Number(actualDuration.toFixed(2)),
    baseDuration: Number(baseDuration.toFixed(2)),
    commitTime: Number(commitTime.toFixed(2)),
    cumulativeDuration: cumulativeDuration[id],
    startTime: Number(startTime.toFixed(2))
  };
};
exports.getProfileData = getProfileData;
var logProfileData = function logProfileData(_ref3) {
  var id = _ref3.id,
    actualDuration = _ref3.actualDuration,
    cumulativeDuration = _ref3.cumulativeDuration,
    phase = _ref3.phase;
  console.group(phase);
  console.log(id, ':', actualDuration, cumulativeDuration);
  console.groupEnd();
};
exports.logProfileData = logProfileData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,