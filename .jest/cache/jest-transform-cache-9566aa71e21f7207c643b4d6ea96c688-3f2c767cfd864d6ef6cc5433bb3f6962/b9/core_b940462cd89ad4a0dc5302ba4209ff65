a55bf834956655833be03e043ded389e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkPluginState = void 0;
exports.configureLayoutAnimations = configureLayoutAnimations;
exports.configureProps = configureProps;
exports.enableLayoutAnimations = enableLayoutAnimations;
exports.getSensorContainer = getSensorContainer;
exports.getViewProp = getViewProp;
exports.initializeSensor = initializeSensor;
exports.makeShareable = exports.makeRemote = exports.makeMutable = exports.isConfiguredCheck = exports.isConfigured = void 0;
exports.registerEventHandler = registerEventHandler;
exports.registerSensor = registerSensor;
Object.defineProperty(exports, "runOnJS", {
  enumerable: true,
  get: function get() {
    return _threads.runOnJS;
  }
});
Object.defineProperty(exports, "runOnUI", {
  enumerable: true,
  get: function get() {
    return _threads.runOnUI;
  }
});
exports.startMapper = void 0;
Object.defineProperty(exports, "stopMapper", {
  enumerable: true,
  get: function get() {
    return _mappers.stopMapper;
  }
});
exports.subscribeForKeyboardEvents = subscribeForKeyboardEvents;
exports.unregisterEventHandler = unregisterEventHandler;
exports.unregisterSensor = unregisterSensor;
exports.unsubscribeFromKeyboardEvents = unsubscribeFromKeyboardEvents;
var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));
var _PlatformChecker = require("./PlatformChecker");
var _shareables = require("./shareables");
var _mappers = require("./mappers");
var _mutables = require("./mutables");
var _initializers = require("./initializers");
var _SensorContainer = require("./SensorContainer");
var _threads = require("./threads");
var _worklet_16556756009009_init_data = {
  code: "function anonymous() {}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/core.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/core.js\"],\"mappings\":\"AASoB,SAAAA,SAEpBA,CAAA\"}"
};
var testWorklet = function () {
  var _e = [new global.Error(), 1, -27];
  var _f = function _f() {};
  _f._closure = {};
  _f.__initData = _worklet_16556756009009_init_data;
  _f.__workletHash = 16556756009009;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
var throwUninitializedReanimatedException = function throwUninitializedReanimatedException() {
  throw new Error("Failed to initialize react-native-reanimated library, make sure you followed installation steps here: https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/installation/ \n1) Make sure reanimated's babel plugin is installed in your babel.config.js (you should have 'react-native-reanimated/plugin' listed there - also see the above link for details) \n2) Make sure you reset build cache after updating the config, run: yarn start --reset-cache");
};
var checkPluginState = function checkPluginState() {
  var throwError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  if (!testWorklet.__workletHash && !(0, _PlatformChecker.shouldBeUseWeb)()) {
    if (throwError) {
      throwUninitializedReanimatedException();
    }
    return false;
  }
  return true;
};
exports.checkPluginState = checkPluginState;
var isConfigured = function isConfigured() {
  var throwError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return checkPluginState(throwError);
};
exports.isConfigured = isConfigured;
var isConfiguredCheck = function isConfiguredCheck() {
  checkPluginState(true);
};
exports.isConfiguredCheck = isConfiguredCheck;
var configurationCheckWrapper = __DEV__ ? function (fn) {
  return function () {
    isConfigured(true);
    return fn.apply(void 0, arguments);
  };
} : function (fn) {
  return fn;
};
var startMapper = __DEV__ ? configurationCheckWrapper(_mappers.startMapper) : _mappers.startMapper;
exports.startMapper = startMapper;
var makeShareable = __DEV__ ? configurationCheckWrapper(_shareables.makeShareable) : _shareables.makeShareable;
exports.makeShareable = makeShareable;
var makeMutable = __DEV__ ? configurationCheckWrapper(_mutables.makeMutable) : _mutables.makeMutable;
exports.makeMutable = makeMutable;
var makeRemote = __DEV__ ? configurationCheckWrapper(_mutables.makeRemote) : _mutables.makeRemote;
exports.makeRemote = makeRemote;
global._WORKLET = false;
global._log = function (s) {
  console.log(s);
};
function getViewProp(viewTag, propName) {
  if (global._IS_FABRIC) {
    throw new Error('[react-native-reanimated] `getViewProp` is not supported on Fabric yet');
  }
  return new Promise(function (resolve, reject) {
    return _NativeReanimated.default.getViewProp(viewTag, propName, function (result) {
      if (typeof result === 'string' && result.substr(0, 6) === 'error:') {
        reject(result);
      } else {
        resolve(result);
      }
    });
  });
}
function getSensorContainer() {
  if (!global.__sensorContainer) {
    global.__sensorContainer = new _SensorContainer.SensorContainer();
  }
  return global.__sensorContainer;
}
var _worklet_4585136441649_init_data = {
  code: "function handleAndFlushAnimationFrame(eventTimestamp, event) {\n  const {\n    eventHandler\n  } = this._closure;\n  global.__frameTimestamp = eventTimestamp;\n  eventHandler(event);\n  global.__flushAnimationFrame(eventTimestamp);\n  global.__frameTimestamp = undefined;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/core.js",
  sourceMap: "{\"version\":3,\"names\":[\"handleAndFlushAnimationFrame\",\"eventTimestamp\",\"event\",\"eventHandler\",\"_closure\",\"global\",\"__frameTimestamp\",\"__flushAnimationFrame\",\"undefined\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/core.js\"],\"mappings\":\"AAmEE,SAAAA,4BAASA,CAA6BC,cAAA,EAAcC,KAAE,EAAK;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAGzDC,MAAM,CAACC,gBAAgB,GAAGL,cAAc;EACxCE,YAAY,CAACD,KAAK,CAAC;EACnBG,MAAM,CAACE,qBAAqB,CAACN,cAAc,CAAC;EAC5CI,MAAM,CAACC,gBAAgB,GAAGE,SAAS;AACrC\"}"
};
function registerEventHandler(eventHash, eventHandler) {
  var handleAndFlushAnimationFrame = function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f(eventTimestamp, event) {
      global.__frameTimestamp = eventTimestamp;
      eventHandler(event);
      global.__flushAnimationFrame(eventTimestamp);
      global.__frameTimestamp = undefined;
    };
    _f._closure = {
      eventHandler: eventHandler
    };
    _f.__initData = _worklet_4585136441649_init_data;
    _f.__workletHash = 4585136441649;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }();
  return _NativeReanimated.default.registerEventHandler(eventHash, (0, _shareables.makeShareableCloneRecursive)(handleAndFlushAnimationFrame));
}
function unregisterEventHandler(id) {
  return _NativeReanimated.default.unregisterEventHandler(id);
}
var _worklet_13154374331073_init_data = {
  code: "function handleAndFlushAnimationFrame(state, height) {\n  const {\n    eventHandler\n  } = this._closure;\n  const now = performance.now();\n  global.__frameTimestamp = now;\n  eventHandler(state, height);\n  global.__flushAnimationFrame(now);\n  global.__frameTimestamp = undefined;\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/core.js",
  sourceMap: "{\"version\":3,\"names\":[\"handleAndFlushAnimationFrame\",\"state\",\"height\",\"eventHandler\",\"_closure\",\"now\",\"performance\",\"global\",\"__frameTimestamp\",\"__flushAnimationFrame\",\"undefined\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/core.js\"],\"mappings\":\"AAiFE,SAAAA,6BAAAC,KAAA,EAAAC,MAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,MAAAC,GAAA,GAAAC,WAAA,CAAAD,GAAA;EACAE,MAAA,CAAAC,gBAAA,GAAAH,GAAA;EACAF,YAAS,CAAAF,KAAA,EAAAC,MAAA;EAGPK,MAAM,CAAAE,qBAAsB,CAACJ,GAAA;EAC7BE,MAAM,CAACC,gBAAgB,GAAGE,SAAG\"}"
};
function subscribeForKeyboardEvents(eventHandler, options) {
  var _options$isStatusBarT;
  var handleAndFlushAnimationFrame = function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f(state, height) {
      var now = performance.now();
      global.__frameTimestamp = now;
      eventHandler(state, height);
      global.__flushAnimationFrame(now);
      global.__frameTimestamp = undefined;
    };
    _f._closure = {
      eventHandler: eventHandler
    };
    _f.__initData = _worklet_13154374331073_init_data;
    _f.__workletHash = 13154374331073;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }();
  return _NativeReanimated.default.subscribeForKeyboardEvents((0, _shareables.makeShareableCloneRecursive)(handleAndFlushAnimationFrame), (_options$isStatusBarT = options.isStatusBarTranslucentAndroid) != null ? _options$isStatusBarT : false);
}
function unsubscribeFromKeyboardEvents(listenerId) {
  return _NativeReanimated.default.unsubscribeFromKeyboardEvents(listenerId);
}
function registerSensor(sensorType, config, eventHandler) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.registerSensor(sensorType, config, (0, _shareables.makeShareableCloneRecursive)(eventHandler));
}
function initializeSensor(sensorType, config) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.initializeSensor(sensorType, config);
}
function unregisterSensor(sensorId) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.unregisterSensor(sensorId);
}
if (!(0, _PlatformChecker.isWeb)() && isConfigured()) {
  (0, _initializers.initializeUIRuntime)();
}
var featuresConfig = {
  enableLayoutAnimations: false,
  setByUser: false
};
function enableLayoutAnimations(flag) {
  var isCallByUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  if (isCallByUser) {
    featuresConfig = {
      enableLayoutAnimations: flag,
      setByUser: true
    };
    _NativeReanimated.default.enableLayoutAnimations(flag);
  } else if (!featuresConfig.setByUser && featuresConfig.enableLayoutAnimations !== flag) {
    featuresConfig.enableLayoutAnimations = flag;
    _NativeReanimated.default.enableLayoutAnimations(flag);
  }
}
function configureLayoutAnimations(viewTag, type, config) {
  var sharedTransitionTag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
  _NativeReanimated.default.configureLayoutAnimation(viewTag, type, sharedTransitionTag, (0, _shareables.makeShareableCloneRecursive)(config));
}
function configureProps(uiProps, nativeProps) {
  if (!(0, _PlatformChecker.nativeShouldBeMock)()) {
    _NativeReanimated.default.configureProps(uiProps, nativeProps);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,