c9458e869fb0624c638f191bf0ff518f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Overlay = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Overlay = function Overlay(_a) {
  var children = _a.children,
    backdropStyle = _a.backdropStyle,
    overlayStyle = _a.overlayStyle,
    onBackdropPress = _a.onBackdropPress,
    fullScreen = _a.fullScreen,
    _a$ModalComponent = _a.ModalComponent,
    ModalComponent = _a$ModalComponent === void 0 ? _reactNative.Modal : _a$ModalComponent,
    isVisible = _a.isVisible,
    rest = __rest(_a, ["children", "backdropStyle", "overlayStyle", "onBackdropPress", "fullScreen", "ModalComponent", "isVisible"]);
  return (0, _jsxRuntime.jsxs)(ModalComponent, _objectSpread(_objectSpread({
    visible: isVisible,
    onRequestClose: onBackdropPress,
    transparent: true
  }, rest), {}, {
    children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableWithoutFeedback, {
      onPress: onBackdropPress,
      testID: "RNE__Overlay__backdrop",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        testID: "backdrop",
        style: _reactNative.StyleSheet.flatten([styles.backdrop, backdropStyle])
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.container,
      pointerEvents: "box-none",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.overlay, fullScreen && styles.fullscreen, overlayStyle]),
        children: children
      })
    })]
  }));
};
exports.Overlay = Overlay;
Overlay.defaultProps = {
  fullScreen: false,
  onBackdropPress: function onBackdropPress() {
    return null;
  },
  ModalComponent: _reactNative.Modal
};
var styles = _reactNative.StyleSheet.create({
  backdrop: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, .4)'
  },
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  },
  fullscreen: {
    width: '100%',
    height: '100%'
  },
  overlay: Object.assign({
    backgroundColor: 'white',
    borderRadius: 3,
    padding: 10
  }, _reactNative.Platform.select({
    android: {
      elevation: 2
    },
    default: {
      shadowColor: 'rgba(0, 0, 0, .3)',
      shadowOffset: {
        width: 0,
        height: 1
      },
      shadowRadius: 4
    }
  }))
});
var _default = (0, _config.withTheme)(Overlay, 'Overlay');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfanN4UnVudGltZSIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fcmVzdCIsInMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImkiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk92ZXJsYXkiLCJfYSIsImNoaWxkcmVuIiwiYmFja2Ryb3BTdHlsZSIsIm92ZXJsYXlTdHlsZSIsIm9uQmFja2Ryb3BQcmVzcyIsImZ1bGxTY3JlZW4iLCJfYSRNb2RhbENvbXBvbmVudCIsIk1vZGFsQ29tcG9uZW50IiwiTW9kYWwiLCJpc1Zpc2libGUiLCJyZXN0IiwianN4cyIsInZpc2libGUiLCJvblJlcXVlc3RDbG9zZSIsInRyYW5zcGFyZW50IiwianN4IiwiVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIiwib25QcmVzcyIsInRlc3RJRCIsIlZpZXciLCJzdHlsZSIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwic3R5bGVzIiwiYmFja2Ryb3AiLCJjb250YWluZXIiLCJwb2ludGVyRXZlbnRzIiwib3ZlcmxheSIsImZ1bGxzY3JlZW4iLCJleHBvcnRzIiwiZGVmYXVsdFByb3BzIiwiY3JlYXRlIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0Iiwid2lkdGgiLCJoZWlnaHQiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJmbGV4IiwiYXNzaWduIiwiYm9yZGVyUmFkaXVzIiwicGFkZGluZyIsIlBsYXRmb3JtIiwic2VsZWN0IiwiYW5kcm9pZCIsImVsZXZhdGlvbiIsInNoYWRvd0NvbG9yIiwic2hhZG93T2Zmc2V0Iiwic2hhZG93UmFkaXVzIiwiX2RlZmF1bHQiLCJ3aXRoVGhlbWUiXSwic291cmNlcyI6WyJPdmVybGF5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWaWV3LCBTdHlsZVNoZWV0LCBQbGF0Zm9ybSwgVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrLCBNb2RhbCwgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29uZmlnJztcbmNvbnN0IE92ZXJsYXkgPSAoX2EpID0+IHtcbiAgICB2YXIgeyBjaGlsZHJlbiwgYmFja2Ryb3BTdHlsZSwgb3ZlcmxheVN0eWxlLCBvbkJhY2tkcm9wUHJlc3MsIGZ1bGxTY3JlZW4sIE1vZGFsQ29tcG9uZW50ID0gTW9kYWwsIGlzVmlzaWJsZSB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcImNoaWxkcmVuXCIsIFwiYmFja2Ryb3BTdHlsZVwiLCBcIm92ZXJsYXlTdHlsZVwiLCBcIm9uQmFja2Ryb3BQcmVzc1wiLCBcImZ1bGxTY3JlZW5cIiwgXCJNb2RhbENvbXBvbmVudFwiLCBcImlzVmlzaWJsZVwiXSk7XG4gICAgcmV0dXJuICg8TW9kYWxDb21wb25lbnQgdmlzaWJsZT17aXNWaXNpYmxlfSBvblJlcXVlc3RDbG9zZT17b25CYWNrZHJvcFByZXNzfSB0cmFuc3BhcmVudCB7Li4ucmVzdH0+XG4gICAgPFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayBvblByZXNzPXtvbkJhY2tkcm9wUHJlc3N9IHRlc3RJRD1cIlJORV9fT3ZlcmxheV9fYmFja2Ryb3BcIj5cbiAgICAgIDxWaWV3IHRlc3RJRD1cImJhY2tkcm9wXCIgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbc3R5bGVzLmJhY2tkcm9wLCBiYWNrZHJvcFN0eWxlXSl9Lz5cbiAgICA8L1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaz5cblxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfSBwb2ludGVyRXZlbnRzPVwiYm94LW5vbmVcIj5cbiAgICAgIDxWaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgc3R5bGVzLm92ZXJsYXksXG4gICAgICAgICAgICBmdWxsU2NyZWVuICYmIHN0eWxlcy5mdWxsc2NyZWVuLFxuICAgICAgICAgICAgb3ZlcmxheVN0eWxlLFxuICAgICAgICBdKX0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVmlldz5cbiAgICA8L1ZpZXc+XG4gIDwvTW9kYWxDb21wb25lbnQ+KTtcbn07XG5PdmVybGF5LmRlZmF1bHRQcm9wcyA9IHtcbiAgICBmdWxsU2NyZWVuOiBmYWxzZSxcbiAgICBvbkJhY2tkcm9wUHJlc3M6ICgpID0+IG51bGwsXG4gICAgTW9kYWxDb21wb25lbnQ6IE1vZGFsLFxufTtcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBiYWNrZHJvcDoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAuNCknLFxuICAgIH0sXG4gICAgY29udGFpbmVyOiB7XG4gICAgICAgIGZsZXg6IDEsXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgfSxcbiAgICBmdWxsc2NyZWVuOiB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgIH0sXG4gICAgb3ZlcmxheTogT2JqZWN0LmFzc2lnbih7IGJhY2tncm91bmRDb2xvcjogJ3doaXRlJywgYm9yZGVyUmFkaXVzOiAzLCBwYWRkaW5nOiAxMCB9LCBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICBhbmRyb2lkOiB7XG4gICAgICAgICAgICBlbGV2YXRpb246IDIsXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgwLCAwLCAwLCAuMyknLFxuICAgICAgICAgICAgc2hhZG93T2Zmc2V0OiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDEgfSxcbiAgICAgICAgICAgIHNoYWRvd1JhZGl1czogNCxcbiAgICAgICAgfSxcbiAgICB9KSksXG59KTtcbmV4cG9ydCB7IE92ZXJsYXkgfTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShPdmVybGF5LCAnT3ZlcmxheScpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFXQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFBc0MsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBQUEsU0FBQUksUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFBLEVBQUFDLENBQUEsRUFBQVEsVUFBQSxPQUFBUCxDQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxDQUFBLEVBQUFJLENBQUEsWUFBQUosQ0FBQTtBQUFBLFNBQUFVLGNBQUFaLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFZLFNBQUEsQ0FBQUMsTUFBQSxFQUFBYixDQUFBLFVBQUFDLENBQUEsV0FBQVcsU0FBQSxDQUFBWixDQUFBLElBQUFZLFNBQUEsQ0FBQVosQ0FBQSxRQUFBQSxDQUFBLE9BQUFGLE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLE9BQUFhLE9BQUEsV0FBQWQsQ0FBQSxRQUFBZSxnQkFBQSxDQUFBQyxPQUFBLEVBQUFqQixDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxDQUFBRCxDQUFBLFNBQUFFLE1BQUEsQ0FBQWUseUJBQUEsR0FBQWYsTUFBQSxDQUFBZ0IsZ0JB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