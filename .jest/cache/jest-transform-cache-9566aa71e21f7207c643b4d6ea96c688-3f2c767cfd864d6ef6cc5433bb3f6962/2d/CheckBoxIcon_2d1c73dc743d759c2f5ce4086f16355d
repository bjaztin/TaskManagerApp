e064bf64a5149cdf9dd5e6040fbe1f50
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _getIconType = _interopRequireDefault(require("../helpers/getIconType"));
var _jsxRuntime = require("react/jsx-runtime");
var CheckBoxIcon = function CheckBoxIcon(_ref) {
  var checked = _ref.checked,
    onIconPress = _ref.onIconPress,
    onLongIconPress = _ref.onLongIconPress,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 24 : _ref$size,
    _ref$checkedIcon = _ref.checkedIcon,
    checkedIcon = _ref$checkedIcon === void 0 ? 'check-square-o' : _ref$checkedIcon,
    _ref$uncheckedIcon = _ref.uncheckedIcon,
    uncheckedIcon = _ref$uncheckedIcon === void 0 ? 'square-o' : _ref$uncheckedIcon,
    iconType = _ref.iconType,
    checkedColor = _ref.checkedColor,
    _ref$uncheckedColor = _ref.uncheckedColor,
    uncheckedColor = _ref$uncheckedColor === void 0 ? '#bfbfbf' : _ref$uncheckedColor;
  if (checked && _react.default.isValidElement(checkedIcon)) {
    return checkedIcon;
  }
  if (!checked && _react.default.isValidElement(uncheckedIcon)) {
    return uncheckedIcon;
  }
  var VectorIcon = iconType ? (0, _getIconType.default)(iconType) : (0, _getIconType.default)('font-awesome');
  return (0, _jsxRuntime.jsx)(VectorIcon, {
    color: checked ? checkedColor : uncheckedColor,
    name: checked ? checkedIcon : uncheckedIcon,
    size: size || 24,
    style: {
      minWidth: size || 24
    },
    onLongPress: onLongIconPress,
    onPress: onIconPress
  });
};
var _default = CheckBoxIcon;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9nZXRJY29uVHlwZSIsIl9qc3hSdW50aW1lIiwiQ2hlY2tCb3hJY29uIiwiX3JlZiIsImNoZWNrZWQiLCJvbkljb25QcmVzcyIsIm9uTG9uZ0ljb25QcmVzcyIsIl9yZWYkc2l6ZSIsInNpemUiLCJfcmVmJGNoZWNrZWRJY29uIiwiY2hlY2tlZEljb24iLCJfcmVmJHVuY2hlY2tlZEljb24iLCJ1bmNoZWNrZWRJY29uIiwiaWNvblR5cGUiLCJjaGVja2VkQ29sb3IiLCJfcmVmJHVuY2hlY2tlZENvbG9yIiwidW5jaGVja2VkQ29sb3IiLCJSZWFjdCIsImlzVmFsaWRFbGVtZW50IiwiVmVjdG9ySWNvbiIsImdldEljb25UeXBlIiwianN4IiwiY29sb3IiLCJuYW1lIiwic3R5bGUiLCJtaW5XaWR0aCIsIm9uTG9uZ1ByZXNzIiwib25QcmVzcyIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJDaGVja0JveEljb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBnZXRJY29uVHlwZSBmcm9tICcuLi9oZWxwZXJzL2dldEljb25UeXBlJztcbmNvbnN0IENoZWNrQm94SWNvbiA9ICh7IGNoZWNrZWQsIG9uSWNvblByZXNzLCBvbkxvbmdJY29uUHJlc3MsIHNpemUgPSAyNCwgY2hlY2tlZEljb24gPSAnY2hlY2stc3F1YXJlLW8nLCB1bmNoZWNrZWRJY29uID0gJ3NxdWFyZS1vJywgaWNvblR5cGUsIGNoZWNrZWRDb2xvciwgdW5jaGVja2VkQ29sb3IgPSAnI2JmYmZiZicsIH0pID0+IHtcbiAgICBpZiAoY2hlY2tlZCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGVja2VkSWNvbikpIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrZWRJY29uO1xuICAgIH1cbiAgICBpZiAoIWNoZWNrZWQgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQodW5jaGVja2VkSWNvbikpIHtcbiAgICAgICAgcmV0dXJuIHVuY2hlY2tlZEljb247XG4gICAgfVxuICAgIGNvbnN0IFZlY3Rvckljb24gPSBpY29uVHlwZVxuICAgICAgICA/IGdldEljb25UeXBlKGljb25UeXBlKVxuICAgICAgICA6IGdldEljb25UeXBlKCdmb250LWF3ZXNvbWUnKTtcbiAgICByZXR1cm4gKDxWZWN0b3JJY29uIGNvbG9yPXtjaGVja2VkID8gY2hlY2tlZENvbG9yIDogdW5jaGVja2VkQ29sb3J9IG5hbWU9e2NoZWNrZWQgPyBjaGVja2VkSWNvbiA6IHVuY2hlY2tlZEljb259IHNpemU9e3NpemUgfHwgMjR9IHN0eWxlPXt7IG1pbldpZHRoOiBzaXplIHx8IDI0IH19IG9uTG9uZ1ByZXNzPXtvbkxvbmdJY29uUHJlc3N9IG9uUHJlc3M9e29uSWNvblByZXNzfS8+KTtcbn07XG5leHBvcnQgZGVmYXVsdCBDaGVja0JveEljb247XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQWlELElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQUNqRCxJQUFNRyxZQUFZLEdBQUcsU0FBZkEsWUFBWUEsQ0FBQUMsSUFBQSxFQUE4SztFQUFBLElBQXhLQyxPQUFPLEdBQUFELElBQUEsQ0FBUEMsT0FBTztJQUFFQyxXQUFXLEdBQUFGLElBQUEsQ0FBWEUsV0FBVztJQUFFQyxlQUFlLEdBQUFILElBQUEsQ0FBZkcsZUFBZTtJQUFBQyxTQUFBLEdBQUFKLElBQUEsQ0FBRUssSUFBSTtJQUFKQSxJQUFJLEdBQUFELFNBQUEsY0FBRyxFQUFFLEdBQUFBLFNBQUE7SUFBQUUsZ0JBQUEsR0FBQU4sSUFBQSxDQUFFTyxXQUFXO0lBQVhBLFdBQVcsR0FBQUQsZ0JBQUEsY0FBRyxnQkFBZ0IsR0FBQUEsZ0JBQUE7SUFBQUUsa0JBQUEsR0FBQVIsSUFBQSxDQUFFUyxhQUFhO0lBQWJBLGFBQWEsR0FBQUQsa0JBQUEsY0FBRyxVQUFVLEdBQUFBLGtCQUFBO0lBQUVFLFFBQVEsR0FBQVYsSUFBQSxDQUFSVSxRQUFRO0lBQUVDLFlBQVksR0FBQVgsSUFBQSxDQUFaVyxZQUFZO0lBQUFDLG1CQUFBLEdBQUFaLElBQUEsQ0FBRWEsY0FBYztJQUFkQSxjQUFjLEdBQUFELG1CQUFBLGNBQUcsU0FBUyxHQUFBQSxtQkFBQTtFQUNwTCxJQUFJWCxPQUFPLElBQUlhLGNBQUssQ0FBQ0MsY0FBYyxDQUFDUixXQUFXLENBQUMsRUFBRTtJQUM5QyxPQUFPQSxXQUFXO0VBQ3RCO0VBQ0EsSUFBSSxDQUFDTixPQUFPLElBQUlhLGNBQUssQ0FBQ0MsY0FBYyxDQUFDTixhQUFhLENBQUMsRUFBRTtJQUNqRCxPQUFPQSxhQUFhO0VBQ3hCO0VBQ0EsSUFBTU8sVUFBVSxHQUFHTixRQUFRLEdBQ3JCLElBQUFPLG9CQUFXLEVBQUNQLFFBQVEsQ0FBQyxHQUNyQixJQUFBTyxvQkFBVyxFQUFDLGNBQWMsQ0FBQztFQUNqQyxPQUFRLElBQUFuQixXQUFBLENBQUFvQixHQUFBLEVBQUNGLFVBQVU7SUFBQ0csS0FBSyxFQUFFbEIsT0FBTyxHQUFHVSxZQUFZLEdBQUdFLGNBQWU7SUFBQ08sSUFBSSxFQUFFbkIsT0FBTyxHQUFHTSxXQUFXLEdBQUdFLGFBQWM7SUFBQ0osSUFBSSxFQUFFQSxJQUFJLElBQUksRUFBRztJQUFDZ0IsS0FBSyxFQUFFO01BQUVDLFFBQVEsRUFBRWpCLElBQUksSUFBSTtJQUFHLENBQUU7SUFBQ2tCLFdBQVcsRUFBRXBCLGVBQWdCO0lBQUNxQixPQUFPLEVBQUV0QjtFQUFZLENBQUMsQ0FBQztBQUM3TixDQUFDO0FBQUMsSUFBQXVCLFFBQUEsR0FDYTFCLFlBQVk7QUFBQTJCLE9BQUEsQ0FBQUMsT0FBQSxHQUFBRixRQUFBIn0=