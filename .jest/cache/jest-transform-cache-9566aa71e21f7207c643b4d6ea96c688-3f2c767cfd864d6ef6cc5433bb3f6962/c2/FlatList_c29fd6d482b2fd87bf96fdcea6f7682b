c6dca76537151d849f6c832bfa37ce8d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _View = _interopRequireDefault(require("./View"));
var _createAnimatedComponent = _interopRequireDefault(require("../../createAnimatedComponent"));
var _excluded = ["itemLayoutAnimation"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var AnimatedFlatList = (0, _createAnimatedComponent.default)(_reactNative.FlatList);
var createCellRenderer = function createCellRenderer(itemLayoutAnimation, cellStyle) {
  var cellRenderer = function cellRenderer(props) {
    return _react.default.createElement(_View.default, {
      layout: itemLayoutAnimation,
      onLayout: props.onLayout,
      style: cellStyle
    }, props.children);
  };
  return cellRenderer;
};
var ReanimatedFlatlist = (0, _react.forwardRef)(function (props, ref) {
  var itemLayoutAnimation = props.itemLayoutAnimation,
    restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var cellStyle = restProps !== null && restProps !== void 0 && restProps.inverted ? restProps !== null && restProps !== void 0 && restProps.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : undefined;
  var cellRenderer = _react.default.useMemo(function () {
    return createCellRenderer(itemLayoutAnimation, cellStyle);
  }, [cellStyle]);
  return _react.default.createElement(AnimatedFlatList, _extends({
    ref: ref
  }, restProps, {
    CellRendererComponent: cellRenderer
  }));
});
var styles = _reactNative.StyleSheet.create({
  verticallyInverted: {
    transform: [{
      scaleY: -1
    }]
  },
  horizontallyInverted: {
    transform: [{
      scaleX: -1
    }]
  }
});
var _default = ReanimatedFlatlist;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQiLCJfZXhjbHVkZWQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiQW5pbWF0ZWRGbGF0TGlzdCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiRmxhdExpc3QiLCJjcmVhdGVDZWxsUmVuZGVyZXIiLCJpdGVtTGF5b3V0QW5pbWF0aW9uIiwiY2VsbFN0eWxlIiwiY2VsbFJlbmRlcmVyIiwicHJvcHMiLCJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJSZWFuaW1hdGVkVmlldyIsImxheW91dCIsIm9uTGF5b3V0Iiwic3R5bGUiLCJjaGlsZHJlbiIsIlJlYW5pbWF0ZWRGbGF0bGlzdCIsImZvcndhcmRSZWYiLCJyZWYiLCJyZXN0UHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiaW52ZXJ0ZWQiLCJob3Jpem9udGFsIiwic3R5bGVzIiwiaG9yaXpvbnRhbGx5SW52ZXJ0ZWQiLCJ2ZXJ0aWNhbGx5SW52ZXJ0ZWQiLCJ1bmRlZmluZWQiLCJ1c2VNZW1vIiwiX2V4dGVuZHMiLCJDZWxsUmVuZGVyZXJDb21wb25lbnQiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwidHJhbnNmb3JtIiwic2NhbGVZIiwic2NhbGVYIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiRmxhdExpc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBGb3J3YXJkZWRSZWYsIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBGbGF0TGlzdCxcbiAgRmxhdExpc3RQcm9wcyxcbiAgTGF5b3V0Q2hhbmdlRXZlbnQsXG4gIFN0eWxlU2hlZXQsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgUmVhbmltYXRlZFZpZXcgZnJvbSAnLi9WaWV3JztcbmltcG9ydCBjcmVhdGVBbmltYXRlZENvbXBvbmVudCBmcm9tICcuLi8uLi9jcmVhdGVBbmltYXRlZENvbXBvbmVudCc7XG5pbXBvcnQgeyBJTGF5b3V0QW5pbWF0aW9uQnVpbGRlciB9IGZyb20gJy4uL2xheW91dFJlYW5pbWF0aW9uL2FuaW1hdGlvbkJ1aWxkZXIvY29tbW9uVHlwZXMnO1xuaW1wb3J0IHsgU3R5bGVQcm9wcyB9IGZyb20gJy4uL2NvbW1vblR5cGVzJztcblxuY29uc3QgQW5pbWF0ZWRGbGF0TGlzdCA9IGNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50KEZsYXRMaXN0IGFzIGFueSkgYXMgYW55O1xuXG5pbnRlcmZhY2UgQW5pbWF0ZWRGbGF0TGlzdFByb3BzIHtcbiAgb25MYXlvdXQ6IChldmVudDogTGF5b3V0Q2hhbmdlRXZlbnQpID0+IHZvaWQ7XG4gIC8vIGltcGxpY2l0IGBjaGlsZHJlbmAgcHJvcCBoYXMgYmVlbiByZW1vdmVkIGluIEB0eXBlcy9yZWFjdF4xOC4wLjBcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgaW52ZXJ0ZWQ/OiBib29sZWFuO1xuICBob3Jpem9udGFsPzogYm9vbGVhbjtcbn1cblxuY29uc3QgY3JlYXRlQ2VsbFJlbmRlcmVyID0gKFxuICBpdGVtTGF5b3V0QW5pbWF0aW9uPzogSUxheW91dEFuaW1hdGlvbkJ1aWxkZXIsXG4gIGNlbGxTdHlsZT86IFN0eWxlUHJvcHNcbikgPT4ge1xuICBjb25zdCBjZWxsUmVuZGVyZXIgPSAocHJvcHM6IEFuaW1hdGVkRmxhdExpc3RQcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8UmVhbmltYXRlZFZpZXdcbiAgICAgICAgbGF5b3V0PXtpdGVtTGF5b3V0QW5pbWF0aW9ufVxuICAgICAgICBvbkxheW91dD17cHJvcHMub25MYXlvdXR9XG4gICAgICAgIHN0eWxlPXtjZWxsU3R5bGV9PlxuICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgICA8L1JlYW5pbWF0ZWRWaWV3PlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIGNlbGxSZW5kZXJlcjtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVhbmltYXRlZEZsYXRMaXN0UHJvcHM8SXRlbVQ+IGV4dGVuZHMgRmxhdExpc3RQcm9wczxJdGVtVD4ge1xuICBpdGVtTGF5b3V0QW5pbWF0aW9uPzogSUxheW91dEFuaW1hdGlvbkJ1aWxkZXI7XG59XG5cbnR5cGUgUmVhbmltYXRlZEZsYXRMaXN0RkM8VCA9IGFueT4gPSBSZWFjdC5GQzxSZWFuaW1hdGVkRmxhdExpc3RQcm9wczxUPj47XG5cbmNvbnN0IFJlYW5pbWF0ZWRGbGF0bGlzdDogUmVhbmltYXRlZEZsYXRMaXN0RkMgPSBmb3J3YXJkUmVmKFxuICAocHJvcHM6IFJlYW5pbWF0ZWRGbGF0TGlzdFByb3BzPGFueT4sIHJlZjogRm9yd2FyZGVkUmVmPEZsYXRMaXN0PikgPT4ge1xuICAgIGNvbnN0IHsgaXRlbUxheW91dEFuaW1hdGlvbiwgLi4ucmVzdFByb3BzIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IGNlbGxTdHlsZSA9IHJlc3RQcm9wcz8uaW52ZXJ0ZWRcbiAgICAgID8gcmVzdFByb3BzPy5ob3Jpem9udGFsXG4gICAgICAgID8gc3R5bGVzLmhvcml6b250YWxseUludmVydGVkXG4gICAgICAgIDogc3R5bGVzLnZlcnRpY2FsbHlJbnZlcnRlZFxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBjb25zdCBjZWxsUmVuZGVyZXIgPSBSZWFjdC51c2VNZW1vKFxuICAgICAgKCkgPT4gY3JlYXRlQ2VsbFJlbmRlcmVyKGl0ZW1MYXlvdXRBbmltYXRpb24sIGNlbGxTdHlsZSksXG4gICAgICBbY2VsbFN0eWxlXVxuICAgICk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFuaW1hdGVkRmxhdExpc3RcbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIHsuLi5yZXN0UHJvcHN9XG4gICAgICAgIENlbGxSZW5kZXJlckNvbXBvbmVudD17Y2VsbFJlbmRlcmVyfVxuICAgICAgLz5cbiAgICApO1xuICB9XG4pO1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIHZlcnRpY2FsbHlJbnZlcnRlZDogeyB0cmFuc2Zvcm06IFt7IHNjYWxlWTogLTEgfV0gfSxcbiAgaG9yaXpvbnRhbGx5SW52ZXJ0ZWQ6IHsgdHJhbnNmb3JtOiBbeyBzY2FsZVg6IC0xIH1dIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhbmltYXRlZEZsYXRsaXN0O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFNQSxJQUFBRSxLQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSSx3QkFBQSxHQUFBRCxzQkFBQSxDQUFBSCxPQUFBO0FBQW1FLElBQUFLLFNBQUE7QUFBQSxTQUFBQyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQVIsd0JBQUFZLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFB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