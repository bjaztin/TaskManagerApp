a440318608468b7b0dbd773d5a1acfd0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Markings = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _filter = _interopRequireDefault(require("lodash/filter"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _componentUpdater = require("../../../componentUpdater");
var _style = _interopRequireDefault(require("./style"));
var _dot = _interopRequireDefault(require("../dot"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Markings;
exports.Markings = Markings;
(function (Markings) {
  Markings["DOT"] = "dot";
  Markings["MULTI_DOT"] = "multi-dot";
  Markings["PERIOD"] = "period";
  Markings["MULTI_PERIOD"] = "multi-period";
  Markings["CUSTOM"] = "custom";
})(Markings || (exports.Markings = Markings = {}));
var Marking = function Marking(props) {
  var theme = props.theme,
    type = props.type,
    dots = props.dots,
    periods = props.periods,
    selected = props.selected,
    dotColor = props.dotColor;
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var getItems = function getItems(items) {
    if (items && Array.isArray(items) && items.length > 0) {
      var validItems = (0, _filter.default)(items, function (o) {
        return o.color;
      });
      return validItems.map(function (item, index) {
        return type === Markings.MULTI_DOT ? renderDot(index, item) : renderPeriod(index, item);
      });
    }
  };
  var renderMarkingByType = function renderMarkingByType() {
    switch (type) {
      case Markings.MULTI_DOT:
        return renderMultiMarkings(style.current.dots, dots);
      case Markings.MULTI_PERIOD:
        return renderMultiMarkings(style.current.periods, periods);
      default:
        return renderDot();
    }
  };
  var renderMultiMarkings = function renderMultiMarkings(containerStyle, items) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: containerStyle,
      children: getItems(items)
    });
  };
  var renderPeriod = function renderPeriod(index, item) {
    var color = item.color,
      startingDay = item.startingDay,
      endingDay = item.endingDay;
    var styles = [style.current.period, {
      backgroundColor: color
    }];
    if (startingDay) {
      styles.push(style.current.startingDay);
    }
    if (endingDay) {
      styles.push(style.current.endingDay);
    }
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles
    }, index);
  };
  var renderDot = function renderDot(index, item) {
    var dotProps = (0, _componentUpdater.extractDotProps)(props);
    var key = index;
    var color = dotColor;
    if (item) {
      if (item.key) {
        key = item.key;
      }
      color = selected && item.selectedDotColor ? item.selectedDotColor : item.color;
    }
    return (0, _react.createElement)(_dot.default, _objectSpread(_objectSpread({}, dotProps), {}, {
      key: key,
      color: color
    }));
  };
  return renderMarkingByType();
};
var _default = Marking;
exports.default = _default;
Marking.displayName = 'Marking';
Marking.markings = Markings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,