339454864de24b69a5da49f3d467f7c3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NUMBER_OF_PAGES = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _xdate = _interopRequireDefault(require("xdate"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _dateutils = require("../../dateutils");
var _interface = require("../../interface");
var _style = _interopRequireDefault(require("../style"));
var _WeekDaysNames = _interopRequireDefault(require("../../commons/WeekDaysNames"));
var _week = _interopRequireDefault(require("../week"));
var _commons = require("../commons");
var _constants = _interopRequireDefault(require("../../commons/constants"));
var _componentUpdater = require("../../componentUpdater");
var _Context = _interopRequireDefault(require("../Context"));
var _hooks = require("../../hooks");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["allowShadow"],
  _excluded2 = ["style", "onDayPress", "firstDay"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var NUMBER_OF_PAGES = 6;
exports.NUMBER_OF_PAGES = NUMBER_OF_PAGES;
var NUM_OF_ITEMS = NUMBER_OF_PAGES * 2 + 1;
var APPLY_ANDROID_FIX = _constants.default.isAndroid && _constants.default.isRTL;
var WeekCalendar = function WeekCalendar(props) {
  var calendarWidth = props.calendarWidth,
    hideDayNames = props.hideDayNames,
    current = props.current,
    theme = props.theme,
    testID = props.testID,
    markedDates = props.markedDates;
  var context = (0, _react.useContext)(_Context.default);
  var _props$allowShadow = props.allowShadow,
    allowShadow = _props$allowShadow === void 0 ? true : _props$allowShadow,
    calendarListProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var _extractCalendarProps = (0, _componentUpdater.extractCalendarProps)(calendarListProps),
    propsStyle = _extractCalendarProps.style,
    onDayPress = _extractCalendarProps.onDayPress,
    _extractCalendarProps2 = _extractCalendarProps.firstDay,
    firstDay = _extractCalendarProps2 === void 0 ? 0 : _extractCalendarProps2,
    others = (0, _objectWithoutProperties2.default)(_extractCalendarProps, _excluded2);
  var date = context.date,
    numberOfDays = context.numberOfDays,
    updateSource = context.updateSource,
    setDate = context.setDate,
    timelineLeftInset = context.timelineLeftInset;
  var visibleWeek = (0, _react.useRef)(date);
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var items = (0, _react.useRef)(getDatesArray(current != null ? current : date, firstDay, numberOfDays));
  var _useState = (0, _react.useState)(items.current),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    listData = _useState2[0],
    setListData = _useState2[1];
  var changedItems = (0, _react.useRef)(_constants.default.isRTL);
  var list = (0, _react.useRef)(null);
  var currentIndex = (0, _react.useRef)(NUMBER_OF_PAGES);
  (0, _hooks.useDidUpdate)(function () {
    var _list$current;
    items.current = getDatesArray(date, firstDay, numberOfDays);
    setListData(items.current);
    visibleWeek.current = date;
    list == null ? void 0 : (_list$current = list.current) == null ? void 0 : _list$current.scrollToIndex({
      index: NUMBER_OF_PAGES,
      animated: false
    });
  }, [numberOfDays]);
  (0, _hooks.useDidUpdate)(function () {
    if (updateSource !== _commons.UpdateSources.WEEK_SCROLL) {
      var pageIndex = items.current.findIndex(function (item) {
        return isCustomNumberOfDays(numberOfDays) ? (0, _dateutils.onSameDateRange)({
          firstDay: item,
          secondDay: date,
          numberOfDays: numberOfDays,
          firstDateInRange: item
        }) : (0, _dateutils.sameWeek)(item, date, firstDay);
      });
      if (pageIndex !== currentIndex.current) {
        var _list$current2;
        if (pageIndex >= 0) {
          visibleWeek.current = items.current[pageIndex];
          currentIndex.current = pageIndex;
        } else {
          visibleWeek.current = date;
          currentIndex.current = NUMBER_OF_PAGES;
        }
        pageIndex <= 0 ? onEndReached() : list == null ? void 0 : (_list$current2 = list.current) == null ? void 0 : _list$current2.scrollToIndex({
          index: pageIndex,
          animated: false
        });
      }
    }
  }, [date, updateSource]);
  var containerWidth = (0, _react.useMemo)(function () {
    return calendarWidth != null ? calendarWidth : _constants.default.screenWidth;
  }, [calendarWidth]);
  var _onDayPress = (0, _react.useCallback)(function (value) {
    if (onDayPress) {
      onDayPress(value);
    } else {
      setDate == null ? void 0 : setDate(value.dateString, _commons.UpdateSources.DAY_PRESS);
    }
  }, [onDayPress]);
  var getCurrentWeekMarkings = (0, _react.useCallback)(function (date, markings) {
    if (!markings) {
      return;
    }
    var dates = (0, _dateutils.getWeekDates)(date, firstDay);
    return dates == null ? void 0 : dates.reduce(function (acc, date) {
      var dateString = (0, _interface.toMarkingFormat)(date);
      return _objectSpread(_objectSpread({}, acc), markings[dateString] && (0, _defineProperty2.default)({}, dateString, markings[dateString]));
    }, {});
  }, []);
  var weekStyle = (0, _react.useMemo)(function () {
    return [{
      width: containerWidth
    }, propsStyle];
  }, [containerWidth, propsStyle]);
  var renderItem = (0, _react.useCallback)(function (_ref2) {
    var item = _ref2.item;
    var currentContext = (0, _dateutils.sameWeek)(date, item, firstDay) ? context : undefined;
    var markings = getCurrentWeekMarkings(item, markedDates);
    return (0, _jsxRuntime.jsx)(_week.default, _objectSpread(_objectSpread({}, others), {}, {
      markedDates: markings,
      current: item,
      firstDay: firstDay,
      style: weekStyle,
      context: currentContext,
      onDayPress: _onDayPress,
      numberOfDays: numberOfDays,
      timelineLeftInset: timelineLeftInset
    }));
  }, [firstDay, _onDayPress, context, date, markedDates]);
  var keyExtractor = (0, _react.useCallback)(function (item) {
    return item;
  }, []);
  var renderWeekDaysNames = (0, _react.useMemo)(function () {
    return (0, _jsxRuntime.jsx)(_WeekDaysNames.default, {
      firstDay: firstDay,
      style: style.current.dayHeader
    });
  }, [firstDay]);
  var weekCalendarStyle = (0, _react.useMemo)(function () {
    return [allowShadow && style.current.containerShadow, !hideDayNames && style.current.containerWrapper];
  }, [allowShadow, hideDayNames]);
  var containerStyle = (0, _react.useMemo)(function () {
    return [style.current.week, style.current.weekCalendar];
  }, []);
  var getItemLayout = (0, _react.useCallback)(function (_, index) {
    return {
      length: containerWidth,
      offset: containerWidth * index,
      index: index
    };
  }, [containerWidth]);
  var onEndReached = (0, _react.useCallback)(function () {
    var _list$current3;
    changedItems.current = true;
    items.current = getDatesArray(visibleWeek.current, firstDay, numberOfDays);
    setListData(items.current);
    currentIndex.current = NUMBER_OF_PAGES;
    list == null ? void 0 : (_list$current3 = list.current) == null ? void 0 : _list$current3.scrollToIndex({
      index: NUMBER_OF_PAGES,
      animated: false
    });
  }, [firstDay, numberOfDays]);
  var onViewableItemsChanged = (0, _react.useCallback)(function (_ref3) {
    var _viewableItems$;
    var viewableItems = _ref3.viewableItems;
    if (changedItems.current || viewableItems.length === 0) {
      changedItems.current = false;
      return;
    }
    var currItems = items.current;
    var newDate = (_viewableItems$ = viewableItems[0]) == null ? void 0 : _viewableItems$.item;
    if (newDate !== visibleWeek.current) {
      if (APPLY_ANDROID_FIX) {
        var newDateOffset = -1 * (NUMBER_OF_PAGES - currItems.indexOf(newDate));
        var adjustedNewDate = currItems[NUMBER_OF_PAGES - newDateOffset];
        visibleWeek.current = adjustedNewDate;
        currentIndex.current = currItems.indexOf(adjustedNewDate);
        setDate(adjustedNewDate, _commons.UpdateSources.WEEK_SCROLL);
        if (visibleWeek.current === currItems[currItems.length - 1]) {
          onEndReached();
        }
      } else {
        currentIndex.current = currItems.indexOf(newDate);
        visibleWeek.current = newDate;
        setDate(newDate, _commons.UpdateSources.WEEK_SCROLL);
        if (visibleWeek.current === currItems[0]) {
          onEndReached();
        }
      }
    }
  }, [onEndReached]);
  var viewabilityConfigCallbackPairs = (0, _react.useRef)([{
    viewabilityConfig: {
      itemVisiblePercentThreshold: 20
    },
    onViewableItemsChanged: onViewableItemsChanged
  }]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    testID: testID,
    style: weekCalendarStyle,
    children: [!hideDayNames && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: containerStyle,
      children: renderWeekDaysNames
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: style.current.container,
      children: (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
        testID: `${testID}.list`,
        ref: list,
        style: style.current.container,
        data: listData,
        horizontal: true,
        showsHorizontalScrollIndicator: false,
        pagingEnabled: true,
        scrollEnabled: true,
        renderItem: renderItem,
        keyExtractor: keyExtractor,
        initialScrollIndex: NUMBER_OF_PAGES,
        getItemLayout: getItemLayout,
        viewabilityConfigCallbackPairs: viewabilityConfigCallbackPairs.current,
        onEndReached: onEndReached,
        onEndReachedThreshold: 1 / NUM_OF_ITEMS
      })
    })]
  });
};
function getDateForDayRange(date, weekIndex, numberOfDays) {
  var d = new _xdate.default(date);
  if (weekIndex !== 0) {
    d.addDays(numberOfDays * weekIndex);
  }
  return (0, _interface.toMarkingFormat)(d);
}
function getDate(date, firstDay, weekIndex, numberOfDays) {
  var d = new _xdate.default(date);
  var dayOfTheWeek = d.getDay();
  if (dayOfTheWeek < firstDay && firstDay > 0) {
    dayOfTheWeek = 7 + dayOfTheWeek;
  }
  if (weekIndex !== 0) {
    d.addDays(firstDay - dayOfTheWeek);
  }
  var newDate = numberOfDays && numberOfDays > 1 ? d.addDays(weekIndex * numberOfDays) : d.addWeeks(weekIndex);
  var today = new _xdate.default();
  var offsetFromNow = newDate.diffDays(today);
  var isSameWeek = offsetFromNow > 0 && offsetFromNow < (numberOfDays != null ? numberOfDays : 7);
  return (0, _interface.toMarkingFormat)(isSameWeek ? today : newDate);
}
function getDatesArray(date, firstDay, numberOfDays) {
  return (0, _toConsumableArray2.default)(Array(NUM_OF_ITEMS).keys()).map(function (index) {
    if (isCustomNumberOfDays(numberOfDays)) {
      return getDateForDayRange(date, index - NUMBER_OF_PAGES, numberOfDays);
    }
    return getDate(date, firstDay, index - NUMBER_OF_PAGES);
  });
}
function isCustomNumberOfDays(numberOfDays) {
  return numberOfDays && numberOfDays > 1;
}
WeekCalendar.displayName = 'WeekCalendar';
var _default = WeekCalendar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,