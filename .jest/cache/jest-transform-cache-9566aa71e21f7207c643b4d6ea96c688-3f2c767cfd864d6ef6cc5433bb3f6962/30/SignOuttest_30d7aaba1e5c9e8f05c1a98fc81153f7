b473d24ab7b7fb1792c428b9af7a092a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _SignOut = _interopRequireDefault(require("../../../src/components/TaskScreenFeatures/SignOut"));
var _native = require("@react-navigation/native");
var _jsxRuntime = require("react/jsx-runtime");
describe("SignOut Component", function () {
  it("renders correctly", function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.NavigationContainer, {
        children: (0, _jsxRuntime.jsx)(_SignOut.default, {})
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    var logoutButton = getByTestId("logout");
    expect(logoutButton).toBeTruthy();
  });
  it("Open the modal when SignOut icon is pressed", function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.NavigationContainer, {
        children: (0, _jsxRuntime.jsx)(_SignOut.default, {})
      })),
      getByText = _render2.getByText,
      getByTestId = _render2.getByTestId;
    var modal = getByTestId("signOutmodal");
    expect(modal).toBeTruthy();
    var logoutButton = getByTestId("logout");
    _reactNative.fireEvent.press(logoutButton);
    expect(modal).toBeTruthy();
  });
  it("Close the modal when the Cancel button is pressed", function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.NavigationContainer, {
        children: (0, _jsxRuntime.jsx)(_SignOut.default, {})
      })),
      getByText = _render3.getByText,
      getByTestId = _render3.getByTestId;
    var logoutButton = getByTestId("logout");
    _reactNative.fireEvent.press(logoutButton);
    var modal = getByTestId("signOutmodal");
    expect(modal).toBeTruthy();
    var cancelButton = getByTestId("cancel");
    _reactNative.fireEvent.press(cancelButton);
    expect(modal).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9TaWduT3V0IiwiX25hdGl2ZSIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJOYXZpZ2F0aW9uQ29udGFpbmVyIiwiY2hpbGRyZW4iLCJkZWZhdWx0IiwiZ2V0QnlUZXh0IiwiZ2V0QnlUZXN0SWQiLCJsb2dvdXRCdXR0b24iLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiX3JlbmRlcjIiLCJtb2RhbCIsImZpcmVFdmVudCIsInByZXNzIiwiX3JlbmRlcjMiLCJjYW5jZWxCdXR0b24iXSwic291cmNlcyI6WyJTaWduT3V0LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBTaWduT3V0IGZyb20gXCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UYXNrU2NyZWVuRmVhdHVyZXMvU2lnbk91dFwiO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkNvbnRhaW5lciB9IGZyb20gXCJAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmVcIjtcblxuZGVzY3JpYmUoXCJTaWduT3V0IENvbXBvbmVudFwiLCAoKSA9PiB7XG4gIGl0KFwicmVuZGVycyBjb3JyZWN0bHlcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPE5hdmlnYXRpb25Db250YWluZXI+XG4gICAgICAgIDxTaWduT3V0IC8+XG4gICAgICA8L05hdmlnYXRpb25Db250YWluZXI+XG4gICAgKTtcblxuICAgIGNvbnN0IGxvZ291dEJ1dHRvbiA9IGdldEJ5VGVzdElkKFwibG9nb3V0XCIpO1xuICAgIGV4cGVjdChsb2dvdXRCdXR0b24pLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoXCJPcGVuIHRoZSBtb2RhbCB3aGVuIFNpZ25PdXQgaWNvbiBpcyBwcmVzc2VkXCIsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxOYXZpZ2F0aW9uQ29udGFpbmVyPlxuICAgICAgICA8U2lnbk91dCAvPlxuICAgICAgPC9OYXZpZ2F0aW9uQ29udGFpbmVyPlxuICAgICk7XG5cbiAgICAvL1Nob3cgbW9kYWxcbiAgICBjb25zdCBtb2RhbCA9IGdldEJ5VGVzdElkKFwic2lnbk91dG1vZGFsXCIpO1xuICAgIGV4cGVjdChtb2RhbCkudG9CZVRydXRoeSgpO1xuXG4gICAgLy9wcmVzc2VkIHRoZSBsb2dvdXQgYnV0dG9uXG4gICAgY29uc3QgbG9nb3V0QnV0dG9uID0gZ2V0QnlUZXN0SWQoXCJsb2dvdXRcIik7XG4gICAgZmlyZUV2ZW50LnByZXNzKGxvZ291dEJ1dHRvbik7XG4gICAgZXhwZWN0KG1vZGFsKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KFwiQ2xvc2UgdGhlIG1vZGFsIHdoZW4gdGhlIENhbmNlbCBidXR0b24gaXMgcHJlc3NlZFwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8TmF2aWdhdGlvbkNvbnRhaW5lcj5cbiAgICAgICAgPFNpZ25PdXQgLz5cbiAgICAgIDwvTmF2aWdhdGlvbkNvbnRhaW5lcj5cbiAgICApO1xuXG4gICAgY29uc3QgbG9nb3V0QnV0dG9uID0gZ2V0QnlUZXN0SWQoXCJsb2dvdXRcIik7XG4gICAgZmlyZUV2ZW50LnByZXNzKGxvZ291dEJ1dHRvbik7XG5cbiAgICAvLyBzaG93IG1vZGFsXG4gICAgY29uc3QgbW9kYWwgPSBnZXRCeVRlc3RJZChcInNpZ25PdXRtb2RhbFwiKTtcbiAgICBleHBlY3QobW9kYWwpLnRvQmVUcnV0aHkoKTtcblxuICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IGdldEJ5VGVzdElkKFwiY2FuY2VsXCIpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhjYW5jZWxCdXR0b24pO1xuICAgIGV4cGVjdChtb2RhbCkudG9CZVRydXRoeSgpO1xuICB9KTtcblxufSk7XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxRQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxPQUFBLEdBQUFILE9BQUE7QUFBK0QsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBRS9ESyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsWUFBTTtFQUNsQ0MsRUFBRSxDQUFDLG1CQUFtQixFQUFFLFlBQU07SUFDNUIsSUFBQUMsT0FBQSxHQUFtQyxJQUFBQyxtQkFBTSxFQUN2QyxJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ04sT0FBQSxDQUFBTyxtQkFBbUI7UUFBQUMsUUFBQSxFQUNsQixJQUFBUCxXQUFBLENBQUFLLEdBQUEsRUFBQ1AsUUFBQSxDQUFBVSxPQUFPLElBQUU7TUFBQyxDQUNRLENBQ3ZCLENBQUM7TUFKT0MsU0FBUyxHQUFBTixPQUFBLENBQVRNLFNBQVM7TUFBRUMsV0FBVyxHQUFBUCxPQUFBLENBQVhPLFdBQVc7SUFNOUIsSUFBTUMsWUFBWSxHQUFHRCxXQUFXLENBQUMsUUFBUSxDQUFDO0lBQzFDRSxNQUFNLENBQUNELFlBQVksQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztFQUNuQyxDQUFDLENBQUM7RUFFRlgsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLFlBQU07SUFDdEQsSUFBQVksUUFBQSxHQUFtQyxJQUFBVixtQkFBTSxFQUN2QyxJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ04sT0FBQSxDQUFBTyxtQkFBbUI7UUFBQUMsUUFBQSxFQUNsQixJQUFBUCxXQUFBLENBQUFLLEdBQUEsRUFBQ1AsUUFBQSxDQUFBVSxPQUFPLElBQUU7TUFBQyxDQUNRLENBQ3ZCLENBQUM7TUFKT0MsU0FBUyxHQUFBSyxRQUFBLENBQVRMLFNBQVM7TUFBRUMsV0FBVyxHQUFBSSxRQUFBLENBQVhKLFdBQVc7SUFPOUIsSUFBTUssS0FBSyxHQUFHTCxXQUFXLENBQUMsY0FBYyxDQUFDO0lBQ3pDRSxNQUFNLENBQUNHLEtBQUssQ0FBQyxDQUFDRixVQUFVLENBQUMsQ0FBQztJQUcxQixJQUFNRixZQUFZLEdBQUdELFdBQVcsQ0FBQyxRQUFRLENBQUM7SUFDMUNNLHNCQUFTLENBQUNDLEtBQUssQ0FBQ04sWUFBWSxDQUFDO0lBQzdCQyxNQUFNLENBQUNHLEtBQUssQ0FBQyxDQUFDRixVQUFVLENBQUMsQ0FBQztFQUM1QixDQUFDLENBQUM7RUFFRlgsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLFlBQU07SUFDNUQsSUFBQWdCLFFBQUEsR0FBbUMsSUFBQWQsbUJBQU0sRUFDdkMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLE9BQUEsQ0FBQU8sbUJBQW1CO1FBQUFDLFFBQUEsRUFDbEIsSUFBQVAsV0FBQSxDQUFBSyxHQUFBLEVBQUNQLFFBQUEsQ0FBQVUsT0FBTyxJQUFFO01BQUMsQ0FDUSxDQUN2QixDQUFDO01BSk9DLFNBQVMsR0FBQVMsUUFBQSxDQUFUVCxTQUFTO01BQUVDLFdBQVcsR0FBQVEsUUFBQSxDQUFYUixXQUFXO0lBTTlCLElBQU1DLFlBQVksR0FBR0QsV0FBVyxDQUFDLFFBQVEsQ0FBQztJQUMxQ00sc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDTixZQUFZLENBQUM7SUFHN0IsSUFBTUksS0FBSyxHQUFHTCxXQUFXLENBQUMsY0FBYyxDQUFDO0lBQ3pDRSxNQUFNLENBQUNHLEtBQUssQ0FBQyxDQUFDRixVQUFVLENBQUMsQ0FBQztJQUUxQixJQUFNTSxZQUFZLEdBQUdULFdBQVcsQ0FBQyxRQUFRLENBQUM7SUFDMUNNLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0UsWUFBWSxDQUFDO0lBQzdCUCxNQUFNLENBQUNHLEtBQUssQ0FBQyxDQUFDRixVQUFVLENBQUMsQ0FBQztFQUM1QixDQUFDLENBQUM7QUFFSixDQUFDLENBQUMifQ==