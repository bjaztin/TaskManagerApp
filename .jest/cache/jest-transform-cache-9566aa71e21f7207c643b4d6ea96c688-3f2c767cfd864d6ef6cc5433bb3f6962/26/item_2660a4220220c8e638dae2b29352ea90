76bab88f421eebcfa9e9c8c9f16c5ec5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _interface = require("../interface");
var _componentUpdater = require("../componentUpdater");
var _style = _interopRequireDefault(require("./style"));
var _calendar = _interopRequireDefault(require("../calendar"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var CalendarListItem = _react.default.memo(function (props) {
  var item = props.item,
    theme = props.theme,
    scrollToMonth = props.scrollToMonth,
    horizontal = props.horizontal,
    calendarHeight = props.calendarHeight,
    calendarWidth = props.calendarWidth,
    propsStyle = props.style,
    headerStyle = props.headerStyle,
    onPressArrowLeft = props.onPressArrowLeft,
    onPressArrowRight = props.onPressArrowRight,
    visible = props.visible;
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var calendarProps = (0, _componentUpdater.extractCalendarProps)(props);
  var dateString = (0, _interface.toMarkingFormat)(item);
  var calendarStyle = (0, _react.useMemo)(function () {
    return [{
      width: calendarWidth,
      minHeight: calendarHeight
    }, style.current.calendar, propsStyle];
  }, [calendarWidth, calendarHeight, propsStyle]);
  var textStyle = (0, _react.useMemo)(function () {
    return [calendarStyle, style.current.placeholderText];
  }, [calendarStyle]);
  var _onPressArrowLeft = (0, _react.useCallback)(function (method, month) {
    var monthClone = month == null ? void 0 : month.clone();
    if (monthClone) {
      if (onPressArrowLeft) {
        onPressArrowLeft(method, monthClone);
      } else if (scrollToMonth) {
        var currentMonth = monthClone.getMonth();
        monthClone.addMonths(-1);
        while (monthClone.getMonth() === currentMonth) {
          monthClone.setDate(monthClone.getDate() - 1);
        }
        scrollToMonth(monthClone);
      }
    }
  }, [onPressArrowLeft, scrollToMonth]);
  var _onPressArrowRight = (0, _react.useCallback)(function (method, month) {
    var monthClone = month == null ? void 0 : month.clone();
    if (monthClone) {
      if (onPressArrowRight) {
        onPressArrowRight(method, monthClone);
      } else if (scrollToMonth) {
        monthClone.addMonths(1);
        scrollToMonth(monthClone);
      }
    }
  }, [onPressArrowRight, scrollToMonth]);
  if (!visible) {
    return (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: textStyle,
      children: dateString
    });
  }
  return (0, _jsxRuntime.jsx)(_calendar.default, _objectSpread(_objectSpread({
    hideArrows: true,
    hideExtraDays: true
  }, calendarProps), {}, {
    current: dateString,
    style: calendarStyle,
    headerStyle: horizontal ? headerStyle : undefined,
    disableMonthChange: true,
    onPressArrowLeft: horizontal ? _onPressArrowLeft : onPressArrowLeft,
    onPressArrowRight: horizontal ? _onPressArrowRight : onPressArrowRight
  }));
});
var _default = CalendarListItem;
exports.default = _default;
CalendarListItem.displayName = 'CalendarListItem';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,