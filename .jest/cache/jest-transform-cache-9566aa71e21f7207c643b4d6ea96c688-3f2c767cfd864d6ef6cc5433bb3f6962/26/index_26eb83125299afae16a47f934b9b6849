b6e7e4ed290c02af9b796095324fb5d0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _inRange = _interopRequireDefault(require("lodash/inRange"));
var _debounce = _interopRequireDefault(require("lodash/debounce"));
var _noop = _interopRequireDefault(require("lodash/noop"));
var _react = _interopRequireWildcard(require("react"));
var _recyclerlistview = require("recyclerlistview");
var _constants = _interopRequireDefault(require("../commons/constants"));
var _hooks = require("../hooks");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var dataProviderMaker = function dataProviderMaker(items) {
  return new _recyclerlistview.DataProvider(function (item1, item2) {
    return item1 !== item2;
  }).cloneWithRows(items);
};
var InfiniteList = function InfiniteList(props, ref) {
  var isHorizontal = props.isHorizontal,
    renderItem = props.renderItem,
    data = props.data,
    _props$reloadPages = props.reloadPages,
    reloadPages = _props$reloadPages === void 0 ? _noop.default : _props$reloadPages,
    _props$pageWidth = props.pageWidth,
    pageWidth = _props$pageWidth === void 0 ? _constants.default.screenWidth : _props$pageWidth,
    _props$pageHeight = props.pageHeight,
    pageHeight = _props$pageHeight === void 0 ? _constants.default.screenHeight : _props$pageHeight,
    onPageChange = props.onPageChange,
    onReachEdge = props.onReachEdge,
    onReachNearEdge = props.onReachNearEdge,
    onReachNearEdgeThreshold = props.onReachNearEdgeThreshold,
    _props$initialPageInd = props.initialPageIndex,
    initialPageIndex = _props$initialPageInd === void 0 ? 0 : _props$initialPageInd,
    extendedState = props.extendedState,
    scrollViewProps = props.scrollViewProps,
    _props$positionIndex = props.positionIndex,
    positionIndex = _props$positionIndex === void 0 ? 0 : _props$positionIndex,
    disableScrollOnDataChange = props.disableScrollOnDataChange,
    onEndReachedThreshold = props.onEndReachedThreshold,
    onVisibleIndicesChanged = props.onVisibleIndicesChanged,
    layoutProvider = props.layoutProvider,
    onScroll = props.onScroll,
    onEndReached = props.onEndReached,
    renderFooter = props.renderFooter,
    style = props.style;
  var dataProvider = (0, _react.useMemo)(function () {
    return dataProviderMaker(data);
  }, [data]);
  var _layoutProvider = (0, _react.useRef)(new _recyclerlistview.LayoutProvider(function () {
    return 'page';
  }, function (_type, dim) {
    dim.width = pageWidth;
    dim.height = pageHeight;
  }));
  var listRef = (0, _hooks.useCombinedRefs)(ref);
  var pageIndex = (0, _react.useRef)();
  var isOnEdge = (0, _react.useRef)(false);
  var isNearEdge = (0, _react.useRef)(false);
  var scrolledByUser = (0, _react.useRef)(false);
  var reloadPagesDebounce = (0, _react.useCallback)((0, _debounce.default)(reloadPages, 500, {
    leading: false,
    trailing: true
  }), [reloadPages]);
  (0, _react.useEffect)(function () {
    if (disableScrollOnDataChange) {
      return;
    }
    setTimeout(function () {
      var _listRef$current;
      var x = isHorizontal ? Math.floor(data.length / 2) * pageWidth : 0;
      var y = isHorizontal ? 0 : positionIndex * pageHeight;
      (_listRef$current = listRef.current) == null ? void 0 : _listRef$current.scrollToOffset == null ? void 0 : _listRef$current.scrollToOffset(x, y, false);
    }, 0);
  }, [data, disableScrollOnDataChange]);
  var _onScroll = (0, _react.useCallback)(function (event, offsetX, offsetY) {
    reloadPagesDebounce == null ? void 0 : reloadPagesDebounce.cancel();
    var _event$nativeEvent$co = event.nativeEvent.contentOffset,
      x = _event$nativeEvent$co.x,
      y = _event$nativeEvent$co.y;
    var newPageIndex = Math.round(isHorizontal ? x / pageWidth : y / pageHeight);
    if (pageIndex.current !== newPageIndex) {
      if (pageIndex.current !== undefined) {
        onPageChange == null ? void 0 : onPageChange(newPageIndex, pageIndex.current, {
          scrolledByUser: scrolledByUser.current
        });
        scrolledByUser.current = false;
        isOnEdge.current = false;
        isNearEdge.current = false;
        if (newPageIndex === 0 || newPageIndex === data.length - 1) {
          isOnEdge.current = true;
        } else if (onReachNearEdgeThreshold && !(0, _inRange.default)(newPageIndex, onReachNearEdgeThreshold, data.length - onReachNearEdgeThreshold)) {
          isNearEdge.current = true;
        }
      }
      if (isHorizontal && _constants.default.isAndroid) {
        setTimeout(function () {
          onMomentumScrollEnd(event);
        }, 100);
      }
      pageIndex.current = newPageIndex;
    }
    onScroll == null ? void 0 : onScroll(event, offsetX, offsetY);
  }, [onScroll, onPageChange, data.length, reloadPagesDebounce]);
  var onMomentumScrollEnd = (0, _react.useCallback)(function (event) {
    if (pageIndex.current) {
      if (isOnEdge.current) {
        onReachEdge == null ? void 0 : onReachEdge(pageIndex.current);
        reloadPagesDebounce == null ? void 0 : reloadPagesDebounce(pageIndex.current);
      } else if (isNearEdge.current) {
        reloadPagesDebounce == null ? void 0 : reloadPagesDebounce(pageIndex.current);
        onReachNearEdge == null ? void 0 : onReachNearEdge(pageIndex.current);
      }
      scrollViewProps == null ? void 0 : scrollViewProps.onMomentumScrollEnd == null ? void 0 : scrollViewProps.onMomentumScrollEnd(event);
    }
  }, [scrollViewProps == null ? void 0 : scrollViewProps.onMomentumScrollEnd, onReachEdge, onReachNearEdge, reloadPagesDebounce]);
  var onScrollBeginDrag = (0, _react.useCallback)(function () {
    scrolledByUser.current = true;
  }, []);
  var scrollViewPropsMemo = (0, _react.useMemo)(function () {
    return _objectSpread(_objectSpread({
      pagingEnabled: isHorizontal,
      bounces: false
    }, scrollViewProps), {}, {
      onScrollBeginDrag: onScrollBeginDrag,
      onMomentumScrollEnd: onMomentumScrollEnd
    });
  }, [onScrollBeginDrag, onMomentumScrollEnd, scrollViewProps, isHorizontal]);
  var _style = (0, _react.useMemo)(function () {
    return [{
      height: pageHeight
    }, style];
  }, [pageHeight, style]);
  return (0, _jsxRuntime.jsx)(_recyclerlistview.RecyclerListView, {
    ref: listRef,
    isHorizontal: isHorizontal,
    rowRenderer: renderItem,
    dataProvider: dataProvider,
    layoutProvider: layoutProvider != null ? layoutProvider : _layoutProvider.current,
    extendedState: extendedState,
    initialRenderIndex: initialPageIndex,
    renderAheadOffset: 5 * pageWidth,
    onScroll: _onScroll,
    style: _style,
    scrollViewProps: scrollViewPropsMemo,
    onEndReached: onEndReached,
    onEndReachedThreshold: onEndReachedThreshold,
    onVisibleIndicesChanged: onVisibleIndicesChanged,
    renderFooter: renderFooter
  });
};
var _default = (0, _react.forwardRef)(InfiniteList);
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW5SYW5nZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2RlYm91bmNlIiwiX25vb3AiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9yZWN5Y2xlcmxpc3R2aWV3IiwiX2NvbnN0YW50cyIsIl9ob29rcyIsIl9qc3hSdW50aW1lIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIm93bktleXMiLCJlIiwiciIsInQiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRhdGFQcm92aWRlck1ha2VyIiwiaXRlbXMiLCJEYXRhUHJvdmlkZXIiLCJpdGVtMSIsIml0ZW0yIiwiY2xvbmVXaXRoUm93cyIsIkluZmluaXRlTGlzdCIsInByb3BzIiwicmVmIiwiaXNIb3Jpem9udGFsIiwicmVuZGVySXRlbSIsImRhdGEiLCJfcHJvcHMkcmVsb2FkUGFnZXMiLCJyZWxvYWRQYWdlcyIsIm5vb3AiLCJfcHJvcHMkcGFnZVdpZHRoIiwicGFnZVdpZHRoIiwiY29uc3RhbnRzIiwic2NyZWVuV2lkdGgiLCJfcHJvcHMkcGFnZUhlaWdodCIsInBhZ2VIZWlnaHQiLCJzY3JlZW5IZWlnaHQiLCJvblBhZ2VDaGFuZ2UiLCJvblJlYWNoRWRnZSIsIm9uUmVhY2hOZWFyRWRnZSIsIm9uUmVhY2hOZWFyRWRnZVRocmVzaG9sZCIsIl9wcm9wcyRpbml0aWFsUGFnZUluZCIsImluaXRpYWxQYWdlSW5kZXgiLCJleHRlbmRlZFN0YXRlIiwic2Nyb2xsVmlld1Byb3BzIiwiX3Byb3BzJHBvc2l0aW9uSW5kZXgiLCJwb3NpdGlvbkluZGV4IiwiZGlzYWJsZVNjcm9sbE9uRGF0YUNoYW5nZSIsIm9uRW5kUmVhY2hlZFRocmVzaG9sZCIsIm9uVmlzaWJsZUluZGljZXNDaGFuZ2VkIiwibGF5b3V0UHJvdmlkZXIiLCJvblNjcm9sbCIsIm9uRW5kUmVhY2hlZCIsInJlbmRlckZvb3RlciIsInN0eWxlIiwiZGF0YVByb3ZpZGVyIiwidXNlTWVtbyIsIl9sYXlvdXRQcm92aWRlciIsInVzZVJlZiIsIkxheW91dFByb3ZpZGVyIiwiX3R5cGUiLCJkaW0iLCJ3aWR0aCIsImhlaWdodCIsImxpc3RSZWYiLCJ1c2VDb21iaW5lZFJlZnMiLCJwYWdlSW5kZXgiLCJpc09uRWRnZSIsImlzTmVhckVkZ2UiLCJzY3JvbGxlZEJ5VXNlciIsInJlbG9hZFBhZ2VzRGVib3VuY2UiLCJ1c2VDYWxsYmFjayIsImRlYm91bmNlIiwibGVhZGluZyIsInRyYWlsaW5nIiwidXNlRWZmZWN0Iiwic2V0VGltZW91dCIsIl9saXN0UmVmJGN1cnJlbnQiLCJ4IiwiTWF0aCIsImZsb29yIiwieSIsImN1cnJlbnQiLCJzY3JvbGxUb09mZnNldCIsIl9vblNjcm9sbCIsImV2ZW50Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJjYW5jZWwiLCJfZXZlbnQkbmF0aXZlRXZlbnQkY28iLCJuYXRpdmVFdmVudCIsImNvbnRlbnRPZmZzZXQiLCJuZXdQYWdlSW5kZXgiLCJyb3VuZCIsInVuZGVmaW5lZCIsImluUmFuZ2UiLCJpc0FuZHJvaWQiLCJvbk1vbWVudHVtU2Nyb2xsRW5kIiwib25TY3JvbGxCZWdpbkRyYWciLCJzY3JvbGxWaWV3UHJvcHNNZW1vIiwicGFnaW5nRW5hYmxlZCIsImJvdW5jZXMiLCJfc3R5bGUiLCJqc3giLCJSZWN5Y2xlckxpc3RWaWV3Iiwicm93UmVuZGVyZXIiLCJpbml0aWFsUmVuZGVySW5kZXgiLCJyZW5kZXJBaGVhZE9mZnNldCIsIl9kZWZhdWx0IiwiZm9yd2FyZFJlZiIsImV4cG9ydHMiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaW5SYW5nZSBmcm9tICdsb2Rhc2gvaW5SYW5nZSc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnbG9kYXNoL2RlYm91bmNlJztcbmltcG9ydCBub29wIGZyb20gJ2xvZGFzaC9ub29wJztcbmltcG9ydCBSZWFjdCwgeyBmb3J3YXJkUmVmLCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBEYXRhUHJvdmlkZXIsIExheW91dFByb3ZpZGVyLCBSZWN5Y2xlckxpc3RWaWV3IH0gZnJvbSAncmVjeWNsZXJsaXN0dmlldyc7XG5pbXBvcnQgY29uc3RhbnRzIGZyb20gJy4uL2NvbW1vbnMvY29uc3RhbnRzJztcbmltcG9ydCB7IHVzZUNvbWJpbmVkUmVmcyB9IGZyb20gJy4uL2hvb2tzJztcbmNvbnN0IGRhdGFQcm92aWRlck1ha2VyID0gKGl0ZW1zKSA9PiBuZXcgRGF0YVByb3ZpZGVyKChpdGVtMSwgaXRlbTIpID0+IGl0ZW0xICE9PSBpdGVtMikuY2xvbmVXaXRoUm93cyhpdGVtcyk7XG5jb25zdCBJbmZpbml0ZUxpc3QgPSAocHJvcHMsIHJlZikgPT4ge1xuICAgIGNvbnN0IHsgaXNIb3Jpem9udGFsLCByZW5kZXJJdGVtLCBkYXRhLCByZWxvYWRQYWdlcyA9IG5vb3AsIHBhZ2VXaWR0aCA9IGNvbnN0YW50cy5zY3JlZW5XaWR0aCwgcGFnZUhlaWdodCA9IGNvbnN0YW50cy5zY3JlZW5IZWlnaHQsIG9uUGFnZUNoYW5nZSwgb25SZWFjaEVkZ2UsIG9uUmVhY2hOZWFyRWRnZSwgb25SZWFjaE5lYXJFZGdlVGhyZXNob2xkLCBpbml0aWFsUGFnZUluZGV4ID0gMCwgZXh0ZW5kZWRTdGF0ZSwgc2Nyb2xsVmlld1Byb3BzLCBwb3NpdGlvbkluZGV4ID0gMCwgZGlzYWJsZVNjcm9sbE9uRGF0YUNoYW5nZSwgb25FbmRSZWFjaGVkVGhyZXNob2xkLCBvblZpc2libGVJbmRpY2VzQ2hhbmdlZCwgbGF5b3V0UHJvdmlkZXIsIG9uU2Nyb2xsLCBvbkVuZFJlYWNoZWQsIHJlbmRlckZvb3Rlciwgc3R5bGUsIH0gPSBwcm9wcztcbiAgICBjb25zdCBkYXRhUHJvdmlkZXIgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIGRhdGFQcm92aWRlck1ha2VyKGRhdGEpO1xuICAgIH0sIFtkYXRhXSk7XG4gICAgY29uc3QgX2xheW91dFByb3ZpZGVyID0gdXNlUmVmKG5ldyBMYXlvdXRQcm92aWRlcigoKSA9PiAncGFnZScsIChfdHlwZSwgZGltKSA9PiB7XG4gICAgICAgIGRpbS53aWR0aCA9IHBhZ2VXaWR0aDtcbiAgICAgICAgZGltLmhlaWdodCA9IHBhZ2VIZWlnaHQ7XG4gICAgfSkpO1xuICAgIGNvbnN0IGxpc3RSZWYgPSB1c2VDb21iaW5lZFJlZnMocmVmKTtcbiAgICBjb25zdCBwYWdlSW5kZXggPSB1c2VSZWYoKTtcbiAgICBjb25zdCBpc09uRWRnZSA9IHVzZVJlZihmYWxzZSk7XG4gICAgY29uc3QgaXNOZWFyRWRnZSA9IHVzZVJlZihmYWxzZSk7XG4gICAgY29uc3Qgc2Nyb2xsZWRCeVVzZXIgPSB1c2VSZWYoZmFsc2UpO1xuICAgIGNvbnN0IHJlbG9hZFBhZ2VzRGVib3VuY2UgPSB1c2VDYWxsYmFjayhkZWJvdW5jZShyZWxvYWRQYWdlcywgNTAwLCB7IGxlYWRpbmc6IGZhbHNlLCB0cmFpbGluZzogdHJ1ZSB9KSwgW3JlbG9hZFBhZ2VzXSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGRpc2FibGVTY3JvbGxPbkRhdGFDaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHggPSBpc0hvcml6b250YWwgPyBNYXRoLmZsb29yKGRhdGEubGVuZ3RoIC8gMikgKiBwYWdlV2lkdGggOiAwO1xuICAgICAgICAgICAgY29uc3QgeSA9IGlzSG9yaXpvbnRhbCA/IDAgOiBwb3NpdGlvbkluZGV4ICogcGFnZUhlaWdodDtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGxpc3RSZWYuY3VycmVudD8uc2Nyb2xsVG9PZmZzZXQ/Lih4LCB5LCBmYWxzZSk7XG4gICAgICAgIH0sIDApO1xuICAgIH0sIFtkYXRhLCBkaXNhYmxlU2Nyb2xsT25EYXRhQ2hhbmdlXSk7XG4gICAgY29uc3QgX29uU2Nyb2xsID0gdXNlQ2FsbGJhY2soKGV2ZW50LCBvZmZzZXRYLCBvZmZzZXRZKSA9PiB7XG4gICAgICAgIHJlbG9hZFBhZ2VzRGVib3VuY2U/LmNhbmNlbCgpO1xuICAgICAgICBjb25zdCB7IHgsIHkgfSA9IGV2ZW50Lm5hdGl2ZUV2ZW50LmNvbnRlbnRPZmZzZXQ7XG4gICAgICAgIGNvbnN0IG5ld1BhZ2VJbmRleCA9IE1hdGgucm91bmQoaXNIb3Jpem9udGFsID8geCAvIHBhZ2VXaWR0aCA6IHkgLyBwYWdlSGVpZ2h0KTtcbiAgICAgICAgaWYgKHBhZ2VJbmRleC5jdXJyZW50ICE9PSBuZXdQYWdlSW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChwYWdlSW5kZXguY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgb25QYWdlQ2hhbmdlPy4obmV3UGFnZUluZGV4LCBwYWdlSW5kZXguY3VycmVudCwgeyBzY3JvbGxlZEJ5VXNlcjogc2Nyb2xsZWRCeVVzZXIuY3VycmVudCB9KTtcbiAgICAgICAgICAgICAgICBzY3JvbGxlZEJ5VXNlci5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaXNPbkVkZ2UuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlzTmVhckVkZ2UuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChuZXdQYWdlSW5kZXggPT09IDAgfHwgbmV3UGFnZUluZGV4ID09PSBkYXRhLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNPbkVkZ2UuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9uUmVhY2hOZWFyRWRnZVRocmVzaG9sZCAmJlxuICAgICAgICAgICAgICAgICAgICAhaW5SYW5nZShuZXdQYWdlSW5kZXgsIG9uUmVhY2hOZWFyRWRnZVRocmVzaG9sZCwgZGF0YS5sZW5ndGggLSBvblJlYWNoTmVhckVkZ2VUaHJlc2hvbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzTmVhckVkZ2UuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCAmJiBjb25zdGFudHMuaXNBbmRyb2lkKSB7XG4gICAgICAgICAgICAgICAgLy8gTk9URTogdGhpcyBpcyBkb25lIG9ubHkgdG8gaGFuZGxlICdvbk1vbWVudHVtU2Nyb2xsRW5kJyBub3QgYmVpbmcgY2FsbGVkIG9uIEFuZHJvaWRcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb25Nb21lbnR1bVNjcm9sbEVuZChldmVudCk7XG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhZ2VJbmRleC5jdXJyZW50ID0gbmV3UGFnZUluZGV4O1xuICAgICAgICB9XG4gICAgICAgIG9uU2Nyb2xsPy4oZXZlbnQsIG9mZnNldFgsIG9mZnNldFkpO1xuICAgIH0sIFtvblNjcm9sbCwgb25QYWdlQ2hhbmdlLCBkYXRhLmxlbmd0aCwgcmVsb2FkUGFnZXNEZWJvdW5jZV0pO1xuICAgIGNvbnN0IG9uTW9tZW50dW1TY3JvbGxFbmQgPSB1c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgICAgIGlmIChwYWdlSW5kZXguY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKGlzT25FZGdlLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBvblJlYWNoRWRnZT8uKHBhZ2VJbmRleC5jdXJyZW50KTtcbiAgICAgICAgICAgICAgICByZWxvYWRQYWdlc0RlYm91bmNlPy4ocGFnZUluZGV4LmN1cnJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNOZWFyRWRnZS5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgcmVsb2FkUGFnZXNEZWJvdW5jZT8uKHBhZ2VJbmRleC5jdXJyZW50KTtcbiAgICAgICAgICAgICAgICBvblJlYWNoTmVhckVkZ2U/LihwYWdlSW5kZXguY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzY3JvbGxWaWV3UHJvcHM/Lm9uTW9tZW50dW1TY3JvbGxFbmQ/LihldmVudCk7XG4gICAgICAgIH1cbiAgICB9LCBbc2Nyb2xsVmlld1Byb3BzPy5vbk1vbWVudHVtU2Nyb2xsRW5kLCBvblJlYWNoRWRnZSwgb25SZWFjaE5lYXJFZGdlLCByZWxvYWRQYWdlc0RlYm91bmNlXSk7XG4gICAgY29uc3Qgb25TY3JvbGxCZWdpbkRyYWcgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHNjcm9sbGVkQnlVc2VyLmN1cnJlbnQgPSB0cnVlO1xuICAgIH0sIFtdKTtcbiAgICBjb25zdCBzY3JvbGxWaWV3UHJvcHNNZW1vID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYWdpbmdFbmFibGVkOiBpc0hvcml6b250YWwsXG4gICAgICAgICAgICBib3VuY2VzOiBmYWxzZSxcbiAgICAgICAgICAgIC4uLnNjcm9sbFZpZXdQcm9wcyxcbiAgICAgICAgICAgIG9uU2Nyb2xsQmVnaW5EcmFnLFxuICAgICAgICAgICAgb25Nb21lbnR1bVNjcm9sbEVuZFxuICAgICAgICB9O1xuICAgIH0sIFtvblNjcm9sbEJlZ2luRHJhZywgb25Nb21lbnR1bVNjcm9sbEVuZCwgc2Nyb2xsVmlld1Byb3BzLCBpc0hvcml6b250YWxdKTtcbiAgICBjb25zdCBfc3R5bGUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIFt7IGhlaWdodDogcGFnZUhlaWdodCB9LCBzdHlsZV07XG4gICAgfSwgW3BhZ2VIZWlnaHQsIHN0eWxlXSk7XG4gICAgcmV0dXJuICg8UmVjeWNsZXJMaXN0VmlldyBcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgcmVmPXtsaXN0UmVmfSBpc0hvcml6b250YWw9e2lzSG9yaXpvbnRhbH0gcm93UmVuZGVyZXI9e3JlbmRlckl0ZW19IGRhdGFQcm92aWRlcj17ZGF0YVByb3ZpZGVyfSBsYXlvdXRQcm92aWRlcj17bGF5b3V0UHJvdmlkZXIgPz8gX2xheW91dFByb3ZpZGVyLmN1cnJlbnR9IGV4dGVuZGVkU3RhdGU9e2V4dGVuZGVkU3RhdGV9IGluaXRpYWxSZW5kZXJJbmRleD17aW5pdGlhbFBhZ2VJbmRleH0gcmVuZGVyQWhlYWRPZmZzZXQ9ezUgKiBwYWdlV2lkdGh9IG9uU2Nyb2xsPXtfb25TY3JvbGx9IHN0eWxlPXtfc3R5bGV9IHNjcm9sbFZpZXdQcm9wcz17c2Nyb2xsVmlld1Byb3BzTWVtb30gb25FbmRSZWFjaGVkPXtvbkVuZFJlYWNoZWR9IG9uRW5kUmVhY2hlZFRocmVzaG9sZD17b25FbmRSZWFjaGVkVGhyZXNob2xkfSBvblZpc2libGVJbmRpY2VzQ2hhbmdlZD17b25WaXNpYmxlSW5kaWNlc0NoYW5nZWR9IHJlbmRlckZvb3Rlcj17cmVuZGVyRm9vdGVyfS8+KTtcbn07XG5leHBvcnQgZGVmYXVsdCBmb3J3YXJkUmVmKEluZmluaXRl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