9a57cb182cbfb974c462008eb5ea7ea2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _xdate = _interopRequireDefault(require("xdate"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _dateutils = require("../../dateutils");
var _interface = require("../../interface");
var _hooks = require("../../hooks");
var _commons = require("../commons");
var _style = _interopRequireDefault(require("../style"));
var _index = _interopRequireDefault(require("./index"));
var _todayButton = _interopRequireDefault(require("./todayButton"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var CalendarProvider = function CalendarProvider(props) {
  var theme = props.theme,
    date = props.date,
    onDateChanged = props.onDateChanged,
    onMonthChange = props.onMonthChange,
    _props$showTodayButto = props.showTodayButton,
    showTodayButton = _props$showTodayButto === void 0 ? false : _props$showTodayButto,
    disabledOpacity = props.disabledOpacity,
    todayBottomMargin = props.todayBottomMargin,
    todayButtonStyle = props.todayButtonStyle,
    propsStyle = props.style,
    numberOfDays = props.numberOfDays,
    _props$timelineLeftIn = props.timelineLeftInset,
    timelineLeftInset = _props$timelineLeftIn === void 0 ? 72 : _props$timelineLeftIn,
    children = props.children;
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var todayButton = (0, _react.useRef)();
  var prevDate = (0, _react.useRef)(date);
  var currDate = (0, _react.useRef)(date);
  var _useState = (0, _react.useState)(date),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentDate = _useState2[0],
    setCurrentDate = _useState2[1];
  var _useState3 = (0, _react.useState)(_commons.UpdateSources.CALENDAR_INIT),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    updateSource = _useState4[0],
    setUpdateSource = _useState4[1];
  var wrapperStyle = (0, _react.useMemo)(function () {
    return [style.current.contextWrapper, propsStyle];
  }, [style, propsStyle]);
  (0, _hooks.useDidUpdate)(function () {
    if (date && date !== currentDate) {
      _setDate(date, _commons.UpdateSources.PROP_UPDATE);
    }
  }, [date]);
  var _setDate = (0, _react.useCallback)(function (date, updateSource) {
    prevDate.current = currDate.current;
    currDate.current = date;
    setCurrentDate(date);
    setUpdateSource(updateSource);
    onDateChanged == null ? void 0 : onDateChanged(date, updateSource);
    if (!(0, _dateutils.sameMonth)(new _xdate.default(date), new _xdate.default(prevDate.current))) {
      onMonthChange == null ? void 0 : onMonthChange((0, _interface.xdateToData)(new _xdate.default(date)), updateSource);
    }
  }, [onDateChanged, onMonthChange]);
  var _setDisabled = (0, _react.useCallback)(function (disabled) {
    if (showTodayButton) {
      var _todayButton$current;
      (_todayButton$current = todayButton.current) == null ? void 0 : _todayButton$current.disable(disabled);
    }
  }, [showTodayButton]);
  var contextValue = (0, _react.useMemo)(function () {
    return {
      date: currentDate,
      prevDate: prevDate.current,
      updateSource: updateSource,
      setDate: _setDate,
      setDisabled: _setDisabled,
      numberOfDays: numberOfDays,
      timelineLeftInset: timelineLeftInset
    };
  }, [currentDate, updateSource, numberOfDays, _setDisabled]);
  var renderTodayButton = function renderTodayButton() {
    return (0, _jsxRuntime.jsx)(_todayButton.default, {
      ref: todayButton,
      disabledOpacity: disabledOpacity,
      margin: todayBottomMargin,
      style: todayButtonStyle,
      theme: theme
    });
  };
  return (0, _jsxRuntime.jsxs)(_index.default.Provider, {
    value: contextValue,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: wrapperStyle,
      children: children
    }, numberOfDays), showTodayButton && renderTodayButton()]
  });
};
var _default = CalendarProvider;
exports.default = _default;
CalendarProvider.displayName = 'CalendarProvider';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,