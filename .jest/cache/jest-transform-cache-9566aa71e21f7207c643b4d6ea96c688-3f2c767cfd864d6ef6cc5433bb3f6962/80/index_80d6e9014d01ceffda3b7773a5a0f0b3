f38437b1917d7216f72280743a4b4b74
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _interface = require("../../../interface");
var _style = _interopRequireDefault(require("./style"));
var _marking2 = _interopRequireDefault(require("../marking"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var BasicDay = function BasicDay(props) {
  var theme = props.theme,
    date = props.date,
    onPress = props.onPress,
    onLongPress = props.onLongPress,
    markingType = props.markingType,
    marking = props.marking,
    state = props.state,
    disableAllTouchEventsForDisabledDays = props.disableAllTouchEventsForDisabledDays,
    disableAllTouchEventsForInactiveDays = props.disableAllTouchEventsForInactiveDays,
    accessibilityLabel = props.accessibilityLabel,
    children = props.children,
    testID = props.testID;
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var _marking = marking || {};
  var isSelected = _marking.selected || state === 'selected';
  var isDisabled = typeof _marking.disabled !== 'undefined' ? _marking.disabled : state === 'disabled';
  var isInactive = _marking == null ? void 0 : _marking.inactive;
  var isToday = state === 'today';
  var isMultiDot = markingType === _marking2.default.markings.MULTI_DOT;
  var isMultiPeriod = markingType === _marking2.default.markings.MULTI_PERIOD;
  var isCustom = markingType === _marking2.default.markings.CUSTOM;
  var dateData = date ? (0, _interface.xdateToData)(date) : undefined;
  var shouldDisableTouchEvent = function shouldDisableTouchEvent() {
    var disableTouchEvent = _marking.disableTouchEvent;
    var disableTouch = false;
    if (typeof disableTouchEvent === 'boolean') {
      disableTouch = disableTouchEvent;
    } else if (typeof disableAllTouchEventsForDisabledDays === 'boolean' && isDisabled) {
      disableTouch = disableAllTouchEventsForDisabledDays;
    } else if (typeof disableAllTouchEventsForInactiveDays === 'boolean' && isInactive) {
      disableTouch = disableAllTouchEventsForInactiveDays;
    }
    return disableTouch;
  };
  var getContainerStyle = function getContainerStyle() {
    var customStyles = _marking.customStyles,
      selectedColor = _marking.selectedColor;
    var styles = [style.current.base];
    if (isSelected) {
      styles.push(style.current.selected);
      if (selectedColor) {
        styles.push({
          backgroundColor: selectedColor
        });
      }
    } else if (isToday) {
      styles.push(style.current.today);
    }
    if (isCustom && customStyles && customStyles.container) {
      if (customStyles.container.borderRadius === undefined) {
        customStyles.container.borderRadius = 16;
      }
      styles.push(customStyles.container);
    }
    return styles;
  };
  var getTextStyle = function getTextStyle() {
    var customStyles = _marking.customStyles,
      selectedTextColor = _marking.selectedTextColor;
    var styles = [style.current.text];
    if (isSelected) {
      styles.push(style.current.selectedText);
      if (selectedTextColor) {
        styles.push({
          color: selectedTextColor
        });
      }
    } else if (isDisabled) {
      styles.push(style.current.disabledText);
    } else if (isToday) {
      styles.push(style.current.todayText);
    } else if (isInactive) {
      styles.push(style.current.inactiveText);
    }
    if (isCustom && customStyles && customStyles.text) {
      styles.push(customStyles.text);
    }
    return styles;
  };
  var _onPress = (0, _react.useCallback)(function () {
    onPress == null ? void 0 : onPress(dateData);
  }, [onPress, date]);
  var _onLongPress = (0, _react.useCallback)(function () {
    onLongPress == null ? void 0 : onLongPress(dateData);
  }, [onLongPress, date]);
  var renderMarking = function renderMarking() {
    var marked = _marking.marked,
      dotColor = _marking.dotColor,
      dots = _marking.dots,
      periods = _marking.periods;
    return (0, _jsxRuntime.jsx)(_marking2.default, {
      type: markingType,
      theme: theme,
      marked: isMultiDot ? true : marked,
      selected: isSelected,
      disabled: isDisabled,
      inactive: isInactive,
      today: isToday,
      dotColor: dotColor,
      dots: dots,
      periods: periods
    });
  };
  var renderText = function renderText() {
    return (0, _jsxRuntime.jsx)(_reactNative.Text, {
      allowFontScaling: false,
      style: getTextStyle(),
      children: String(children)
    });
  };
  var renderContent = function renderContent() {
    return (0, _jsxRuntime.jsxs)(_react.Fragment, {
      children: [renderText(), renderMarking()]
    });
  };
  var renderContainer = function renderContainer() {
    var activeOpacity = _marking.activeOpacity;
    return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: testID,
      style: getContainerStyle(),
      disabled: shouldDisableTouchEvent(),
      activeOpacity: activeOpacity,
      onPress: !shouldDisableTouchEvent() ? _onPress : undefined,
      onLongPress: !shouldDisableTouchEvent() ? _onLongPress : undefined,
      accessible: true,
      accessibilityRole: isDisabled ? undefined : 'button',
      accessibilityLabel: accessibilityLabel,
      children: isMultiPeriod ? renderText() : renderContent()
    });
  };
  var renderPeriodsContainer = function renderPeriodsContainer() {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: style.current.container,
      children: [renderContainer(), renderMarking()]
    });
  };
  return isMultiPeriod ? renderPeriodsContainer() : renderContainer();
};
var _default = BasicDay;
exports.default = _default;
BasicDay.displayName = 'BasicDay';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,