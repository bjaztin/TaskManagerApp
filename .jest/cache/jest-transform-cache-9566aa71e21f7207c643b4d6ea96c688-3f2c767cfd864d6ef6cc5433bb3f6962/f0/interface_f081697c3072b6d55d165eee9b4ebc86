d6fec24e3c70e66c6fd3695185413145
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.padNumber = padNumber;
exports.parseDate = parseDate;
exports.toMarkingFormat = toMarkingFormat;
exports.xdateToData = xdateToData;
var XDate = require('xdate');
function padNumber(n) {
  if (n < 10) {
    return '0' + n;
  }
  return n;
}
function xdateToData(date) {
  var d = date instanceof XDate ? date : new XDate(date);
  var dateString = toMarkingFormat(d);
  return {
    year: d.getFullYear(),
    month: d.getMonth() + 1,
    day: d.getDate(),
    timestamp: new XDate(dateString, true).getTime(),
    dateString: dateString
  };
}
function parseDate(d) {
  if (!d) {
    return;
  } else if (d.timestamp) {
    return new XDate(d.timestamp, true);
  } else if (d instanceof XDate) {
    return new XDate(toMarkingFormat(d), true);
  } else if (d.getTime) {
    var dateString = d.getFullYear() + '-' + padNumber(d.getMonth() + 1) + '-' + padNumber(d.getDate());
    return new XDate(dateString, true);
  } else if (d.year) {
    var _dateString = d.year + '-' + padNumber(d.month) + '-' + padNumber(d.day);
    return new XDate(_dateString, true);
  } else if (d) {
    return new XDate(d, true);
  }
}
function toMarkingFormat(d) {
  if (!isNaN(d.getTime())) {
    var year = `${d.getFullYear()}`;
    var month = d.getMonth() + 1;
    var doubleDigitMonth = month < 10 ? `0${month}` : `${month}`;
    var day = d.getDate();
    var doubleDigitDay = day < 10 ? `0${day}` : `${day}`;
    return year + '-' + doubleDigitMonth + '-' + doubleDigitDay;
  }
  return 'Invalid Date';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJYRGF0ZSIsInJlcXVpcmUiLCJwYWROdW1iZXIiLCJuIiwieGRhdGVUb0RhdGEiLCJkYXRlIiwiZCIsImRhdGVTdHJpbmciLCJ0b01hcmtpbmdGb3JtYXQiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJtb250aCIsImdldE1vbnRoIiwiZGF5IiwiZ2V0RGF0ZSIsInRpbWVzdGFtcCIsImdldFRpbWUiLCJwYXJzZURhdGUiLCJpc05hTiIsImRvdWJsZURpZ2l0TW9udGgiLCJkb3VibGVEaWdpdERheSJdLCJzb3VyY2VzIjpbImludGVyZmFjZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBYRGF0ZSA9IHJlcXVpcmUoJ3hkYXRlJyk7XG5leHBvcnQgZnVuY3Rpb24gcGFkTnVtYmVyKG4pIHtcbiAgICBpZiAobiA8IDEwKSB7XG4gICAgICAgIHJldHVybiAnMCcgKyBuO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiB4ZGF0ZVRvRGF0YShkYXRlKSB7XG4gICAgY29uc3QgZCA9IGRhdGUgaW5zdGFuY2VvZiBYRGF0ZSA/IGRhdGUgOiBuZXcgWERhdGUoZGF0ZSk7XG4gICAgY29uc3QgZGF0ZVN0cmluZyA9IHRvTWFya2luZ0Zvcm1hdChkKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB5ZWFyOiBkLmdldEZ1bGxZZWFyKCksXG4gICAgICAgIG1vbnRoOiBkLmdldE1vbnRoKCkgKyAxLFxuICAgICAgICBkYXk6IGQuZ2V0RGF0ZSgpLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBYRGF0ZShkYXRlU3RyaW5nLCB0cnVlKS5nZXRUaW1lKCksXG4gICAgICAgIGRhdGVTdHJpbmc6IGRhdGVTdHJpbmdcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRGF0ZShkKSB7XG4gICAgaWYgKCFkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSBpZiAoZC50aW1lc3RhbXApIHtcbiAgICAgICAgLy8gY29udmVudGlvbmFsIGRhdGEgdGltZXN0YW1wXG4gICAgICAgIHJldHVybiBuZXcgWERhdGUoZC50aW1lc3RhbXAsIHRydWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkIGluc3RhbmNlb2YgWERhdGUpIHtcbiAgICAgICAgLy8geGRhdGVcbiAgICAgICAgcmV0dXJuIG5ldyBYRGF0ZSh0b01hcmtpbmdGb3JtYXQoZCksIHRydWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkLmdldFRpbWUpIHtcbiAgICAgICAgLy8gamF2YXNjcmlwdCBkYXRlXG4gICAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBkLmdldEZ1bGxZZWFyKCkgKyAnLScgKyBwYWROdW1iZXIoZC5nZXRNb250aCgpICsgMSkgKyAnLScgKyBwYWROdW1iZXIoZC5nZXREYXRlKCkpO1xuICAgICAgICByZXR1cm4gbmV3IFhEYXRlKGRhdGVTdHJpbmcsIHRydWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkLnllYXIpIHtcbiAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IGQueWVhciArICctJyArIHBhZE51bWJlcihkLm1vbnRoKSArICctJyArIHBhZE51bWJlcihkLmRheSk7XG4gICAgICAgIHJldHVybiBuZXcgWERhdGUoZGF0ZVN0cmluZywgdHJ1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGQpIHtcbiAgICAgICAgLy8gdGltZXN0YW1wIG51bWJlciBvciBkYXRlIGZvcm1hdHRlZCBhcyBzdHJpbmdcbiAgICAgICAgcmV0dXJuIG5ldyBYRGF0ZShkLCB0cnVlKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gdG9NYXJraW5nRm9ybWF0KGQpIHtcbiAgICBpZiAoIWlzTmFOKGQuZ2V0VGltZSgpKSkge1xuICAgICAgICBjb25zdCB5ZWFyID0gYCR7ZC5nZXRGdWxsWWVhcigpfWA7XG4gICAgICAgIGNvbnN0IG1vbnRoID0gZC5nZXRNb250aCgpICsgMTtcbiAgICAgICAgY29uc3QgZG91YmxlRGlnaXRNb250aCA9IG1vbnRoIDwgMTAgPyBgMCR7bW9udGh9YCA6IGAke21vbnRofWA7XG4gICAgICAgIGNvbnN0IGRheSA9IGQuZ2V0RGF0ZSgpO1xuICAgICAgICBjb25zdCBkb3VibGVEaWdpdERheSA9IGRheSA8IDEwID8gYDAke2RheX1gIDogYCR7ZGF5fWA7XG4gICAgICAgIHJldHVybiB5ZWFyICsgJy0nICsgZG91YmxlRGlnaXRNb250aCArICctJyArIGRvdWJsZURpZ2l0RGF5O1xuICAgIH1cbiAgICByZXR1cm4gJ0ludmFsaWQgRGF0ZSc7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDdkIsU0FBU0MsU0FBU0EsQ0FBQ0MsQ0FBQyxFQUFFO0VBQ3pCLElBQUlBLENBQUMsR0FBRyxFQUFFLEVBQUU7SUFDUixPQUFPLEdBQUcsR0FBR0EsQ0FBQztFQUNsQjtFQUNBLE9BQU9BLENBQUM7QUFDWjtBQUNPLFNBQVNDLFdBQVdBLENBQUNDLElBQUksRUFBRTtFQUM5QixJQUFNQyxDQUFDLEdBQUdELElBQUksWUFBWUwsS0FBSyxHQUFHSyxJQUFJLEdBQUcsSUFBSUwsS0FBSyxDQUFDSyxJQUFJLENBQUM7RUFDeEQsSUFBTUUsVUFBVSxHQUFHQyxlQUFlLENBQUNGLENBQUMsQ0FBQztFQUNyQyxPQUFPO0lBQ0hHLElBQUksRUFBRUgsQ0FBQyxDQUFDSSxXQUFXLENBQUMsQ0FBQztJQUNyQkMsS0FBSyxFQUFFTCxDQUFDLENBQUNNLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUN2QkMsR0FBRyxFQUFFUCxDQUFDLENBQUNRLE9BQU8sQ0FBQyxDQUFDO0lBQ2hCQyxTQUFTLEVBQUUsSUFBSWYsS0FBSyxDQUFDTyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUNTLE9BQU8sQ0FBQyxDQUFDO0lBQ2hEVCxVQUFVLEVBQUVBO0VBQ2hCLENBQUM7QUFDTDtBQUNPLFNBQVNVLFNBQVNBLENBQUNYLENBQUMsRUFBRTtFQUN6QixJQUFJLENBQUNBLENBQUMsRUFBRTtJQUNKO0VBQ0osQ0FBQyxNQUNJLElBQUlBLENBQUMsQ0FBQ1MsU0FBUyxFQUFFO0lBRWxCLE9BQU8sSUFBSWYsS0FBSyxDQUFDTSxDQUFDLENBQUNTLFNBQVMsRUFBRSxJQUFJLENBQUM7RUFDdkMsQ0FBQyxNQUNJLElBQUlULENBQUMsWUFBWU4sS0FBSyxFQUFFO0lBRXpCLE9BQU8sSUFBSUEsS0FBSyxDQUFDUSxlQUFlLENBQUNGLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQztFQUM5QyxDQUFDLE1BQ0ksSUFBSUEsQ0FBQyxDQUFDVSxPQUFPLEVBQUU7SUFFaEIsSUFBTVQsVUFBVSxHQUFHRCxDQUFDLENBQUNJLFdBQVcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHUixTQUFTLENBQUNJLENBQUMsQ0FBQ00sUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUdWLFNBQVMsQ0FBQ0ksQ0FBQyxDQUFDUSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3JHLE9BQU8sSUFBSWQsS0FBSyxDQUFDTyxVQUFVLEVBQUUsSUFBSSxDQUFDO0VBQ3RDLENBQUMsTUFDSSxJQUFJRCxDQUFDLENBQUNHLElBQUksRUFBRTtJQUNiLElBQU1GLFdBQVUsR0FBR0QsQ0FBQyxDQUFDRyxJQUFJLEdBQUcsR0FBRyxHQUFHUCxTQUFTLENBQUNJLENBQUMsQ0FBQ0ssS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHVCxTQUFTLENBQUNJLENBQUMsQ0FBQ08sR0FBRyxDQUFDO0lBQzdFLE9BQU8sSUFBSWIsS0FBSyxDQUFDTyxXQUFVLEVBQUUsSUFBSSxDQUFDO0VBQ3RDLENBQUMsTUFDSSxJQUFJRCxDQUFDLEVBQUU7SUFFUixPQUFPLElBQUlOLEtBQUssQ0FBQ00sQ0FBQyxFQUFFLElBQUksQ0FBQztFQUM3QjtBQUNKO0FBQ08sU0FBU0UsZUFBZUEsQ0FBQ0YsQ0FBQyxFQUFFO0VBQy9CLElBQUksQ0FBQ1ksS0FBSyxDQUFDWixDQUFDLENBQUNVLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNyQixJQUFNUCxJQUFJLEdBQUksR0FBRUgsQ0FBQyxDQUFDSSxXQUFXLENBQUMsQ0FBRSxFQUFDO0lBQ2pDLElBQU1DLEtBQUssR0FBR0wsQ0FBQyxDQUFDTSxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDOUIsSUFBTU8sZ0JBQWdCLEdBQUdSLEtBQUssR0FBRyxFQUFFLEdBQUksSUFBR0EsS0FBTSxFQUFDLEdBQUksR0FBRUEsS0FBTSxFQUFDO0lBQzlELElBQU1FLEdBQUcsR0FBR1AsQ0FBQyxDQUFDUSxPQUFPLENBQUMsQ0FBQztJQUN2QixJQUFNTSxjQUFjLEdBQUdQLEdBQUcsR0FBRyxFQUFFLEdBQUksSUFBR0EsR0FBSSxFQUFDLEdBQUksR0FBRUEsR0FBSSxFQUFDO0lBQ3RELE9BQU9KLElBQUksR0FBRyxHQUFHLEdBQUdVLGdCQUFnQixHQUFHLEdBQUcsR0FBR0MsY0FBYztFQUMvRDtFQUNBLE9BQU8sY0FBYztBQUN6QiJ9