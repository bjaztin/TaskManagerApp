cc72b35fc6da422f1ef82142397dc959
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _includes = _interopRequireDefault(require("lodash/includes"));
var _xdate = _interopRequireDefault(require("xdate"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _dateutils = require("../../dateutils");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var accessibilityActions = [{
  name: 'increment',
  label: 'increment'
}, {
  name: 'decrement',
  label: 'decrement'
}];
var CalendarHeader = (0, _react.forwardRef)(function (props, ref) {
  var theme = props.theme,
    propsStyle = props.style,
    propsAddMonth = props.addMonth,
    month = props.month,
    monthFormat = props.monthFormat,
    firstDay = props.firstDay,
    hideDayNames = props.hideDayNames,
    showWeekNumbers = props.showWeekNumbers,
    hideArrows = props.hideArrows,
    renderArrow = props.renderArrow,
    onPressArrowLeft = props.onPressArrowLeft,
    onPressArrowRight = props.onPressArrowRight,
    _props$arrowsHitSlop = props.arrowsHitSlop,
    arrowsHitSlop = _props$arrowsHitSlop === void 0 ? 20 : _props$arrowsHitSlop,
    disableArrowLeft = props.disableArrowLeft,
    disableArrowRight = props.disableArrowRight,
    disabledDaysIndexes = props.disabledDaysIndexes,
    displayLoadingIndicator = props.displayLoadingIndicator,
    customHeaderTitle = props.customHeaderTitle,
    renderHeader = props.renderHeader,
    webAriaLevel = props.webAriaLevel,
    testID = props.testID,
    accessibilityElementsHidden = props.accessibilityElementsHidden,
    importantForAccessibility = props.importantForAccessibility,
    numberOfDays = props.numberOfDays,
    _props$current = props.current,
    current = _props$current === void 0 ? '' : _props$current,
    timelineLeftInset = props.timelineLeftInset;
  var numberOfDaysCondition = (0, _react.useMemo)(function () {
    return numberOfDays && numberOfDays > 1;
  }, [numberOfDays]);
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var headerStyle = (0, _react.useMemo)(function () {
    return [style.current.header, numberOfDaysCondition ? style.current.partialHeader : undefined];
  }, [numberOfDaysCondition]);
  var partialWeekStyle = (0, _react.useMemo)(function () {
    return [style.current.partialWeek, {
      paddingLeft: timelineLeftInset
    }];
  }, [timelineLeftInset]);
  var dayNamesStyle = (0, _react.useMemo)(function () {
    return [style.current.week, numberOfDaysCondition ? partialWeekStyle : undefined];
  }, [numberOfDaysCondition, partialWeekStyle]);
  var hitSlop = (0, _react.useMemo)(function () {
    return typeof arrowsHitSlop === 'number' ? {
      top: arrowsHitSlop,
      left: arrowsHitSlop,
      bottom: arrowsHitSlop,
      right: arrowsHitSlop
    } : arrowsHitSlop;
  }, [arrowsHitSlop]);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      onPressLeft: onPressLeft,
      onPressRight: onPressRight
    };
  });
  var addMonth = (0, _react.useCallback)(function () {
    propsAddMonth == null ? void 0 : propsAddMonth(1);
  }, [propsAddMonth]);
  var subtractMonth = (0, _react.useCallback)(function () {
    propsAddMonth == null ? void 0 : propsAddMonth(-1);
  }, [propsAddMonth]);
  var onPressLeft = (0, _react.useCallback)(function () {
    if (typeof onPressArrowLeft === 'function') {
      return onPressArrowLeft(subtractMonth, month);
    }
    return subtractMonth();
  }, [onPressArrowLeft, subtractMonth, month]);
  var onPressRight = (0, _react.useCallback)(function () {
    if (typeof onPressArrowRight === 'function') {
      return onPressArrowRight(addMonth, month);
    }
    return addMonth();
  }, [onPressArrowRight, addMonth, month]);
  var onAccessibilityAction = (0, _react.useCallback)(function (event) {
    switch (event.nativeEvent.actionName) {
      case 'decrement':
        onPressLeft();
        break;
      case 'increment':
        onPressRight();
        break;
      default:
        break;
    }
  }, [onPressLeft, onPressRight]);
  var renderWeekDays = (0, _react.useMemo)(function () {
    var dayOfTheWeek = new _xdate.default(current).getDay();
    var weekDaysNames = numberOfDaysCondition ? (0, _dateutils.weekDayNames)(dayOfTheWeek) : (0, _dateutils.weekDayNames)(firstDay);
    var dayNames = numberOfDaysCondition ? weekDaysNames.slice(0, numberOfDays) : weekDaysNames;
    return dayNames.map(function (day, index) {
      var dayStyle = [style.current.dayHeader];
      if ((0, _includes.default)(disabledDaysIndexes, index)) {
        dayStyle.push(style.current.disabledDayHeader);
      }
      var dayTextAtIndex = `dayTextAtIndex${index}`;
      if (style.current[dayTextAtIndex]) {
        dayStyle.push(style.current[dayTextAtIndex]);
      }
      return (0, _jsxRuntime.jsx)(_reactNative.Text, {
        allowFontScaling: false,
        style: dayStyle,
        numberOfLines: 1,
        accessibilityLabel: '',
        children: day
      }, index);
    });
  }, [firstDay, current, numberOfDaysCondition, numberOfDays, disabledDaysIndexes]);
  var _renderHeader = function _renderHeader() {
    var webProps = _reactNative.Platform.OS === 'web' ? {
      'aria-level': webAriaLevel
    } : {};
    if (renderHeader) {
      return renderHeader(month);
    }
    if (customHeaderTitle) {
      return customHeaderTitle;
    }
    return (0, _jsxRuntime.jsx)(_react.Fragment, {
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, _objectSpread(_objectSpread({
        allowFontScaling: false,
        style: style.current.monthText,
        testID: `${testID}.title`
      }, webProps), {}, {
        children: (0, _dateutils.formatNumbers)(month == null ? void 0 : month.toString(monthFormat))
      }))
    });
  };
  var _renderArrow = function _renderArrow(direction) {
    if (hideArrows) {
      return (0, _jsxRuntime.jsx)(_reactNative.View, {});
    }
    var isLeft = direction === 'left';
    var arrowId = isLeft ? 'leftArrow' : 'rightArrow';
    var shouldDisable = isLeft ? disableArrowLeft : disableArrowRight;
    var onPress = !shouldDisable ? isLeft ? onPressLeft : onPressRight : undefined;
    var imageSource = isLeft ? require("../img/previous.png") : require("../img/next.png");
    var renderArrowDirection = isLeft ? 'left' : 'right';
    return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      onPress: onPress,
      disabled: shouldDisable,
      style: style.current.arrow,
      hitSlop: hitSlop,
      testID: `${testID}.${arrowId}`,
      children: renderArrow ? renderArrow(renderArrowDirection) : (0, _jsxRuntime.jsx)(_reactNative.Image, {
        source: imageSource,
        style: shouldDisable ? style.current.disabledArrowImage : style.current.arrowImage
      })
    });
  };
  var renderIndicator = function renderIndicator() {
    if (displayLoadingIndicator) {
      return (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
        color: theme == null ? void 0 : theme.indicatorColor,
        testID: `${testID}.loader`
      });
    }
  };
  var renderWeekNumbersSpace = function renderWeekNumbersSpace() {
    return showWeekNumbers && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: style.current.dayHeader
    });
  };
  var renderDayNames = function renderDayNames() {
    if (!hideDayNames) {
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: dayNamesStyle,
        testID: `${testID}.dayNames`,
        children: [renderWeekNumbersSpace(), renderWeekDays]
      });
    }
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    testID: testID,
    style: propsStyle,
    accessible: true,
    accessibilityRole: 'adjustable',
    accessibilityActions: accessibilityActions,
    onAccessibilityAction: onAccessibilityAction,
    accessibilityElementsHidden: accessibilityElementsHidden,
    importantForAccessibility: importantForAccessibility,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: headerStyle,
      children: [_renderArrow('left'), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: style.current.headerContainer,
        children: [_renderHeader(), renderIndicator()]
      }), _renderArrow('right')]
    }), renderDayNames()]
  });
});
var _default = CalendarHeader;
exports.default = _default;
CalendarHeader.displayName = 'CalendarHeader';
CalendarHeader.defaultProps = {
  monthFormat: 'MMMM yyyy',
  webAriaLevel: 1,
  arrowsHitSlop: 20
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,