0838ab853d30d9b22c8b58432d920501
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Switch = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Switch = function Switch(_a) {
  var _b, _c, _d;
  var _a$value = _a.value,
    value = _a$value === void 0 ? false : _a$value,
    _a$disabled = _a.disabled,
    disabled = _a$disabled === void 0 ? false : _a$disabled,
    onValueChange = _a.onValueChange,
    _a$color = _a.color,
    color = _a$color === void 0 ? 'primary' : _a$color,
    style = _a.style,
    theme = _a.theme,
    rest = __rest(_a, ["value", "disabled", "onValueChange", "color", "style", "theme"]);
  var switchedOnColor = color === 'primary' ? ((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.primary) ? theme.colors.primary : '' : color;
  var onTintColor = _reactNative.Platform.OS === 'ios' || !disabled ? switchedOnColor : ((_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.disabled) ? theme.colors.disabled : '';
  var thumbTintColor = _reactNative.Platform.OS === 'ios' ? undefined : disabled || !value ? (_d = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _d === void 0 ? void 0 : _d.disabled : switchedOnColor;
  var props = _reactNative.Platform.OS === 'web' ? {
    activeTrackColor: onTintColor,
    thumbColor: thumbTintColor,
    activeThumbColor: switchedOnColor
  } : {
    thumbColor: thumbTintColor,
    trackColor: {
      true: onTintColor,
      false: ''
    }
  };
  return (0, _jsxRuntime.jsx)(_reactNative.Switch, _objectSpread(_objectSpread({
    value: value,
    accessibilityState: {
      checked: value,
      disabled: disabled
    },
    disabled: disabled,
    onValueChange: disabled ? undefined : onValueChange,
    style: style
  }, props), rest));
};
exports.Switch = Switch;
var _default = (0, _config.withTheme)(Switch, 'Switch');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,