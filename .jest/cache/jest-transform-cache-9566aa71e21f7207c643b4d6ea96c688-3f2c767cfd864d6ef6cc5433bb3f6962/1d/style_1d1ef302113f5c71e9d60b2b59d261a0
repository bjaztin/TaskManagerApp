9884ec497ef4241624a5812dea28cdc9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = styleConstructor;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactNative = require("react-native");
var defaultStyle = _interopRequireWildcard(require("../../style"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function styleConstructor() {
  var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var appStyle = _objectSpread(_objectSpread({}, defaultStyle), theme);
  return _reactNative.StyleSheet.create(_objectSpread({
    dots: {
      flexDirection: 'row'
    },
    periods: {
      alignSelf: 'stretch'
    },
    period: {
      height: 4,
      marginVertical: 1,
      backgroundColor: appStyle.dotColor
    },
    startingDay: {
      borderTopLeftRadius: 2,
      borderBottomLeftRadius: 2,
      marginLeft: 4
    },
    endingDay: {
      borderTopRightRadius: 2,
      borderBottomRightRadius: 2,
      marginRight: 4
    }
  }, theme['stylesheet.marking'] || {}));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiZGVmYXVsdFN0eWxlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0Iiwib3duS2V5cyIsImUiLCJyIiwidCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwic3R5bGVDb25zdHJ1Y3RvciIsInRoZW1lIiwidW5kZWZpbmVkIiwiYXBwU3R5bGUiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiZG90cyIsImZsZXhEaXJlY3Rpb24iLCJwZXJpb2RzIiwiYWxpZ25TZWxmIiwicGVyaW9kIiwiaGVpZ2h0IiwibWFyZ2luVmVydGljYWwiLCJiYWNrZ3JvdW5kQ29sb3IiLCJkb3RDb2xvciIsInN0YXJ0aW5nRGF5IiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlckJvdHRvbUxlZnRSYWRpdXMiLCJtYXJnaW5MZWZ0IiwiZW5kaW5nRGF5IiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsIm1hcmdpblJpZ2h0Il0sInNvdXJjZXMiOlsic3R5bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgKiBhcyBkZWZhdWx0U3R5bGUgZnJvbSAnLi4vLi4vc3R5bGUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3R5bGVDb25zdHJ1Y3Rvcih0aGVtZSA9IHt9KSB7XG4gICAgY29uc3QgYXBwU3R5bGUgPSB7IC4uLmRlZmF1bHRTdHlsZSwgLi4udGhlbWUgfTtcbiAgICByZXR1cm4gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgICAgICBkb3RzOiB7XG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAncm93J1xuICAgICAgICB9LFxuICAgICAgICBwZXJpb2RzOiB7XG4gICAgICAgICAgICBhbGlnblNlbGY6ICdzdHJldGNoJ1xuICAgICAgICB9LFxuICAgICAgICBwZXJpb2Q6IHtcbiAgICAgICAgICAgIGhlaWdodDogNCxcbiAgICAgICAgICAgIG1hcmdpblZlcnRpY2FsOiAxLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBhcHBTdHlsZS5kb3RDb2xvclxuICAgICAgICB9LFxuICAgICAgICBzdGFydGluZ0RheToge1xuICAgICAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogMixcbiAgICAgICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IDIsXG4gICAgICAgICAgICBtYXJnaW5MZWZ0OiA0XG4gICAgICAgIH0sXG4gICAgICAgIGVuZGluZ0RheToge1xuICAgICAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IDIsXG4gICAgICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogMixcbiAgICAgICAgICAgIG1hcmdpblJpZ2h0OiA0XG4gICAgICAgIH0sXG4gICAgICAgIC4uLih0aGVtZVsnc3R5bGVzaGVldC5tYXJraW5nJ10gfHwge30pXG4gICAgfSk7XG59XG4iXSwibWFwcGluZ3MiOiI7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