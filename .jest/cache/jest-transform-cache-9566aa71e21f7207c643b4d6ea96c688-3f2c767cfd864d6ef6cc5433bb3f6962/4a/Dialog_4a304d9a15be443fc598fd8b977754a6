cb52711e101e286a1a3f0116376b4e1c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Dialog = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _Overlay = _interopRequireDefault(require("../overlay/Overlay"));
var _config = require("../config");
var _DialogLoading = _interopRequireDefault(require("./DialogLoading"));
var _DialogTitle = _interopRequireDefault(require("./DialogTitle"));
var _DialogButton = _interopRequireDefault(require("./DialogButton"));
var _DialogActions = _interopRequireDefault(require("./DialogActions"));
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Dialog = Object.assign(function (_a) {
  var children = _a.children,
    theme = _a.theme,
    overlayStyle = _a.overlayStyle,
    onBackdropPress = _a.onBackdropPress,
    isVisible = _a.isVisible,
    rest = __rest(_a, ["children", "theme", "overlayStyle", "onBackdropPress", "isVisible"]);
  return (0, _jsxRuntime.jsx)(_Overlay.default, _objectSpread(_objectSpread({
    isVisible: isVisible,
    onBackdropPress: onBackdropPress,
    overlayStyle: _reactNative.StyleSheet.flatten([styles.dialog, overlayStyle]),
    testID: "Internal__Overlay"
  }, rest), {}, {
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.childrenContainer,
      children: children
    })
  }));
});
exports.Dialog = Dialog;
var styles = _reactNative.StyleSheet.create({
  dialog: {
    width: '75%',
    padding: 20
  },
  childrenContainer: {
    marginBottom: 5
  },
  buttonView: {
    marginTop: 10,
    marginRight: -35,
    flexDirection: 'row-reverse',
    justifyContent: 'flex-start'
  }
});
var ThemedDialog = Object.assign((0, _config.withTheme)(Dialog, 'Dialog'), {
  Loading: _DialogLoading.default,
  Title: _DialogTitle.default,
  Actions: _DialogActions.default,
  Button: _DialogButton.default
});
var _default = ThemedDialog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,