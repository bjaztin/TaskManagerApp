c4efa37f632e6a5ff23139145d29b3cd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _isFunction = _interopRequireDefault(require("lodash/isFunction"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _xdate = _interopRequireDefault(require("xdate"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _componentUpdater = require("../../componentUpdater");
var _dateutils = require("../../dateutils");
var _interface = require("../../interface");
var _style = _interopRequireDefault(require("./style"));
var _reservation = _interopRequireDefault(require("./reservation"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var ReservationList = function (_Component) {
  (0, _inherits2.default)(ReservationList, _Component);
  var _super = _createSuper(ReservationList);
  function ReservationList(props) {
    var _this;
    (0, _classCallCheck2.default)(this, ReservationList);
    _this = _super.call(this, props);
    _this.list = _react.default.createRef();
    _this.onScroll = function (event) {
      var yOffset = event.nativeEvent.contentOffset.y;
      _this.props.onScroll == null ? void 0 : _this.props.onScroll(yOffset);
      var topRowOffset = 0;
      var topRow;
      for (topRow = 0; topRow < _this.heights.length; topRow++) {
        if (topRowOffset + _this.heights[topRow] / 2 >= yOffset) {
          break;
        }
        topRowOffset += _this.heights[topRow];
      }
      var row = _this.state.reservations[topRow];
      if (!row) return;
      var day = row.date;
      if (day) {
        if (!(0, _dateutils.sameDate)(day, _this.selectedDay) && _this.scrollOver) {
          _this.selectedDay = day.clone();
          _this.props.onDayChange == null ? void 0 : _this.props.onDayChange(day.clone());
        }
      }
    };
    _this.onMoveShouldSetResponderCapture = function () {
      _this.onListTouch();
      return false;
    };
    _this.renderRow = function (_ref) {
      var item = _ref.item,
        index = _ref.index;
      var reservationProps = (0, _componentUpdater.extractReservationProps)(_this.props);
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        onLayout: _this.onRowLayoutChange.bind((0, _assertThisInitialized2.default)(_this), index),
        children: (0, _jsxRuntime.jsx)(_reservation.default, _objectSpread(_objectSpread({}, reservationProps), {}, {
          item: item.reservation,
          date: item.date
        }))
      });
    };
    _this.keyExtractor = function (item, index) {
      var _item$reservation;
      return (_this.props.reservationsKeyExtractor == null ? void 0 : _this.props.reservationsKeyExtractor(item, index)) || `${item == null ? void 0 : (_item$reservation = item.reservation) == null ? void 0 : _item$reservation.day}${index}`;
    };
    _this.style = (0, _style.default)(props.theme);
    _this.state = {
      reservations: []
    };
    _this.heights = [];
    _this.selectedDay = props.selectedDay;
    _this.scrollOver = true;
    return _this;
  }
  (0, _createClass2.default)(ReservationList, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateDataSource(this.getReservations(this.props).reservations);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;
      if (this.props.topDay && prevProps.topDay && prevProps !== this.props) {
        if (!(0, _dateutils.sameDate)(prevProps.topDay, this.props.topDay)) {
          this.setState({
            reservations: []
          }, function () {
            return _this2.updateReservations(_this2.props);
          });
        } else {
          this.updateReservations(this.props);
        }
      }
    }
  }, {
    key: "updateDataSource",
    value: function updateDataSource(reservations) {
      this.setState({
        reservations: reservations
      });
    }
  }, {
    key: "updateReservations",
    value: function updateReservations(props) {
      var selectedDay = props.selectedDay,
        showOnlySelectedDayItems = props.showOnlySelectedDayItems;
      var reservations = this.getReservations(props);
      if (!showOnlySelectedDayItems && this.list && !(0, _dateutils.sameDate)(selectedDay, this.selectedDay)) {
        var _this$list, _this$list$current;
        var scrollPosition = 0;
        for (var i = 0; i < reservations.scrollPosition; i++) {
          scrollPosition += this.heights[i] || 0;
        }
        this.scrollOver = false;
        (_this$list = this.list) == null ? void 0 : (_this$list$current = _this$list.current) == null ? void 0 : _this$list$current.scrollToOffset({
          offset: scrollPosition,
          animated: true
        });
      }
      this.selectedDay = selectedDay;
      this.updateDataSource(reservations.reservations);
    }
  }, {
    key: "getReservationsForDay",
    value: function getReservationsForDay(iterator, props) {
      var _props$items;
      var day = iterator.clone();
      var res = (_props$items = props.items) == null ? void 0 : _props$items[(0, _interface.toMarkingFormat)(day)];
      if (res && res.length) {
        return res.map(function (reservation, i) {
          return {
            reservation: reservation,
            date: i ? undefined : day
          };
        });
      } else if (res) {
        return [{
          date: iterator.clone()
        }];
      } else {
        return false;
      }
    }
  }, {
    key: "getReservations",
    value: function getReservations(props) {
      var selectedDay = props.selectedDay,
        showOnlySelectedDayItems = props.showOnlySelectedDayItems;
      if (!props.items || !selectedDay) {
        return {
          reservations: [],
          scrollPosition: 0
        };
      }
      var reservations = [];
      if (this.state.reservations && this.state.reservations.length) {
        var _this$state$reservati;
        var _iterator = (_this$state$reservati = this.state.reservations[0].date) == null ? void 0 : _this$state$reservati.clone();
        if (_iterator) {
          while (_iterator.getTime() < selectedDay.getTime()) {
            var res = this.getReservationsForDay(_iterator, props);
            if (!res) {
              reservations = [];
              break;
            } else {
              reservations = reservations.concat(res);
            }
            _iterator.addDays(1);
          }
        }
      }
      var scrollPosition = reservations.length;
      var iterator = selectedDay.clone();
      if (showOnlySelectedDayItems) {
        var _res = this.getReservationsForDay(iterator, props);
        if (_res) {
          reservations = _res;
        }
        iterator.addDays(1);
      } else {
        for (var i = 0; i < 31; i++) {
          var _res2 = this.getReservationsForDay(iterator, props);
          if (_res2) {
            reservations = reservations.concat(_res2);
          }
          iterator.addDays(1);
        }
      }
      return {
        reservations: reservations,
        scrollPosition: scrollPosition
      };
    }
  }, {
    key: "onListTouch",
    value: function onListTouch() {
      this.scrollOver = true;
    }
  }, {
    key: "onRowLayoutChange",
    value: function onRowLayoutChange(index, event) {
      this.heights[index] = event.nativeEvent.layout.height;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        items = _this$props.items,
        selectedDay = _this$props.selectedDay,
        theme = _this$props.theme,
        style = _this$props.style;
      if (!items || selectedDay && !items[(0, _interface.toMarkingFormat)(selectedDay)]) {
        if ((0, _isFunction.default)(this.props.renderEmptyData)) {
          var _this$props$renderEmp, _this$props2;
          return (_this$props$renderEmp = (_this$props2 = this.props).renderEmptyData) == null ? void 0 : _this$props$renderEmp.call(_this$props2);
        }
        return (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          style: this.style.indicator,
          color: theme == null ? void 0 : theme.indicatorColor
        });
      }
      return (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
        ref: this.list,
        style: style,
        contentContainerStyle: this.style.content,
        data: this.state.reservations,
        renderItem: this.renderRow,
        keyExtractor: this.keyExtractor,
        showsVerticalScrollIndicator: false,
        scrollEventThrottle: 200,
        onMoveShouldSetResponderCapture: this.onMoveShouldSetResponderCapture,
        onScroll: this.onScroll,
        refreshControl: this.props.refreshControl,
        refreshing: this.props.refreshing,
        onRefresh: this.props.onRefresh,
        onScrollBeginDrag: this.props.onScrollBeginDrag,
        onScrollEndDrag: this.props.onScrollEndDrag,
        onMomentumScrollBegin: this.props.onMomentumScrollBegin,
        onMomentumScrollEnd: this.props.onMomentumScrollEnd
      });
    }
  }]);
  return ReservationList;
}(_react.Component);
ReservationList.displayName = 'ReservationList';
ReservationList.propTypes = _objectSpread(_objectSpread({}, _reservation.default.propTypes), {}, {
  items: _propTypes.default.object,
  selectedDay: _propTypes.default.instanceOf(_xdate.default),
  topDay: _propTypes.default.instanceOf(_xdate.default),
  onDayChange: _propTypes.default.func,
  showOnlySelectedDayItems: _propTypes.default.bool,
  renderEmptyData: _propTypes.default.func,
  onScroll: _propTypes.default.func,
  onScrollBeginDrag: _propTypes.default.func,
  onScrollEndDrag: _propTypes.default.func,
  onMomentumScrollBegin: _propTypes.default.func,
  onMomentumScrollEnd: _propTypes.default.func,
  refreshControl: _propTypes.default.element,
  refreshing: _propTypes.default.bool,
  onRefresh: _propTypes.default.func,
  reservationsKeyExtractor: _propTypes.default.func
});
ReservationList.defaultProps = {
  refreshing: false,
  selectedDay: new _xdate.default(true)
};
var _default = ReservationList;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,