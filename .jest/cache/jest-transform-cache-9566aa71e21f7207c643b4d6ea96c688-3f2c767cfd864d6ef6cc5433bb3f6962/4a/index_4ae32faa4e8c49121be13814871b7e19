78e084fef0a264b1f4b4c78de68b35fb
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.swipeDirections = exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var swipeDirections = {
  SWIPE_UP: "SWIPE_UP",
  SWIPE_DOWN: "SWIPE_DOWN",
  SWIPE_LEFT: "SWIPE_LEFT",
  SWIPE_RIGHT: "SWIPE_RIGHT"
};
exports.swipeDirections = swipeDirections;
var swipeConfig = {
  velocityThreshold: 0.3,
  directionalOffsetThreshold: 80,
  gestureIsClickThreshold: 5
};
function isValidSwipe(velocity, velocityThreshold, directionalOffset, directionalOffsetThreshold) {
  return Math.abs(velocity) > velocityThreshold && Math.abs(directionalOffset) < directionalOffsetThreshold;
}
var GestureRecognizer = function (_Component) {
  (0, _inherits2.default)(GestureRecognizer, _Component);
  var _super = _createSuper(GestureRecognizer);
  function GestureRecognizer(props, context) {
    var _this;
    (0, _classCallCheck2.default)(this, GestureRecognizer);
    _this = _super.call(this, props, context);
    _this.swipeConfig = Object.assign(swipeConfig, props.config);
    var responderEnd = _this._handlePanResponderEnd.bind((0, _assertThisInitialized2.default)(_this));
    var shouldSetResponder = _this._handleShouldSetPanResponder.bind((0, _assertThisInitialized2.default)(_this));
    _this._panResponder = _reactNative.PanResponder.create({
      onStartShouldSetPanResponder: shouldSetResponder,
      onMoveShouldSetPanResponder: shouldSetResponder,
      onPanResponderRelease: responderEnd,
      onPanResponderTerminate: responderEnd
    });
    return _this;
  }
  (0, _createClass2.default)(GestureRecognizer, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.config !== prevProps.config) {
        this.swipeConfig = Object.assign(swipeConfig, this.props.config);
      }
    }
  }, {
    key: "_handleShouldSetPanResponder",
    value: function _handleShouldSetPanResponder(evt, gestureState) {
      return evt.nativeEvent.touches.length === 1 && !this._gestureIsClick(gestureState);
    }
  }, {
    key: "_gestureIsClick",
    value: function _gestureIsClick(gestureState) {
      return Math.abs(gestureState.dx) < swipeConfig.gestureIsClickThreshold && Math.abs(gestureState.dy) < swipeConfig.gestureIsClickThreshold;
    }
  }, {
    key: "_handlePanResponderEnd",
    value: function _handlePanResponderEnd(evt, gestureState) {
      var swipeDirection = this._getSwipeDirection(gestureState);
      this._triggerSwipeHandlers(swipeDirection, gestureState);
    }
  }, {
    key: "_triggerSwipeHandlers",
    value: function _triggerSwipeHandlers(swipeDirection, gestureState) {
      var _this$props = this.props,
        onSwipe = _this$props.onSwipe,
        onSwipeUp = _this$props.onSwipeUp,
        onSwipeDown = _this$props.onSwipeDown,
        onSwipeLeft = _this$props.onSwipeLeft,
        onSwipeRight = _this$props.onSwipeRight;
      var SWIPE_LEFT = swipeDirections.SWIPE_LEFT,
        SWIPE_RIGHT = swipeDirections.SWIPE_RIGHT,
        SWIPE_UP = swipeDirections.SWIPE_UP,
        SWIPE_DOWN = swipeDirections.SWIPE_DOWN;
      onSwipe && onSwipe(swipeDirection, gestureState);
      switch (swipeDirection) {
        case SWIPE_LEFT:
          onSwipeLeft && onSwipeLeft(gestureState);
          break;
        case SWIPE_RIGHT:
          onSwipeRight && onSwipeRight(gestureState);
          break;
        case SWIPE_UP:
          onSwipeUp && onSwipeUp(gestureState);
          break;
        case SWIPE_DOWN:
          onSwipeDown && onSwipeDown(gestureState);
          break;
      }
    }
  }, {
    key: "_getSwipeDirection",
    value: function _getSwipeDirection(gestureState) {
      var SWIPE_LEFT = swipeDirections.SWIPE_LEFT,
        SWIPE_RIGHT = swipeDirections.SWIPE_RIGHT,
        SWIPE_UP = swipeDirections.SWIPE_UP,
        SWIPE_DOWN = swipeDirections.SWIPE_DOWN;
      var dx = gestureState.dx,
        dy = gestureState.dy;
      if (this._isValidHorizontalSwipe(gestureState)) {
        return dx > 0 ? SWIPE_RIGHT : SWIPE_LEFT;
      } else if (this._isValidVerticalSwipe(gestureState)) {
        return dy > 0 ? SWIPE_DOWN : SWIPE_UP;
      }
      return null;
    }
  }, {
    key: "_isValidHorizontalSwipe",
    value: function _isValidHorizontalSwipe(gestureState) {
      var vx = gestureState.vx,
        dy = gestureState.dy;
      var _this$swipeConfig = this.swipeConfig,
        velocityThreshold = _this$swipeConfig.velocityThreshold,
        directionalOffsetThreshold = _this$swipeConfig.directionalOffsetThreshold;
      return isValidSwipe(vx, velocityThreshold, dy, directionalOffsetThreshold);
    }
  }, {
    key: "_isValidVerticalSwipe",
    value: function _isValidVerticalSwipe(gestureState) {
      var vy = gestureState.vy,
        dx = gestureState.dx;
      var _this$swipeConfig2 = this.swipeConfig,
        velocityThreshold = _this$swipeConfig2.velocityThreshold,
        directionalOffsetThreshold = _this$swipeConfig2.directionalOffsetThreshold;
      return isValidSwipe(vy, velocityThreshold, dx, directionalOffsetThreshold);
    }
  }, {
    key: "render",
    value: function render() {
      return (0, _jsxRuntime.jsx)(_reactNative.View, _objectSpread(_objectSpread({}, this.props), this._panResponder.panHandlers));
    }
  }]);
  return GestureRecognizer;
}(_react.Component);
var _default = GestureRecognizer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,