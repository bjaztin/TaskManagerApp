466de86a0366ecb97a2de64cfab8777e
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchCommand = void 0;
exports.getTag = getTag;
exports.setGestureState = exports.scrollTo = exports.measure = void 0;
var _reactNative = require("react-native");
var _PlatformChecker = require("./PlatformChecker");
function getTag(view) {
  return (0, _reactNative.findNodeHandle)(view);
}
var isNative = !(0, _PlatformChecker.shouldBeUseWeb)();
var measure;
exports.measure = measure;
var _worklet_3190837654142_init_data = {
  code: "function anonymous(animatedRef) {\n  if (!_WORKLET) {\n    return null;\n  }\n  const viewTag = animatedRef();\n  if (viewTag === -1) {\n    console.warn(\"[Reanimated] The view with tag \" + viewTag + \" is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n    return null;\n  }\n  const measured = _measure(viewTag);\n  if (measured === null) {\n    console.warn(\"[Reanimated] The view with tag \" + viewTag + \" has some undefined, not-yet-computed or meaningless value of `LayoutMetrics` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n    return null;\n  } else if (measured.x === -1234567) {\n    console.warn(\"[Reanimated] The view with tag \" + viewTag + \" returned an invalid measurement response.\");\n    return null;\n  } else if (isNaN(measured.x)) {\n    console.warn(\"[Reanimated] The view with tag \" + viewTag + \" gets view-flattened on Android. To disable view-flattening, set `collapsable={false}` on this component.\");\n    return null;\n  } else {\n    return measured;\n  }\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"animatedRef\",\"_WORKLET\",\"viewTag\",\"console\",\"warn\",\"measured\",\"_measure\",\"x\",\"isNaN\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js\"],\"mappings\":\"AA4BY,SAAAA,UAAAC,WAAe;EAGvB,IAAI,CAACC,QAAQ,EAAE;IACb,OAAO,IAAI;EACb;EACA,MAAMC,OAAO,GAAGF,WAAW,CAAC,CAAC;EAC7B,IAAIE,OAAO,KAAK,CAAC,CAAC,EAAE;IAClBC,OAAO,CAACC,IAAI,qCAAmCF,OAAQ,+JAA2J,CAAC;IACnN,OAAO,IAAI;EACb;EACA,MAAMG,QAAQ,GAAGC,QAAQ,CAACJ,OAAO,CAAC;EAClC,IAAIG,QAAQ,KAAK,IAAI,EAAE;IACrBF,OAAO,CAACC,IAAI,qCAAmCF,OAAQ,2MAAyM,CAAC;IACjQ,OAAO,IAAI;EACb,CAAC,MAAM,IAAIG,QAAQ,CAACE,CAAC,KAAK,CAAC,OAAO,EAAE;IAClCJ,OAAO,CAACC,IAAI,qCAAmCF,OAAQ,+CAA2C,CAAC;IACnG,OAAO,IAAI;EACb,CAAC,MAAM,IAAIM,KAAK,CAACH,QAAQ,CAACE,CAAC,CAAC,EAAE;IAC5BJ,OAAO,CAACC,IAAI,qCAAmCF,OAAQ,8GAA4G,CAAC;IACpK,OAAO,IAAI;EACb,CAAC,MAAM;IACL,OAAOG,QAAQ;EACjB;AACF\"}"
};
if ((0, _PlatformChecker.isWeb)()) {
  exports.measure = measure = function measure(animatedRef) {
    var element = animatedRef();
    var viewportOffset = element.getBoundingClientRect();
    return {
      width: element.offsetWidth,
      height: element.offsetHeight,
      x: element.offsetLeft,
      y: element.offsetTop,
      pageX: viewportOffset.left,
      pageY: viewportOffset.top
    };
  };
} else if ((0, _PlatformChecker.isChromeDebugger)()) {
  exports.measure = measure = function measure(_animatedRef) {
    console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');
    return null;
  };
} else {
  exports.measure = measure = function () {
    var _e = [new global.Error(), 1, -27];
    var _f = function _f(animatedRef) {
      if (!_WORKLET) {
        return null;
      }
      var viewTag = animatedRef();
      if (viewTag === -1) {
        console.warn(`[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);
        return null;
      }
      var measured = _measure(viewTag);
      if (measured === null) {
        console.warn(`[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \`LayoutMetrics\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);
        return null;
      } else if (measured.x === -1234567) {
        console.warn(`[Reanimated] The view with tag ${viewTag} returned an invalid measurement response.`);
        return null;
      } else if (isNaN(measured.x)) {
        console.warn(`[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \`collapsable={false}\` on this component.`);
        return null;
      } else {
        return measured;
      }
    };
    _f._closure = {};
    _f.__initData = _worklet_3190837654142_init_data;
    _f.__workletHash = 3190837654142;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }();
}
var _worklet_4512985215126_init_data = {
  code: "function dispatchCommand(animatedRef, commandName, args) {\n  const {\n    isNative\n  } = this._closure;\n  if (!_WORKLET || !isNative) {\n    return;\n  }\n  const shadowNodeWrapper = animatedRef();\n  _dispatchCommand(shadowNodeWrapper, commandName, args);\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js",
  sourceMap: "{\"version\":3,\"names\":[\"dispatchCommand\",\"animatedRef\",\"commandName\",\"args\",\"isNative\",\"_closure\",\"_WORKLET\",\"shadowNodeWrapper\",\"_dispatchCommand\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js\"],\"mappings\":\"AAsDO,SAAAA,eAASA,CAAgBC,WAAA,EAAWC,WAAE,EAAWC,IAAE,EAAI;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAG5D,IAAI,CAACC,QAAQ,IAAI,CAACF,QAAQ,EAAE;IAC1B;EACF;EAIA,MAAMG,iBAAiB,GAAGN,WAAW,CAAC,CAAC;EACvCO,gBAAgB,CAACD,iBAAiB,EAAEL,WAAW,EAAEC,IAAI,CAAC;AACxD\"}"
};
var dispatchCommand = function () {
  var _e = [new global.Error(), -2, -27];
  var _f = function _f(animatedRef, commandName, args) {
    if (!_WORKLET || !isNative) {
      return;
    }
    var shadowNodeWrapper = animatedRef();
    _dispatchCommand(shadowNodeWrapper, commandName, args);
  };
  _f._closure = {
    isNative: isNative
  };
  _f.__initData = _worklet_4512985215126_init_data;
  _f.__workletHash = 4512985215126;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
exports.dispatchCommand = dispatchCommand;
var scrollTo;
exports.scrollTo = scrollTo;
var _worklet_17208598284085_init_data = {
  code: "function anonymous(animatedRef, x, y, animated) {\n  const element = animatedRef();\n  element.scrollTo({\n    x: x,\n    y: y,\n    animated: animated\n  });\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"animatedRef\",\"x\",\"y\",\"animated\",\"element\",\"scrollTo\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js\"],\"mappings\":\"AAoEa,SAACA,UAAAC,WAAmB,EAAAC,CAAA,EAAAC,CAAA,EAAQC,QAAK;EAG1C,MAAMC,OAAO,GAAGJ,WAAW,CAAC,CAAC;EAE7BI,OAAO,CAACC,QAAQ,CAAC;IACfJ,CAAC,EAADA,CAAC;IACDC,CAAC,EAADA,CAAC;IACDC,QAAA,EAAAA;EACF,CAAC,CAAC;AACJ\"}"
};
var _worklet_3232161124638_init_data = {
  code: "function anonymous(animatedRef, x, y, animated) {\n  const {\n    dispatchCommand\n  } = this._closure;\n  dispatchCommand(animatedRef, 'scrollTo', [x, y, animated]);\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"animatedRef\",\"x\",\"y\",\"animated\",\"dispatchCommand\",\"_closure\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js\"],\"mappings\":\"AAgFa,SAACA,UAAAC,WAAmB,EAAAC,CAAA,EAAAC,CAAA,EAAQC,QAAK;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAG1CD,eAAe,CAACJ,WAAW,EAAE,UAAU,EAAE,CAACC,CAAC,EAAEC,CAAC,EAAEC,QAAQ,CAAC,CAAC;AAC5D\"}"
};
var _worklet_5482870920827_init_data = {
  code: "function anonymous(animatedRef, x, y, animated) {\n  if (!_WORKLET) {\n    return;\n  }\n  const viewTag = animatedRef();\n  _scrollTo(viewTag, x, y, animated);\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"animatedRef\",\"x\",\"y\",\"animated\",\"_WORKLET\",\"viewTag\",\"_scrollTo\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js\"],\"mappings\":\"AAsFa,SAACA,UAAAC,WAAmB,EAAAC,CAAA,EAAAC,CAAA,EAAQC,QAAK;EAG1C,IAAI,CAACC,QAAQ,EAAE;IACb;EACF;EAGA,MAAMC,OAAO,GAAGL,WAAW,CAAC,CAAC;EAC7BM,SAAS,CAACD,OAAO,EAAEJ,CAAC,EAAEC,CAAC,EAAEC,QAAQ,CAAC;AACpC\"}"
};
if ((0, _PlatformChecker.isWeb)()) {
  exports.scrollTo = scrollTo = function () {
    var _e = [new global.Error(), 1, -27];
    var _f = function _f(animatedRef, x, y, animated) {
      var element = animatedRef();
      element.scrollTo({
        x: x,
        y: y,
        animated: animated
      });
    };
    _f._closure = {};
    _f.__initData = _worklet_17208598284085_init_data;
    _f.__workletHash = 17208598284085;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }();
} else if (isNative && global._IS_FABRIC) {
  exports.scrollTo = scrollTo = function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f(animatedRef, x, y, animated) {
      dispatchCommand(animatedRef, 'scrollTo', [x, y, animated]);
    };
    _f._closure = {
      dispatchCommand: dispatchCommand
    };
    _f.__initData = _worklet_3232161124638_init_data;
    _f.__workletHash = 3232161124638;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }();
} else if (isNative) {
  exports.scrollTo = scrollTo = function () {
    var _e = [new global.Error(), 1, -27];
    var _f = function _f(animatedRef, x, y, animated) {
      if (!_WORKLET) {
        return;
      }
      var viewTag = animatedRef();
      _scrollTo(viewTag, x, y, animated);
    };
    _f._closure = {};
    _f.__initData = _worklet_5482870920827_init_data;
    _f.__workletHash = 5482870920827;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }();
} else {
  exports.scrollTo = scrollTo = function scrollTo(_animatedRef, _x, _y) {};
}
var _worklet_17450441994509_init_data = {
  code: "function setGestureState(handlerTag, newState) {\n  const {\n    isNative\n  } = this._closure;\n  if (!_WORKLET || !isNative) {\n    console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n    return;\n  }\n  _setGestureState(handlerTag, newState);\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js",
  sourceMap: "{\"version\":3,\"names\":[\"setGestureState\",\"handlerTag\",\"newState\",\"isNative\",\"_closure\",\"_WORKLET\",\"console\",\"warn\",\"_setGestureState\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js\"],\"mappings\":\"AAsGO,SAAAA,eAASA,CAAgBC,UAAA,EAAUC,QAAE,EAAQ;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAGlD,IAAI,CAACC,QAAQ,IAAI,CAACF,QAAQ,EAAE;IAC1BG,OAAO,CAACC,IAAI,CAAC,uEAAuE,CAAC;IACrF;EACF;EACAC,gBAAgB,CAACP,UAAU,EAAEC,QAAQ,CAAC;AACxC\"}"
};
var setGestureState = function () {
  var _e = [new global.Error(), -2, -27];
  var _f = function _f(handlerTag, newState) {
    if (!_WORKLET || !isNative) {
      console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');
      return;
    }
    _setGestureState(handlerTag, newState);
  };
  _f._closure = {
    isNative: isNative
  };
  _f.__initData = _worklet_17450441994509_init_data;
  _f.__workletHash = 17450441994509;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
exports.setGestureState = setGestureState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,