cd93c5a956c3b25433887b573cb1c0eb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PricingCard = exports.PricingButton = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _helpers = require("../helpers");
var _config = require("../config");
var _Text = _interopRequireDefault(require("../text/Text"));
var _Button = _interopRequireDefault(require("../buttons/Button"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var PricingCard = function PricingCard(props) {
  var _a, _b, _c;
  var theme = props.theme,
    rest = __rest(props, ["theme"]);
  var containerStyle = rest.containerStyle,
    wrapperStyle = rest.wrapperStyle,
    title = rest.title,
    price = rest.price,
    info = rest.info,
    button = rest.button,
    _rest$color = rest.color,
    color = _rest$color === void 0 ? (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.primary : _rest$color,
    titleStyle = rest.titleStyle,
    pricingStyle = rest.pricingStyle,
    infoStyle = rest.infoStyle,
    onButtonPress = rest.onButtonPress,
    attributes = __rest(rest, ["containerStyle", "wrapperStyle", "title", "price", "info", "button", "color", "titleStyle", "pricingStyle", "infoStyle", "onButtonPress"]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, _objectSpread(_objectSpread({}, attributes), {}, {
    style: _reactNative.StyleSheet.flatten([Object.assign({
      margin: 15,
      marginBottom: 15,
      backgroundColor: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.white,
      borderWidth: 1,
      padding: 15,
      borderColor: (_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.grey5
    }, _reactNative.Platform.select({
      android: {
        elevation: 1
      },
      default: {
        shadowColor: 'rgba(0,0,0, .2)',
        shadowOffset: {
          height: 1,
          width: 0
        },
        shadowOpacity: 0.5,
        shadowRadius: 0.5
      }
    })), containerStyle && containerStyle]),
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([styles.wrapper, wrapperStyle && wrapperStyle]),
      children: [(0, _jsxRuntime.jsx)(_Text.default, {
        testID: "pricingCardTitle",
        style: _reactNative.StyleSheet.flatten([styles.pricingTitle, titleStyle, {
          color: color
        }]),
        children: title
      }), (0, _jsxRuntime.jsx)(_Text.default, {
        style: _reactNative.StyleSheet.flatten([styles.pricingPrice, pricingStyle]),
        children: price
      }), info === null || info === void 0 ? void 0 : info.map(function (item) {
        var _a;
        return (0, _jsxRuntime.jsx)(_Text.default, {
          style: _reactNative.StyleSheet.flatten([Object.assign({
            textAlign: 'center',
            marginTop: 5,
            marginBottom: 5,
            color: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.grey3
          }, _reactNative.Platform.select({
            android: Object.assign({}, _config.fonts.android.bold),
            default: {
              fontWeight: '600'
            }
          })), infoStyle]),
          children: item
        }, item);
      }), _react.default.isValidElement(button) ? button : (0, _jsxRuntime.jsx)(PricingButton, _objectSpread({
        color: color,
        onButtonPress: onButtonPress
      }, button))]
    })
  }));
};
exports.PricingCard = PricingCard;
var PricingButton = function PricingButton(props) {
  var title = props.title,
    buttonStyle = props.buttonStyle,
    color = props.color,
    titleStyle = props.titleStyle,
    onButtonPress = props.onButtonPress,
    icon = props.icon,
    buttonProps = __rest(props, ["title", "buttonStyle", "color", "titleStyle", "onButtonPress", "icon"]);
  return (0, _jsxRuntime.jsx)(_Button.default, _objectSpread({
    title: title,
    buttonStyle: _reactNative.StyleSheet.flatten([styles.button, buttonStyle, {
      backgroundColor: color
    }]),
    titleStyle: titleStyle,
    onPress: onButtonPress,
    icon: _react.default.isValidElement(icon) ? icon : typeof icon === 'string' ? (0, _jsxRuntime.jsx)(_Icon.default, {
      name: icon,
      size: 15,
      color: "white"
    }) : (0, _jsxRuntime.jsx)(_Icon.default, _objectSpread({}, icon))
  }, buttonProps));
};
exports.PricingButton = PricingButton;
PricingCard.defaultProps = {
  info: []
};
var styles = _reactNative.StyleSheet.create({
  wrapper: {
    backgroundColor: 'transparent'
  },
  pricingTitle: Object.assign({
    textAlign: 'center',
    fontSize: (0, _helpers.normalizeText)(30)
  }, _reactNative.Platform.select({
    android: Object.assign({}, _config.fonts.android.black),
    default: {
      fontWeight: '800'
    }
  })),
  pricingPrice: Object.assign({
    textAlign: 'center',
    marginTop: 10,
    marginBottom: 10,
    fontSize: (0, _helpers.normalizeText)(40)
  }, _reactNative.Platform.select({
    android: Object.assign({}, _config.fonts.android.bold),
    default: {
      fontWeight: '700'
    }
  })),
  button: {
    marginTop: 15,
    marginBottom: 10
  }
});
var _default = (0, _config.withTheme)(PricingCard, 'PricingCard');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9oZWxwZXJzIiwiX2NvbmZpZyIsIl9UZXh0IiwiX0J1dHRvbiIsIl9JY29uIiwiX2pzeFJ1bnRpbWUiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkyIiwiZGVmYXVsdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJfX3Jlc3QiLCJzIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluZGV4T2YiLCJpIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJQcmljaW5nQ2FyZCIsInByb3BzIiwiX2EiLCJfYiIsIl9jIiwidGhlbWUiLCJyZXN0IiwiY29udGFpbmVyU3R5bGUiLCJ3cmFwcGVyU3R5bGUiLCJ0aXRsZSIsInByaWNlIiwiaW5mbyIsImJ1dHRvbiIsIl9yZXN0JGNvbG9yIiwiY29sb3IiLCJjb2xvcnMiLCJwcmltYXJ5IiwidGl0bGVTdHlsZSIsInByaWNpbmdTdHlsZSIsImluZm9TdHlsZSIsIm9uQnV0dG9uUHJlc3MiLCJhdHRyaWJ1dGVzIiwianN4IiwiVmlldyIsInN0eWxlIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJhc3NpZ24iLCJtYXJnaW4iLCJtYXJnaW5Cb3R0b20iLCJiYWNrZ3JvdW5kQ29sb3IiLCJ3aGl0ZSIsImJvcmRlcldpZHRoIiwicGFkZGluZyIsImJvcmRlckNvbG9yIiwiZ3JleTUiLCJQbGF0Zm9ybSIsInNlbGVjdCIsImFuZHJvaWQiLCJlbGV2YXRpb24iLCJzaGFkb3dDb2xvciIsInNoYWRvd09mZnNldCIsImhlaWdodCIsIndpZHRoIiwic2hhZG93T3BhY2l0eSIsInNoYWRvd1JhZGl1cyIsImNoaWxkcmVuIiwianN4cyIsInN0eWxlcyIsIndyYXBwZXIiLCJ0ZXN0SUQiLCJwcmljaW5nVGl0bGUiLCJwcmljaW5nUHJpY2UiLCJtYXAiLCJpdGVtIiwidGV4dEFsaWduIiwibWFyZ2luVG9wIiwiZ3JleTMiLCJmb250cyIsImJvbGQiLCJmb250V2VpZ2h0IiwiUmVhY3QiLCJpc1ZhbGlkRWxlbWVudCIsIlByaWNpbmdCdXR0b24iLCJleHBvcnRzIiwiYnV0dG9uU3R5bGUiLCJpY29uIiwiYnV0dG9uUHJvcHMiLCJvblByZXNzIiwibmFtZSIsInNpemUiLCJkZWZhdWx0UHJvcHMiLCJjcmVhdGUiLCJmb250U2l6ZSIsIm5vcm1hbGl6ZVRleHQiLCJibGFjayIsIl9kZWZhdWx0Iiwid2l0aFRoZW1lIl0sInNvdXJjZXMiOlsiUHJpY2luZ0NhcmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFZpZXcsIFBsYXRmb3JtLCBTdHlsZVNoZWV0LCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBub3JtYWxpemVUZXh0IH0gZnJvbSAnLi4vaGVscGVycyc7XG5pbXBvcnQgeyBmb250cywgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCBUZXh0IGZyb20gJy4uL3RleHQvVGV4dCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL2J1dHRvbnMvQnV0dG9uJztcbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb25zL0ljb24nO1xuY29uc3QgUHJpY2luZ0NhcmQgPSAocHJvcHMpID0+IHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICBjb25zdCB7IHRoZW1lIH0gPSBwcm9wcywgcmVzdCA9IF9fcmVzdChwcm9wcywgW1widGhlbWVcIl0pO1xuICAgIGNvbnN0IHsgY29udGFpbmVyU3R5bGUsIHdyYXBwZXJTdHlsZSwgdGl0bGUsIHByaWNlLCBpbmZvLCBidXR0b24sIGNvbG9yID0gKF9hID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnByaW1hcnksIHRpdGxlU3R5bGUsIHByaWNpbmdTdHlsZSwgaW5mb1N0eWxlLCBvbkJ1dHRvblByZXNzIH0gPSByZXN0LCBhdHRyaWJ1dGVzID0gX19yZXN0KHJlc3QsIFtcImNvbnRhaW5lclN0eWxlXCIsIFwid3JhcHBlclN0eWxlXCIsIFwidGl0bGVcIiwgXCJwcmljZVwiLCBcImluZm9cIiwgXCJidXR0b25cIiwgXCJjb2xvclwiLCBcInRpdGxlU3R5bGVcIiwgXCJwcmljaW5nU3R5bGVcIiwgXCJpbmZvU3R5bGVcIiwgXCJvbkJ1dHRvblByZXNzXCJdKTtcbiAgICByZXR1cm4gKDxWaWV3IHsuLi5hdHRyaWJ1dGVzfSBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oeyBtYXJnaW46IDE1LCBtYXJnaW5Cb3R0b206IDE1LCBiYWNrZ3JvdW5kQ29sb3I6IChfYiA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi53aGl0ZSwgYm9yZGVyV2lkdGg6IDEsIHBhZGRpbmc6IDE1LCBib3JkZXJDb2xvcjogKF9jID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmdyZXk1IH0sIFBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICAgICAgICAgICAgYW5kcm9pZDoge1xuICAgICAgICAgICAgICAgICAgICBlbGV2YXRpb246IDEsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgwLDAsMCwgLjIpJyxcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93T2Zmc2V0OiB7IGhlaWdodDogMSwgd2lkdGg6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93T3BhY2l0eTogMC41LFxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dSYWRpdXM6IDAuNSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgY29udGFpbmVyU3R5bGUgJiYgY29udGFpbmVyU3R5bGUsXG4gICAgICAgIF0pfT5cbiAgICAgIDxWaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgc3R5bGVzLndyYXBwZXIsXG4gICAgICAgICAgICB3cmFwcGVyU3R5bGUgJiYgd3JhcHBlclN0eWxlLFxuICAgICAgICBdKX0+XG4gICAgICAgIDxUZXh0IHRlc3RJRD1cInByaWNpbmdDYXJkVGl0bGVcIiBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgIHN0eWxlcy5wcmljaW5nVGl0bGUsXG4gICAgICAgICAgICB0aXRsZVN0eWxlLFxuICAgICAgICAgICAgeyBjb2xvciB9LFxuICAgICAgICBdKX0+XG4gICAgICAgICAge3RpdGxlfVxuICAgICAgICA8L1RleHQ+XG5cbiAgICAgICAgPFRleHQgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbc3R5bGVzLnByaWNpbmdQcmljZSwgcHJpY2luZ1N0eWxlXSl9PlxuICAgICAgICAgIHtwcmljZX1cbiAgICAgICAgPC9UZXh0PlxuXG4gICAgICAgIHtpbmZvID09PSBudWxsIHx8IGluZm8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluZm8ubWFwKChpdGVtKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKDxUZXh0IGtleT17aXRlbX0gc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oeyB0ZXh0QWxpZ246ICdjZW50ZXInLCBtYXJnaW5Ub3A6IDUsIG1hcmdpbkJvdHRvbTogNSwgY29sb3I6IChfYSA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ncmV5MyB9LCBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5kcm9pZDogT2JqZWN0LmFzc2lnbih7fSwgZm9udHMuYW5kcm9pZC5ib2xkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgaW5mb1N0eWxlLFxuICAgICAgICAgICAgICAgIF0pfT5cbiAgICAgICAgICAgIHtpdGVtfVxuICAgICAgICAgIDwvVGV4dD4pO1xuICAgICAgICB9KX1cblxuICAgICAgICB7UmVhY3QuaXNWYWxpZEVsZW1lbnQoYnV0dG9uKSA/IChidXR0b24pIDogKDxQcmljaW5nQnV0dG9uIGNvbG9yPXtjb2xvcn0gb25CdXR0b25QcmVzcz17b25CdXR0b25QcmVzc30gey4uLmJ1dHRvbn0vPil9XG4gICAgICA8L1ZpZXc+XG4gICAgPC9WaWV3Pik7XG59O1xuY29uc3QgUHJpY2luZ0J1dHRvbiA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgdGl0bGUsIGJ1dHRvblN0eWxlLCBjb2xvciwgdGl0bGVTdHlsZSwgb25CdXR0b25QcmVzcywgaWNvbiB9ID0gcHJvcHMsIGJ1dHRvblByb3BzID0gX19yZXN0KHByb3BzLCBbXCJ0aXRsZVwiLCBcImJ1dHRvblN0eWxlXCIsIFwiY29sb3JcIiwgXCJ0aXRsZVN0eWxlXCIsIFwib25CdXR0b25QcmVzc1wiLCBcImljb25cIl0pO1xuICAgIHJldHVybiAoPEJ1dHRvbiB0aXRsZT17dGl0bGV9IGJ1dHRvblN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgc3R5bGVzLmJ1dHRvbixcbiAgICAgICAgICAgIGJ1dHRvblN0eWxlLFxuICAgICAgICAgICAgeyBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yIH0sXG4gICAgICAgIF0pfSB0aXRsZVN0eWxlPXt0aXRsZVN0eWxlfSBvblByZXNzPXtvbkJ1dHRvblByZXNzfSBpY29uPXtSZWFjdC5pc1ZhbGlkRWxlbWVudChpY29uKSA/IChpY29uKSA6IHR5cGVvZiBpY29uID09PSAnc3RyaW5nJyA/ICg8SWNvbiBuYW1lPXtpY29ufSBzaXplPXsxNX0gY29sb3I9XCJ3aGl0ZVwiLz4pIDogKDxJY29uIHsuLi5pY29ufS8+KX0gey4uLmJ1dHRvblByb3BzfS8+KTtcbn07XG5QcmljaW5nQ2FyZC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgaW5mbzogW10sXG59O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIHdyYXBwZXI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIH0sXG4gICAgcHJpY2luZ1RpdGxlOiBPYmplY3QuYXNzaWduKHsgdGV4dEFsaWduOiAnY2VudGVyJywgZm9udFNpemU6IG5vcm1hbGl6ZVRleHQoMzApIH0sIFBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICAgIGFuZHJvaWQ6IE9iamVjdC5hc3NpZ24oe30sIGZvbnRzLmFuZHJvaWQuYmxhY2spLFxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnODAwJyxcbiAgICAgICAgfSxcbiAgICB9KSksXG4gICAgcHJpY2luZ1ByaWNlOiBPYmplY3QuYXNzaWduKHsgdGV4dEFsaWduOiAnY2VudGVyJywgbWFyZ2luVG9wOiAxMCwgbWFyZ2luQm90dG9tOiAxMCwgZm9udFNpemU6IG5vcm1hbGl6ZVRleHQoNDApIH0sIFBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICAgIGFuZHJvaWQ6IE9iamVjdC5hc3NpZ24oe30sIGZvbnRzLmFuZHJvaWQuYm9sZCksXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc3MDAnLFxuICAgICAgICB9LFxuICAgIH0pKSxcbiAgICBidXR0b246IHtcbiAgICAgICAgbWFyZ2luVG9wOiAxNSxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAxMCxcbiAgICB9LFxufSk7XG5leHBvcnQgeyBQcmljaW5nQ2FyZCwgUHJpY2luZ0J1dHRvbiB9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