6806c40377208dc7d83d1a4c935ab926
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _throttle = _interopRequireDefault(require("lodash/throttle"));
var _flatten = _interopRequireDefault(require("lodash/flatten"));
var _dropRight = _interopRequireDefault(require("lodash/dropRight"));
var _react = _interopRequireWildcard(require("react"));
var _dateutils = require("../dateutils");
var _infiniteList = _interopRequireDefault(require("../infinite-list"));
var _Context = _interopRequireDefault(require("../expandableCalendar/Context"));
var _commons = require("../expandableCalendar/commons");
var _Timeline = _interopRequireDefault(require("../timeline/Timeline"));
var _useTimelinePages2 = _interopRequireWildcard(require("./useTimelinePages"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var TimelineList = function TimelineList(props) {
  var timelineProps = props.timelineProps,
    events = props.events,
    renderItem = props.renderItem,
    showNowIndicator = props.showNowIndicator,
    scrollToFirst = props.scrollToFirst,
    scrollToNow = props.scrollToNow,
    initialTime = props.initialTime;
  var _useContext = (0, _react.useContext)(_Context.default),
    date = _useContext.date,
    updateSource = _useContext.updateSource,
    setDate = _useContext.setDate,
    _useContext$numberOfD = _useContext.numberOfDays,
    numberOfDays = _useContext$numberOfD === void 0 ? 1 : _useContext$numberOfD,
    timelineLeftInset = _useContext.timelineLeftInset;
  var listRef = (0, _react.useRef)();
  var prevDate = (0, _react.useRef)(date);
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    timelineOffset = _useState2[0],
    setTimelineOffset = _useState2[1];
  var _useTimelinePages = (0, _useTimelinePages2.default)({
      date: date,
      listRef: listRef,
      numberOfDays: numberOfDays
    }),
    pages = _useTimelinePages.pages,
    pagesRef = _useTimelinePages.pagesRef,
    resetPages = _useTimelinePages.resetPages,
    resetPagesDebounce = _useTimelinePages.resetPagesDebounce,
    scrollToPageDebounce = _useTimelinePages.scrollToPageDebounce,
    shouldResetPages = _useTimelinePages.shouldResetPages,
    isOutOfRange = _useTimelinePages.isOutOfRange;
  var scrollToCurrentDate = (0, _react.useCallback)(function (date) {
    var datePageIndex = pagesRef.current.indexOf(date);
    if (updateSource !== _commons.UpdateSources.LIST_DRAG) {
      if (isOutOfRange(datePageIndex)) {
        updateSource === _commons.UpdateSources.DAY_PRESS ? resetPages(date) : resetPagesDebounce(date);
      } else {
        scrollToPageDebounce(datePageIndex);
      }
    }
    prevDate.current = date;
  }, [updateSource]);
  (0, _react.useEffect)(function () {
    if (date !== prevDate.current) {
      scrollToCurrentDate(date);
    }
  }, [date]);
  var onScroll = (0, _react.useCallback)(function () {
    if (shouldResetPages.current) {
      resetPagesDebounce.cancel();
    }
  }, []);
  var onMomentumScrollEnd = (0, _react.useCallback)(function () {
    if (shouldResetPages.current) {
      resetPagesDebounce(prevDate.current);
    }
  }, []);
  var onPageChange = (0, _react.useCallback)((0, _throttle.default)(function (pageIndex) {
    var newDate = pages[pageIndex];
    if (newDate !== prevDate.current) {
      setDate(newDate, _commons.UpdateSources.LIST_DRAG);
    }
  }, 0), [pages]);
  var onReachNearEdge = (0, _react.useCallback)(function () {
    shouldResetPages.current = true;
  }, []);
  var onTimelineOffsetChange = (0, _react.useCallback)(function (offset) {
    setTimelineOffset(offset);
  }, []);
  var renderPage = (0, _react.useCallback)(function (_type, item, index) {
    var isCurrent = prevDate.current === item;
    var isInitialPage = index === _useTimelinePages2.INITIAL_PAGE;
    var _isToday = (0, _dateutils.isToday)(item);
    var weekEvents = [events[item] || [], events[(0, _dateutils.generateDay)(item, 1)] || [], events[(0, _dateutils.generateDay)(item, 2)] || [], events[(0, _dateutils.generateDay)(item, 3)] || [], events[(0, _dateutils.generateDay)(item, 4)] || [], events[(0, _dateutils.generateDay)(item, 5)] || [], events[(0, _dateutils.generateDay)(item, 6)] || []];
    var weekDates = [item, (0, _dateutils.generateDay)(item, 1), (0, _dateutils.generateDay)(item, 2), (0, _dateutils.generateDay)(item, 3), (0, _dateutils.generateDay)(item, 4), (0, _dateutils.generateDay)(item, 5), (0, _dateutils.generateDay)(item, 6)];
    var numberOfDaysToDrop = 7 - numberOfDays;
    var _timelineProps = _objectSpread(_objectSpread({}, timelineProps), {}, {
      key: item,
      date: (0, _dropRight.default)(weekDates, numberOfDaysToDrop),
      events: (0, _flatten.default)((0, _dropRight.default)(weekEvents, numberOfDaysToDrop)),
      scrollToNow: _isToday && isInitialPage && scrollToNow,
      initialTime: !_isToday && isInitialPage ? initialTime : undefined,
      scrollToFirst: !_isToday && isInitialPage && scrollToFirst,
      scrollOffset: timelineOffset,
      onChangeOffset: onTimelineOffsetChange,
      showNowIndicator: _isToday && showNowIndicator,
      numberOfDays: numberOfDays,
      timelineLeftInset: timelineLeftInset
    });
    if (renderItem) {
      return renderItem(_timelineProps, {
        item: item,
        index: index,
        isCurrent: isCurrent,
        isInitialPage: isInitialPage,
        isToday: _isToday
      });
    }
    return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
      children: (0, _jsxRuntime.jsx)(_Timeline.default, _objectSpread({}, _timelineProps))
    });
  }, [events, timelineOffset, showNowIndicator, numberOfDays]);
  return (0, _jsxRuntime.jsx)(_infiniteList.default, {
    isHorizontal: true,
    ref: listRef,
    data: pages,
    renderItem: renderPage,
    onPageChange: onPageChange,
    onReachNearEdge: onReachNearEdge,
    onReachNearEdgeThreshold: _useTimelinePages2.NEAR_EDGE_THRESHOLD,
    onScroll: onScroll,
    extendedState: {
      todayEvents: events[date],
      pages: pages
    },
    initialPageIndex: _useTimelinePages2.INITIAL_PAGE,
    scrollViewProps: {
      onMomentumScrollEnd: onMomentumScrollEnd
    }
  });
};
var _default = TimelineList;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,