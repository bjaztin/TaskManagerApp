{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_PanGestureHandler","_TapGestureHandler","_State","DRAG_TOSS","Swipeable","_React$Component","_inherits2","default","_super","_createSuper","_props","_this","_classCallCheck2","call","_defineProperty","_assertThisInitialized2","props","state","friction","overshootFriction","dragX","rowTranslation","_state$leftWidth","leftWidth","_state$rowWidth","rowWidth","_state$rightOffset","rightOffset","rightWidth","Math","max","_props$overshootLeft","overshootLeft","_props$overshootRight","overshootRight","transX","Animated","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","_ref","nativeEvent","oldState","State","ACTIVE","close","ev","handleRelease","_ev$nativeEvent","velocityX","translationX","_this$state","_this$state$leftWidth","_this$state$rowWidth","rowState","_this$state$rightOffs","_this$props11","_this$props11$leftThr","leftThreshold","_this$props11$rightTh","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","_this$state2","setValue","setState","sign","spring","_objectSpread","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","_ref2","finished","_this$props$onSwipeab","_this$props","_this$props$onSwipeab2","_this$props2","onSwipeableLeftOpen","onSwipeableOpen","_this$props$onSwipeab3","_this$props3","_this$props$onSwipeab4","_this$props4","onSwipeableRightOpen","_this$props$onSwipeab5","_this$props5","closingDirection","onSwipeableClose","_this$props$onSwipeab6","_this$props6","_this$props$onSwipeab7","_this$props7","onSwipeableLeftWillOpen","onSwipeableWillOpen","_this$props$onSwipeab8","_this$props8","_this$props$onSwipeab9","_this$props9","onSwipeableRightWillOpen","_this$props$onSwipeab10","_this$props10","onSwipeableWillClose","_ref3","layout","width","_this$state3","_this$state3$leftWidt","_this$state3$rowWidth","_this$state$rightOffs2","_this$state$leftWidth2","_this$state$rowWidth2","_this$state$rightOffs3","_this$state4","_dragX","undefined","updateAnimatedEvent","onGestureEvent","event","_createClass2","key","value","shouldComponentUpdate","render","_this2","_this$props12","children","renderLeftActions","renderRightActions","_this$props12$dragOff","dragOffsetFromLeftEdge","_this$props12$dragOff2","dragOffsetFromRightEdge","left","createElement","View","style","styles","leftActions","transform","translateX","onLayout","_ref4","x","right","rightActions","_ref5","PanGestureHandler","_extends","activeOffsetX","onHandlerStateChange","onRowLayout","container","containerStyle","TapGestureHandler","enabled","onTapHandlerStateChange","pointerEvents","childrenContainerStyle","Component","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"sources":["Swipeable.tsx"],"sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n  PanGestureHandlerProps,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Distance that the panel must be dragged from the left edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromLeftEdge?: number;\n\n  /**\n   * Distance that the panel must be dragged from the right edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromRightEdge?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when left action panel gets open.\n   */\n  onSwipeableLeftOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when right action panel gets open.\n   */\n  onSwipeableRightOpen?: () => void;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: (direction: 'left' | 'right', swipeable: Swipeable) => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: (\n    direction: 'left' | 'right',\n    swipeable: Swipeable\n  ) => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when left action panel starts animating on open.\n   */\n  onSwipeableLeftWillOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when right action panel starts animating on open.\n   */\n  onSwipeableRightWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: (direction: 'left' | 'right') => void;\n\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n\n  useNativeAnimations?: boolean;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  shouldComponentUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: AnimatedInterpolation;\n  private showLeftAction?: AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: AnimatedInterpolation;\n  private showRightAction?: AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const { overshootLeft = leftWidth > 0, overshootRight = rightWidth > 0 } =\n      props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n      outputRange: [\n        -rightWidth - (overshootRight ? 1 / overshootFriction! : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 / overshootFriction! : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0) {\n          this.props.onSwipeableLeftOpen?.();\n          this.props.onSwipeableOpen?.('left', this);\n        } else if (toValue < 0) {\n          this.props.onSwipeableRightOpen?.();\n          this.props.onSwipeableOpen?.('right', this);\n        } else {\n          const closingDirection = fromValue > 0 ? 'left' : 'right';\n          this.props.onSwipeableClose?.(closingDirection, this);\n        }\n      }\n    });\n    if (toValue > 0) {\n      this.props.onSwipeableLeftWillOpen?.();\n      this.props.onSwipeableWillOpen?.('left');\n    } else if (toValue < 0) {\n      this.props.onSwipeableRightWillOpen?.();\n      this.props.onSwipeableWillOpen?.('right');\n    } else {\n      const closingDirection = fromValue > 0 ? 'left' : 'right';\n      this.props.onSwipeableWillClose?.(closingDirection);\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  reset = () => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(0);\n    this.setState({ rowState: 0 });\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions,\n      dragOffsetFromLeftEdge = 10,\n      dragOffsetFromRightEdge = 10,\n    } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // all those and below parameters can have ! since they are all\n          // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\n          // it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-dragOffsetFromRightEdge, dragOffsetFromLeftEdge]}\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"],"mappings":"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"}