369935a9d808a5a7defd4ce15a37862f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _vectorIcons = require("@expo/vector-icons");
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function cov_1o2lxp0nx2() {
  var path = "/Users/bjaztin/Desktop/taskManagerApp/src/components/TaskScreenFeatures/ImagePreview.js";
  var hash = "f2b8f70027a73d0f21d568858b78185388e88189";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/bjaztin/Desktop/taskManagerApp/src/components/TaskScreenFeatures/ImagePreview.js",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 35,
          column: 1
        }
      },
      "1": {
        start: {
          line: 13,
          column: 2
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "2": {
        start: {
          line: 39,
          column: 15
        },
        end: {
          line: 64,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 21
          },
          end: {
            line: 11,
            column: 22
          }
        },
        loc: {
          start: {
            line: 11,
            column: 57
          },
          end: {
            line: 35,
            column: 1
          }
        },
        line: 11
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f2b8f70027a73d0f21d568858b78185388e88189"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1o2lxp0nx2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1o2lxp0nx2();
cov_1o2lxp0nx2().s[0]++;
var ImagePreview = function ImagePreview(_ref) {
  var visible = _ref.visible,
    imageUrl = _ref.imageUrl,
    onClose = _ref.onClose;
  cov_1o2lxp0nx2().f[0]++;
  cov_1o2lxp0nx2().s[1]++;
  return (0, _jsxRuntime.jsx)(_reactNative.Modal, {
    visible: visible,
    animationType: "fade",
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.modalContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.closeButton,
        onPress: onClose,
        testID: "buttonClose",
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "close-circle",
          size: 32,
          color: "white"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.modalContent,
        children: (0, _jsxRuntime.jsx)(_reactNative.ImageBackground, {
          testID: "imagePreview",
          source: {
            uri: imageUrl
          },
          style: styles.expandedImage,
          resizeMode: "contain"
        })
      })]
    })
  });
};
var _default = ImagePreview;
exports.default = _default;
var styles = (cov_1o2lxp0nx2().s[2]++, _reactNative.StyleSheet.create({
  modalContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0, 0, 0, 0.9)"
  },
  expandedImage: {
    width: "100%",
    height: "100%"
  },
  closeButton: {
    position: "absolute",
    top: 80,
    right: 20,
    zIndex: 1
  },
  modalContent: {
    padding: 10,
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl92ZWN0b3JJY29ucyIsIl9yZWFjdE5hdGl2ZSIsIl9qc3hSdW50aW1lIiwiY292XzFvMmx4cDBueDIiLCJwYXRoIiwiaGFzaCIsImdsb2JhbCIsIkZ1bmN0aW9uIiwiZ2N2IiwiY292ZXJhZ2VEYXRhIiwic3RhdGVtZW50TWFwIiwic3RhcnQiLCJsaW5lIiwiY29sdW1uIiwiZW5kIiwiZm5NYXAiLCJuYW1lIiwiZGVjbCIsImxvYyIsImJyYW5jaE1hcCIsInMiLCJmIiwiYiIsIl9jb3ZlcmFnZVNjaGVtYSIsImNvdmVyYWdlIiwiYWN0dWFsQ292ZXJhZ2UiLCJJbWFnZVByZXZpZXciLCJfcmVmIiwidmlzaWJsZSIsImltYWdlVXJsIiwib25DbG9zZSIsImpzeCIsIk1vZGFsIiwiYW5pbWF0aW9uVHlwZSIsImNoaWxkcmVuIiwianN4cyIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsIm1vZGFsQ29udGFpbmVyIiwiVG91Y2hhYmxlT3BhY2l0eSIsImNsb3NlQnV0dG9uIiwib25QcmVzcyIsInRlc3RJRCIsIklvbmljb25zIiwic2l6ZSIsImNvbG9yIiwibW9kYWxDb250ZW50IiwiSW1hZ2VCYWNrZ3JvdW5kIiwic291cmNlIiwidXJpIiwiZXhwYW5kZWRJbWFnZSIsInJlc2l6ZU1vZGUiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0IiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImZsZXgiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ3aWR0aCIsImhlaWdodCIsInBvc2l0aW9uIiwidG9wIiwicmlnaHQiLCJ6SW5kZXgiLCJwYWRkaW5nIiwibGVmdCIsImJvdHRvbSJdLCJzb3VyY2VzIjpbIkltYWdlUHJldmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBJb25pY29ucyB9IGZyb20gXCJAZXhwby92ZWN0b3ItaWNvbnNcIjtcbmltcG9ydCB7XG4gIE1vZGFsLFxuICBTdHlsZVNoZWV0LFxuICBUb3VjaGFibGVPcGFjaXR5LFxuICBWaWV3LFxuICBJbWFnZUJhY2tncm91bmQsXG59IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcblxuY29uc3QgSW1hZ2VQcmV2aWV3ID0gKHsgdmlzaWJsZSwgaW1hZ2VVcmwsIG9uQ2xvc2UgfSkgPT4ge1xuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsIHZpc2libGU9e3Zpc2libGV9IGFuaW1hdGlvblR5cGU9XCJmYWRlXCI+XG4gICAgICA8VmlldyBzdHlsZT17c3R5bGVzLm1vZGFsQ29udGFpbmVyfT5cbiAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHlcbiAgICAgICAgICBzdHlsZT17c3R5bGVzLmNsb3NlQnV0dG9ufVxuICAgICAgICAgIG9uUHJlc3M9e29uQ2xvc2V9XG4gICAgICAgICAgdGVzdElEPVwiYnV0dG9uQ2xvc2VcIlxuICAgICAgICA+XG4gICAgICAgICAgPElvbmljb25zIG5hbWU9XCJjbG9zZS1jaXJjbGVcIiBzaXplPXszMn0gY29sb3I9XCJ3aGl0ZVwiIC8+XG4gICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cblxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLm1vZGFsQ29udGVudH0+XG4gICAgICAgICAgPEltYWdlQmFja2dyb3VuZFxuICAgICAgICAgICAgdGVzdElEPVwiaW1hZ2VQcmV2aWV3XCJcbiAgICAgICAgICAgIHNvdXJjZT17eyB1cmk6IGltYWdlVXJsIH19XG4gICAgICAgICAgICBzdHlsZT17c3R5bGVzLmV4cGFuZGVkSW1hZ2V9XG4gICAgICAgICAgICByZXNpemVNb2RlPVwiY29udGFpblwiXG4gICAgICAgICAgPjwvSW1hZ2VCYWNrZ3JvdW5kPlxuICAgICAgICA8L1ZpZXc+XG4gICAgICA8L1ZpZXc+XG4gICAgPC9Nb2RhbD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEltYWdlUHJldmlldztcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBtb2RhbENvbnRhaW5lcjoge1xuICAgIGZsZXg6IDEsXG4gICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAwLjkpXCIsXG4gIH0sXG4gIGV4cGFuZGVkSW1hZ2U6IHtcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgfSxcbiAgY2xvc2VCdXR0b246IHtcbiAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgIHRvcDogODAsXG4gICAgcmlnaHQ6IDIwLFxuICAgIHpJbmRleDogMSxcbiAgfSxcbiAgbW9kYWxDb250ZW50OiB7XG4gICAgcGFkZGluZzogMTAsXG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gIH0sXG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFNc0IsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBQUEsU0FBQUksZUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsTUFBQSxPQUFBQyxRQUFBO0VBQUEsSUFBQUMsR0FBQTtFQUFBLElBQUFDLFlBQUE7SUFBQUwsSUFBQTtJQUFBTSxZQUFBO01BQUE7UUFBQUMsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFB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