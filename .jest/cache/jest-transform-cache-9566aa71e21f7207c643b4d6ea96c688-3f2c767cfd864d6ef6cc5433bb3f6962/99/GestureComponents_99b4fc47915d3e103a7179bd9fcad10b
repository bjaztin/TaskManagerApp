4480e683e9ad489ed7786b3090300b0f
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["refreshControl", "waitFor"],
  _excluded2 = ["waitFor", "refreshControl"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FlatList = exports.DrawerLayoutAndroid = exports.TextInput = exports.Switch = exports.ScrollView = exports.RefreshControl = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _createNativeWrapper = _interopRequireDefault(require("../handlers/createNativeWrapper"));
var _NativeViewGestureHandler = require("../handlers/NativeViewGestureHandler");
var _utils = require("../utils");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var RefreshControl = (0, _createNativeWrapper.default)(_reactNative.RefreshControl, {
  disallowInterruption: true,
  shouldCancelWhenOutside: false
});
exports.RefreshControl = RefreshControl;
var GHScrollView = (0, _createNativeWrapper.default)(_reactNative.ScrollView, {
  disallowInterruption: true,
  shouldCancelWhenOutside: false
});
var ScrollView = React.forwardRef(function (props, ref) {
  var refreshControlGestureRef = React.useRef(null);
  var refreshControl = props.refreshControl,
    waitFor = props.waitFor,
    rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  return React.createElement(GHScrollView, _extends({}, rest, {
    ref: ref,
    waitFor: [].concat((0, _toConsumableArray2.default)((0, _utils.toArray)(waitFor !== null && waitFor !== void 0 ? waitFor : [])), [refreshControlGestureRef]),
    refreshControl: refreshControl ? React.cloneElement(refreshControl, {
      ref: refreshControlGestureRef
    }) : undefined
  }));
});
exports.ScrollView = ScrollView;
var Switch = (0, _createNativeWrapper.default)(_reactNative.Switch, {
  shouldCancelWhenOutside: false,
  shouldActivateOnStart: true,
  disallowInterruption: true
});
exports.Switch = Switch;
var TextInput = (0, _createNativeWrapper.default)(_reactNative.TextInput);
exports.TextInput = TextInput;
var DrawerLayoutAndroid = (0, _createNativeWrapper.default)(_reactNative.DrawerLayoutAndroid, {
  disallowInterruption: true
});
exports.DrawerLayoutAndroid = DrawerLayoutAndroid;
var FlatList = React.forwardRef(function (props, ref) {
  var refreshControlGestureRef = React.useRef(null);
  var waitFor = props.waitFor,
    refreshControl = props.refreshControl,
    rest = (0, _objectWithoutProperties2.default)(props, _excluded2);
  var flatListProps = {};
  var scrollViewProps = {};
  for (var _ref of Object.entries(rest)) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
    var propName = _ref2[0];
    var value = _ref2[1];
    if (_NativeViewGestureHandler.nativeViewProps.includes(propName)) {
      scrollViewProps[propName] = value;
    } else {
      flatListProps[propName] = value;
    }
  }
  return React.createElement(_reactNative.FlatList, _extends({
    ref: ref
  }, flatListProps, {
    renderScrollComponent: function renderScrollComponent(scrollProps) {
      return React.createElement(ScrollView, _extends({}, scrollProps, scrollViewProps, {
        waitFor: [].concat((0, _toConsumableArray2.default)((0, _utils.toArray)(waitFor !== null && waitFor !== void 0 ? waitFor : [])), [refreshControlGestureRef])
      }));
    },
    refreshControl: refreshControl ? React.cloneElement(refreshControl, {
      ref: refreshControlGestureRef
    }) : undefined
  }));
});
exports.FlatList = FlatList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jcmVhdGVOYXRpdmVXcmFwcGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9OYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXIiLCJfdXRpbHMiLCJSZWZyZXNoQ29udHJvbCIsImRlZmF1bHQiLCJkaXNhbGxvd0ludGVycnVwdGlvbiIsInNob3VsZENhbmNlbFdoZW5PdXRzaWRlIiwiR0hTY3JvbGxWaWV3IiwiU2Nyb2xsVmlldyIsImZvcndhcmRSZWYiLCJwcm9wcyIsInJlZiIsInJlZnJlc2hDb250cm9sR2VzdHVyZVJlZiIsInVzZVJlZiIsInJlZnJlc2hDb250cm9sIiwid2FpdEZvciIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2V4Y2x1ZGVkIiwiY3JlYXRlRWxlbWVudCIsIl9leHRlbmRzIiwiY29uY2F0IiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsInRvQXJyYXkiLCJjbG9uZUVsZW1lbnQiLCJ1bmRlZmluZWQiLCJTd2l0Y2giLCJzaG91bGRBY3RpdmF0ZU9uU3RhcnQiLCJUZXh0SW5wdXQiLCJEcmF3ZXJMYXlvdXRBbmRyb2lkIiwiRmxhdExpc3QiLCJfZXhjbHVkZWQyIiwiZmxhdExpc3RQcm9wcyIsInNjcm9sbFZpZXdQcm9wcyIsIl9yZWYiLCJPYmplY3QiLCJlbnRyaWVzIiwiX3JlZjIiLCJfc2xpY2VkVG9BcnJheTIiLCJwcm9wTmFtZSIsInZhbHVlIiwibmF0aXZlVmlld1Byb3BzIiwiaW5jbHVkZXMiLCJyZW5kZXJTY3JvbGxDb21wb25lbnQiLCJzY3JvbGxQcm9wcyJdLCJzb3VyY2VzIjpbIkdlc3R1cmVDb21wb25lbnRzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBQcm9wc1dpdGhDaGlsZHJlbixcbiAgRm9yd2FyZGVkUmVmLFxuICBSZWZBdHRyaWJ1dGVzLFxuICBSZWFjdEVsZW1lbnQsXG59IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIFNjcm9sbFZpZXcgYXMgUk5TY3JvbGxWaWV3LFxuICBTY3JvbGxWaWV3UHJvcHMgYXMgUk5TY3JvbGxWaWV3UHJvcHMsXG4gIFN3aXRjaCBhcyBSTlN3aXRjaCxcbiAgU3dpdGNoUHJvcHMgYXMgUk5Td2l0Y2hQcm9wcyxcbiAgVGV4dElucHV0IGFzIFJOVGV4dElucHV0LFxuICBUZXh0SW5wdXRQcm9wcyBhcyBSTlRleHRJbnB1dFByb3BzLFxuICBEcmF3ZXJMYXlvdXRBbmRyb2lkIGFzIFJORHJhd2VyTGF5b3V0QW5kcm9pZCxcbiAgRHJhd2VyTGF5b3V0QW5kcm9pZFByb3BzIGFzIFJORHJhd2VyTGF5b3V0QW5kcm9pZFByb3BzLFxuICBGbGF0TGlzdCBhcyBSTkZsYXRMaXN0LFxuICBGbGF0TGlzdFByb3BzIGFzIFJORmxhdExpc3RQcm9wcyxcbiAgUmVmcmVzaENvbnRyb2wgYXMgUk5SZWZyZXNoQ29udHJvbCxcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IGNyZWF0ZU5hdGl2ZVdyYXBwZXIgZnJvbSAnLi4vaGFuZGxlcnMvY3JlYXRlTmF0aXZlV3JhcHBlcic7XG5cbmltcG9ydCB7XG4gIE5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlclByb3BzLFxuICBuYXRpdmVWaWV3UHJvcHMsXG59IGZyb20gJy4uL2hhbmRsZXJzL05hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlcic7XG5cbmltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBjb25zdCBSZWZyZXNoQ29udHJvbCA9IGNyZWF0ZU5hdGl2ZVdyYXBwZXIoUk5SZWZyZXNoQ29udHJvbCwge1xuICBkaXNhbGxvd0ludGVycnVwdGlvbjogdHJ1ZSxcbiAgc2hvdWxkQ2FuY2VsV2hlbk91dHNpZGU6IGZhbHNlLFxufSk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IHR5cGUgUmVmcmVzaENvbnRyb2wgPSB0eXBlb2YgUmVmcmVzaENvbnRyb2wgJiBSTlJlZnJlc2hDb250cm9sO1xuXG5jb25zdCBHSFNjcm9sbFZpZXcgPSBjcmVhdGVOYXRpdmVXcmFwcGVyPFByb3BzV2l0aENoaWxkcmVuPFJOU2Nyb2xsVmlld1Byb3BzPj4oXG4gIFJOU2Nyb2xsVmlldyxcbiAge1xuICAgIGRpc2FsbG93SW50ZXJydXB0aW9uOiB0cnVlLFxuICAgIHNob3VsZENhbmNlbFdoZW5PdXRzaWRlOiBmYWxzZSxcbiAgfVxuKTtcbmV4cG9ydCBjb25zdCBTY3JvbGxWaWV3ID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgUk5TY3JvbGxWaWV3LFxuICBSTlNjcm9sbFZpZXdQcm9wcyAmIE5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlclByb3BzXG4+KChwcm9wcywgcmVmKSA9PiB7XG4gIGNvbnN0IHJlZnJlc2hDb250cm9sR2VzdHVyZVJlZiA9IFJlYWN0LnVzZVJlZjxSZWZyZXNoQ29udHJvbD4obnVsbCk7XG4gIGNvbnN0IHsgcmVmcmVzaENvbnRyb2wsIHdhaXRGb3IsIC4uLnJlc3QgfSA9IHByb3BzO1xuXG4gIHJldHVybiAoXG4gICAgPEdIU2Nyb2xsVmlld1xuICAgICAgey4uLnJlc3R9XG4gICAgICAvLyBAdHMtaWdub3JlIGByZWZgIGV4aXN0cyBvbiBgR0hTY3JvbGxWaWV3YFxuICAgICAgcmVmPXtyZWZ9XG4gICAgICB3YWl0Rm9yPXtbLi4udG9BcnJheSh3YWl0Rm9yID8/IFtdKSwgcmVmcmVzaENvbnRyb2xHZXN0dXJlUmVmXX1cbiAgICAgIC8vIEB0cy1pZ25vcmUgd2UgZG9uJ3QgcGFzcyBgcmVmcmVzaGluZ2AgcHJvcCBhcyB3ZSBvbmx5IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIHJlZlxuICAgICAgcmVmcmVzaENvbnRyb2w9e1xuICAgICAgICByZWZyZXNoQ29udHJvbFxuICAgICAgICAgID8gUmVhY3QuY2xvbmVFbGVtZW50KHJlZnJlc2hDb250cm9sLCB7XG4gICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgZm9yIHJlYXNvbnMgdW5rbm93biB0byBtZSwgYHJlZmAgZG9lc24ndCBleGlzdCBvbiB0aGUgdHlwZSBpbmZlcnJlZCBieSBUU1xuICAgICAgICAgICAgICByZWY6IHJlZnJlc2hDb250cm9sR2VzdHVyZVJlZixcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgIH1cbiAgICAvPlxuICApO1xufSk7XG4vLyBiYWNrd2FyZCB0eXBlIGNvbXBhdGliaWxpdHkgd2l0aCBodHRwczovL2dpdGh1Yi5jb20vc29mdHdhcmUtbWFuc2lvbi9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2Jsb2IvZGI3OGQzY2E3ZDQ4ZThiYTU3NDgyZDNmZTliMGExNWFhNzlkOTkzMi9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyLmQudHMjTDQ0MC1MNDU3XG4vLyBpbmNsdWRlIG1ldGhvZHMgb2Ygd3JhcHBlZCBjb21wb25lbnRzIGJ5IGNyZWF0aW5nIGFuIGludGVyc2VjdGlvbiB0eXBlIHdpdGggdGhlIFJOIGNvbXBvbmVudCBpbnN0ZWFkIG9mIGR1cGxpY2F0aW5nIHRoZW0uXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IHR5cGUgU2Nyb2xsVmlldyA9IHR5cGVvZiBHSFNjcm9sbFZpZXcgJiBSTlNjcm9sbFZpZXc7XG5cbmV4cG9ydCBjb25zdCBTd2l0Y2ggPSBjcmVhdGVOYXRpdmVXcmFwcGVyPFJOU3dpdGNoUHJvcHM+KFJOU3dpdGNoLCB7XG4gIHNob3VsZENhbmNlbFdoZW5PdXRzaWRlOiBmYWxzZSxcbiAgc2hvdWxkQWN0aXZhdGVPblN0YXJ0OiB0cnVlLFxuICBkaXNhbGxvd0ludGVycnVwdGlvbjogdHJ1ZSxcbn0pO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCB0eXBlIFN3aXRjaCA9IHR5cGVvZiBTd2l0Y2ggJiBSTlN3aXRjaDtcblxuZXhwb3J0IGNvbnN0IFRleHRJbnB1dCA9IGNyZWF0ZU5hdGl2ZVdyYXBwZXI8Uk5UZXh0SW5wdXRQcm9wcz4oUk5UZXh0SW5wdXQpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCB0eXBlIFRleHRJbnB1dCA9IHR5cGVvZiBUZXh0SW5wdXQgJiBSTlRleHRJbnB1dDtcblxuZXhwb3J0IGNvbnN0IERyYXdlckxheW91dEFuZHJvaWQgPSBjcmVhdGVOYXRpdmVXcmFwcGVyPFxuICBQcm9wc1dpdGhDaGlsZHJlbjxSTkRyYXdlckxheW91dEFuZHJvaWRQcm9wcz5cbj4oUk5EcmF3ZXJMYXlvdXRBbmRyb2lkLCB7IGRpc2FsbG93SW50ZXJydXB0aW9uOiB0cnVlIH0pO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCB0eXBlIERyYXdlckxheW91dEFuZHJvaWQgPSB0eXBlb2YgRHJhd2VyTGF5b3V0QW5kcm9pZCAmXG4gIFJORHJhd2VyTGF5b3V0QW5kcm9pZDtcblxuZXhwb3J0IGNvbnN0IEZsYXRMaXN0ID0gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICBjb25zdCByZWZyZXNoQ29udHJvbEdlc3R1cmVSZWYgPSBSZWFjdC51c2VSZWY8UmVmcmVzaENvbnRyb2w+KG51bGwpO1xuXG4gIGNvbnN0IHsgd2FpdEZvciwgcmVmcmVzaENvbnRyb2wsIC4uLnJlc3QgfSA9IHByb3BzO1xuXG4gIGNvbnN0IGZsYXRMaXN0UHJvcHMgPSB7fTtcbiAgY29uc3Qgc2Nyb2xsVmlld1Byb3BzID0ge307XG4gIGZvciAoY29uc3QgW3Byb3BOYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocmVzdCkpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzI2MjU1XG4gICAgaWYgKChuYXRpdmVWaWV3UHJvcHMgYXMgcmVhZG9ubHkgc3RyaW5nW10pLmluY2x1ZGVzKHByb3BOYW1lKSkge1xuICAgICAgLy8gQHRzLWlnbm9yZSAtIHRoaXMgZnVuY3Rpb24gY2Fubm90IGhhdmUgZ2VuZXJpYyB0eXBlIHNvIHdlIGhhdmUgdG8gaWdub3JlIHRoaXMgZXJyb3JcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcbiAgICAgIHNjcm9sbFZpZXdQcm9wc1twcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQHRzLWlnbm9yZSAtIHRoaXMgZnVuY3Rpb24gY2Fubm90IGhhdmUgZ2VuZXJpYyB0eXBlIHNvIHdlIGhhdmUgdG8gaWdub3JlIHRoaXMgZXJyb3JcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcbiAgICAgIGZsYXRMaXN0UHJvcHNbcHJvcE5hbWVdID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICAvLyBAdHMtaWdub3JlIC0gdGhpcyBmdW5jdGlvbiBjYW5ub3QgaGF2ZSBnZW5lcmljIHR5cGUgc28gd2UgaGF2ZSB0byBpZ25vcmUgdGhpcyBlcnJvclxuICAgIDxSTkZsYXRMaXN0XG4gICAgICByZWY9e3JlZn1cbiAgICAgIHsuLi5mbGF0TGlzdFByb3BzfVxuICAgICAgcmVuZGVyU2Nyb2xsQ29tcG9uZW50PXsoc2Nyb2xsUHJvcHMpID0+IChcbiAgICAgICAgPFNjcm9sbFZpZXdcbiAgICAgICAgICB7Li4ue1xuICAgICAgICAgICAgLi4uc2Nyb2xsUHJvcHMsXG4gICAgICAgICAgICAuLi5zY3JvbGxWaWV3UHJvcHMsXG4gICAgICAgICAgICB3YWl0Rm9yOiBbLi4udG9BcnJheSh3YWl0Rm9yID8/IFtdKSwgcmVmcmVzaENvbnRyb2xHZXN0dXJlUmVmXSxcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAgIC8vIEB0cy1pZ25vcmUgd2UgZG9uJ3QgcGFzcyBgcmVmcmVzaGluZ2AgcHJvcCBhcyB3ZSBvbmx5IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIHJlZlxuICAgICAgcmVmcmVzaENvbnRyb2w9e1xuICAgICAgICByZWZyZXNoQ29udHJvbFxuICAgICAgICAgID8gUmVhY3QuY2xvbmVFbGVtZW50KHJlZnJlc2hDb250cm9sLCB7XG4gICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgZm9yIHJlYXNvbnMgdW5rbm93biB0byBtZSwgYHJlZmAgZG9lc24ndCBleGlzdCBvbiB0aGUgdHlwZSBpbmZlcnJlZCBieSBUU1xuICAgICAgICAgICAgICByZWY6IHJlZnJlc2hDb250cm9sR2VzdHVyZVJlZixcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgIH1cbiAgICAvPlxuICApO1xufSkgYXMgPEl0ZW1UID0gYW55PihcbiAgcHJvcHM6IFByb3BzV2l0aENoaWxkcmVuPFxuICAgIFJORmxhdExpc3RQcm9wczxJdGVtVD4gJlxuICAgICAgUmVmQXR0cmlidXRlczxGbGF0TGlzdDxJdGVtVD4+ICZcbiAgICAgIE5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlclByb3BzXG4gID4sXG4gIHJlZjogRm9yd2FyZGVkUmVmPEZsYXRMaXN0PEl0ZW1UPj5cbikgPT4gUmVhY3RFbGVtZW50IHwgbnVsbDtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgdHlwZSBGbGF0TGlzdDxJdGVtVCA9IGFueT4gPSB0eXBlb2YgRmxhdExpc3QgJiBSTkZsYXRMaXN0PEl0ZW1UPjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsS0FBQSxH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