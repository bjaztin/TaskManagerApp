2031d57e281da8996dd192d4799ebfc9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _min2 = _interopRequireDefault(require("lodash/min"));
var _map = _interopRequireDefault(require("lodash/map"));
var _times = _interopRequireDefault(require("lodash/times"));
var _groupBy = _interopRequireDefault(require("lodash/groupBy"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _constants = _interopRequireDefault(require("../commons/constants"));
var _dateutils = require("../dateutils");
var _services = require("../services");
var _style = _interopRequireDefault(require("./style"));
var _Packer = require("./Packer");
var _presenter = require("./helpers/presenter");
var _TimelineHours = _interopRequireDefault(require("./TimelineHours"));
var _EventBlock = _interopRequireDefault(require("./EventBlock"));
var _NowIndicator = _interopRequireDefault(require("./NowIndicator"));
var _useTimelineOffset2 = _interopRequireDefault(require("./useTimelineOffset"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Timeline = function Timeline(props) {
  var _props$format24h = props.format24h,
    format24h = _props$format24h === void 0 ? true : _props$format24h,
    _props$start = props.start,
    start = _props$start === void 0 ? 0 : _props$start,
    _props$end = props.end,
    end = _props$end === void 0 ? 24 : _props$end,
    _props$date = props.date,
    date = _props$date === void 0 ? '' : _props$date,
    events = props.events,
    onEventPress = props.onEventPress,
    onBackgroundLongPress = props.onBackgroundLongPress,
    onBackgroundLongPressOut = props.onBackgroundLongPressOut,
    renderEvent = props.renderEvent,
    theme = props.theme,
    scrollToFirst = props.scrollToFirst,
    scrollToNow = props.scrollToNow,
    initialTime = props.initialTime,
    showNowIndicator = props.showNowIndicator,
    scrollOffset = props.scrollOffset,
    onChangeOffset = props.onChangeOffset,
    _props$overlapEventsS = props.overlapEventsSpacing,
    overlapEventsSpacing = _props$overlapEventsS === void 0 ? 0 : _props$overlapEventsS,
    _props$rightEdgeSpaci = props.rightEdgeSpacing,
    rightEdgeSpacing = _props$rightEdgeSpaci === void 0 ? 0 : _props$rightEdgeSpaci,
    unavailableHours = props.unavailableHours,
    unavailableHoursColor = props.unavailableHoursColor,
    eventTapped = props.eventTapped,
    _props$numberOfDays = props.numberOfDays,
    numberOfDays = _props$numberOfDays === void 0 ? 1 : _props$numberOfDays,
    _props$timelineLeftIn = props.timelineLeftInset,
    timelineLeftInset = _props$timelineLeftIn === void 0 ? 0 : _props$timelineLeftIn;
  var pageDates = (0, _react.useMemo)(function () {
    return typeof date === 'string' ? [date] : date;
  }, [date]);
  var groupedEvents = (0, _react.useMemo)(function () {
    return (0, _groupBy.default)(events, function (e) {
      return (0, _services.getCalendarDateString)(e.start);
    });
  }, [events]);
  var pageEvents = (0, _react.useMemo)(function () {
    return (0, _map.default)(pageDates, function (d) {
      return groupedEvents[d] || [];
    });
  }, [pageDates, groupedEvents]);
  var scrollView = (0, _react.useRef)();
  var calendarHeight = (0, _react.useRef)((end - start) * _Packer.HOUR_BLOCK_HEIGHT);
  var styles = (0, _react.useRef)((0, _style.default)(theme || props.styles, calendarHeight.current));
  var _useTimelineOffset = (0, _useTimelineOffset2.default)({
      onChangeOffset: onChangeOffset,
      scrollOffset: scrollOffset,
      scrollViewRef: scrollView
    }),
    scrollEvents = _useTimelineOffset.scrollEvents;
  var width = (0, _react.useMemo)(function () {
    return _constants.default.screenWidth - timelineLeftInset;
  }, [timelineLeftInset]);
  var packedEvents = (0, _react.useMemo)(function () {
    return (0, _map.default)(pageEvents, function (_e, i) {
      return (0, _Packer.populateEvents)(pageEvents[i], {
        screenWidth: width / numberOfDays,
        dayStart: start,
        overlapEventsSpacing: overlapEventsSpacing / numberOfDays,
        rightEdgeSpacing: rightEdgeSpacing / numberOfDays
      });
    });
  }, [pageEvents, start, numberOfDays]);
  (0, _react.useEffect)(function () {
    var initialPosition = 0;
    if (scrollToNow) {
      initialPosition = (0, _presenter.calcTimeOffset)(_Packer.HOUR_BLOCK_HEIGHT);
    } else if (scrollToFirst && packedEvents[0].length > 0) {
      var _min;
      initialPosition = (_min = (0, _min2.default)((0, _map.default)(packedEvents[0], 'top'))) != null ? _min : 0;
    } else if (initialTime) {
      initialPosition = (0, _presenter.calcTimeOffset)(_Packer.HOUR_BLOCK_HEIGHT, initialTime.hour, initialTime.minutes);
    }
    if (initialPosition) {
      setTimeout(function () {
        var _scrollView$current;
        scrollView == null ? void 0 : (_scrollView$current = scrollView.current) == null ? void 0 : _scrollView$current.scrollTo({
          y: Math.max(0, initialPosition - _Packer.HOUR_BLOCK_HEIGHT),
          animated: true
        });
      }, 0);
    }
  }, []);
  var _onEventPress = (0, _react.useCallback)(function (dateIndex, eventIndex) {
    var event = packedEvents[dateIndex][eventIndex];
    if (eventTapped) {
      eventTapped(event);
    } else {
      onEventPress == null ? void 0 : onEventPress(event);
    }
  }, [onEventPress, eventTapped]);
  var renderEvents = function renderEvents(dayIndex) {
    var events = packedEvents[dayIndex].map(function (event, eventIndex) {
      var onEventPress = function onEventPress() {
        return _onEventPress(dayIndex, eventIndex);
      };
      return (0, _jsxRuntime.jsx)(_EventBlock.default, {
        index: eventIndex,
        event: event,
        styles: styles.current,
        format24h: format24h,
        onPress: onEventPress,
        renderEvent: renderEvent
      }, eventIndex);
    });
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      pointerEvents: 'box-none',
      style: [{
        marginLeft: dayIndex === 0 ? timelineLeftInset : undefined
      }, styles.current.eventsContainer],
      children: events
    });
  };
  var renderTimelineDay = function renderTimelineDay(dayIndex) {
    var indexOfToday = pageDates.indexOf((0, _dateutils.generateDay)(new Date().toString()));
    var left = timelineLeftInset + indexOfToday * width / numberOfDays;
    return (0, _jsxRuntime.jsxs)(_react.default.Fragment, {
      children: [renderEvents(dayIndex), indexOfToday !== -1 && showNowIndicator && (0, _jsxRuntime.jsx)(_NowIndicator.default, {
        width: width / numberOfDays,
        left: left,
        styles: styles.current
      })]
    }, dayIndex);
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, _objectSpread(_objectSpread({
    ref: scrollView,
    style: styles.current.container,
    contentContainerStyle: [styles.current.contentStyle, {
      width: _constants.default.screenWidth
    }],
    showsVerticalScrollIndicator: false
  }, scrollEvents), {}, {
    children: [(0, _jsxRuntime.jsx)(_TimelineHours.default, {
      start: start,
      end: end,
      date: pageDates[0],
      format24h: format24h,
      styles: styles.current,
      unavailableHours: unavailableHours,
      unavailableHoursColor: unavailableHoursColor,
      onBackgroundLongPress: onBackgroundLongPress,
      onBackgroundLongPressOut: onBackgroundLongPressOut,
      width: width,
      numberOfDays: numberOfDays,
      timelineLeftInset: timelineLeftInset
    }), (0, _times.default)(numberOfDays, renderTimelineDay)]
  }));
};
var _default = _react.default.memo(Timeline);
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,