{"version":3,"names":["_gesture","require","_worklet_59983906047_init_data","code","location","sourceMap","changeEventCalculator","_e","global","Error","_f","current","previous","changePayload","undefined","rotationChange","rotation","_objectSpread","_closure","__initData","__workletHash","__stackDetails","__version","RotationGesture","_gesture$ContinousBas","_inherits2","default","_super","_createSuper","_this","_classCallCheck2","call","handlerName","_createClass2","key","value","onChange","callback","handlers","_get2","_getPrototypeOf2","prototype","ContinousBaseGesture"],"sources":["rotationGesture.ts"],"sourcesContent":["import { ContinousBaseGesture } from './gesture';\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\ntype RotationGestureChangeEventPayload = {\n  rotationChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<RotationGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<RotationGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: RotationGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      rotationChange: current.rotation,\n    };\n  } else {\n    changePayload = {\n      rotationChange: current.rotation - previous.rotation,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class RotationGesture extends ContinousBaseGesture<\n  RotationGestureHandlerEventPayload,\n  RotationGestureChangeEventPayload\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'RotationGestureHandler';\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        RotationGestureHandlerEventPayload & RotationGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type RotationGestureType = InstanceType<typeof RotationGesture>;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AAAA,IAAAC,8BAAA;EAAAC,IAAA;EAAAC,QAAA;EAAAC,SAAA;AAAA;AAAA,IAQSC,qBAAT;EAAA,IAAAC,EAAA,QAAAC,MAAA,CAAAC,KAAA;EAAA,IAAAC,EAAA,YAAAA,GACEC,OADF,EAEEC,QAFF,EAGE;IAEA,IAAIC,aAAJ;IACA,IAAID,QAAQ,KAAKE,SAAjB,EAA4B;MAC1BD,aAAa,GAAG;QACdE,cAAc,EAAEJ,OAAO,CAACK;MADV,CAAhB;IAGD,CAJD,MAIO;MACLH,aAAa,GAAG;QACdE,cAAc,EAAEJ,OAAO,CAACK,QAAR,GAAmBJ,QAAQ,CAACI;MAD9B,CAAhB;IAGD;IAED,OAAAC,aAAA,CAAAA,aAAA,KAAYN,OAAL,GAAiBE,aAAA;EACzB;EAAAH,EAAA,CAAAQ,QAAA;EAAAR,EAAA,CAAAS,UAAA,GAAAjB,8BAAA;EAAAQ,EAAA,CAAAU,aAAA;EAAAV,EAAA,CAAAW,cAAA,GAAAd,EAAA;EAAAG,EAAA,CAAAY,SAAA;EAAA,OAAAZ,EAAA;AAAA;AAAA,IAEYa,eAAN,aAAAC,qBAAA;EAAA,IAAAC,UAAA,CAAAC,OAAA,EAAAH,eAAA,EAAAC,qBAAA;EAAA,IAAAG,MAAA,GAAAC,YAAA,CAAAL,eAAA;EAIL,SAAAA,gBAAA,EAAc;IAAA,IAAAM,KAAA;IAAA,IAAAC,gBAAA,CAAAJ,OAAA,QAAAH,eAAA;IACZM,KAAA,GAAAF,MAAA,CAAAI,IAAA;IAEAF,KAAA,CAAKG,WAAL,GAAmB,wBAAnB;IAAA,OAAAH,KAAA;EACD;EAAA,IAAAI,aAAA,CAAAP,OAAA,EAAAH,eAAA;IAAAW,GAAA;IAAAC,KAAA,EAED,SAAAC,SACEC,QADM,EAMN;MAEA,KAAKC,QAAL,CAAchC,qBAAd,GAAsCA,qBAAtC;MACA,WAAAiC,KAAA,CAAAb,OAAA,MAAAc,gBAAA,CAAAd,OAAA,EAAAH,eAAA,CAAAkB,SAAA,qBAAAV,IAAA,OAAsBM,QAAf;IACR;EAAA;EAAA,OAAAd,eAAA;AAAA,EApBkCvB,QAAA,CAAA0C,oBAA9B"}