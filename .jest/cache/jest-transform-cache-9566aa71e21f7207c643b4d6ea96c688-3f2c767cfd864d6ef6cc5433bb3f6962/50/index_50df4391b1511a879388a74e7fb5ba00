93c18b8666718f65d1817232101b6328
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Positions = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _first = _interopRequireDefault(require("lodash/first"));
var _isFunction = _interopRequireDefault(require("lodash/isFunction"));
var _isNumber = _interopRequireDefault(require("lodash/isNumber"));
var _throttle = _interopRequireDefault(require("lodash/throttle"));
var _xdate = _interopRequireDefault(require("xdate"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _dateutils = require("../dateutils");
var _interface = require("../interface");
var _style = _interopRequireWildcard(require("./style"));
var _WeekDaysNames = _interopRequireDefault(require("../commons/WeekDaysNames"));
var _calendar = _interopRequireDefault(require("../calendar"));
var _calendarList = _interopRequireDefault(require("../calendar-list"));
var _week = _interopRequireDefault(require("./week"));
var _WeekCalendar = _interopRequireDefault(require("./WeekCalendar"));
var _Context = _interopRequireDefault(require("./Context"));
var _constants = _interopRequireDefault(require("../commons/constants"));
var _commons = require("./commons");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["initialPosition", "onCalendarToggled", "disablePan", "hideKnob", "leftArrowImageSource", "rightArrowImageSource", "allowShadow", "disableWeekScroll", "openThreshold", "closeThreshold", "closeOnDayPress", "horizontal", "calendarStyle", "theme", "style", "firstDay", "onDayPress", "hideArrows", "onPressArrowLeft", "onPressArrowRight", "renderArrow", "testID"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Positions;
exports.Positions = Positions;
(function (Positions) {
  Positions["CLOSED"] = "closed";
  Positions["OPEN"] = "open";
})(Positions || (exports.Positions = Positions = {}));
var SPEED = 20;
var BOUNCINESS = 6;
var CLOSED_HEIGHT = 120;
var WEEK_HEIGHT = 46;
var DAY_NAMES_PADDING = 24;
var PAN_GESTURE_THRESHOLD = 30;
var LEFT_ARROW = require("../calendar/img/previous.png");
var RIGHT_ARROW = require("../calendar/img/next.png");
var knobHitSlop = {
  left: 10,
  right: 10,
  top: 10,
  bottom: 10
};
var headerStyleOverride = {
  stylesheet: {
    calendar: {
      header: {
        week: {
          marginTop: 7,
          marginBottom: -4,
          flexDirection: 'row',
          justifyContent: 'space-around'
        }
      }
    }
  }
};
var ExpandableCalendar = function ExpandableCalendar(props) {
  var _useContext = (0, _react.useContext)(_Context.default),
    date = _useContext.date,
    setDate = _useContext.setDate,
    numberOfDays = _useContext.numberOfDays,
    timelineLeftInset = _useContext.timelineLeftInset;
  var _props$initialPositio = props.initialPosition,
    initialPosition = _props$initialPositio === void 0 ? Positions.CLOSED : _props$initialPositio,
    onCalendarToggled = props.onCalendarToggled,
    disablePan = props.disablePan,
    _props$hideKnob = props.hideKnob,
    hideKnob = _props$hideKnob === void 0 ? numberOfDays && numberOfDays > 1 : _props$hideKnob,
    _props$leftArrowImage = props.leftArrowImageSource,
    leftArrowImageSource = _props$leftArrowImage === void 0 ? LEFT_ARROW : _props$leftArrowImage,
    _props$rightArrowImag = props.rightArrowImageSource,
    rightArrowImageSource = _props$rightArrowImag === void 0 ? RIGHT_ARROW : _props$rightArrowImag,
    _props$allowShadow = props.allowShadow,
    allowShadow = _props$allowShadow === void 0 ? true : _props$allowShadow,
    disableWeekScroll = props.disableWeekScroll,
    _props$openThreshold = props.openThreshold,
    openThreshold = _props$openThreshold === void 0 ? PAN_GESTURE_THRESHOLD : _props$openThreshold,
    _props$closeThreshold = props.closeThreshold,
    closeThreshold = _props$closeThreshold === void 0 ? PAN_GESTURE_THRESHOLD : _props$closeThreshold,
    _props$closeOnDayPres = props.closeOnDayPress,
    closeOnDayPress = _props$closeOnDayPres === void 0 ? true : _props$closeOnDayPres,
    _props$horizontal = props.horizontal,
    horizontal = _props$horizontal === void 0 ? true : _props$horizontal,
    calendarStyle = props.calendarStyle,
    theme = props.theme,
    propsStyle = props.style,
    _props$firstDay = props.firstDay,
    firstDay = _props$firstDay === void 0 ? 0 : _props$firstDay,
    onDayPress = props.onDayPress,
    hideArrows = props.hideArrows,
    onPressArrowLeft = props.onPressArrowLeft,
    onPressArrowRight = props.onPressArrowRight,
    renderArrow = props.renderArrow,
    testID = props.testID,
    others = (0, _objectWithoutProperties2.default)(props, _excluded);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    screenReaderEnabled = _useState2[0],
    setScreenReaderEnabled = _useState2[1];
  var getYear = function getYear(date) {
    var d = new _xdate.default(date);
    return d.getFullYear();
  };
  var getMonth = function getMonth(date) {
    var d = new _xdate.default(date);
    return d.getMonth() + 1;
  };
  var visibleMonth = (0, _react.useRef)(getMonth(date));
  var visibleYear = (0, _react.useRef)(getYear(date));
  var isLaterDate = function isLaterDate(date1, date2) {
    if (date1 && date2) {
      if (date1.year > getYear(date2)) {
        return true;
      }
      if (date1.year === getYear(date2)) {
        if (date1.month > getMonth(date2)) {
          return true;
        }
      }
    }
    return false;
  };
  (0, _react.useEffect)(function () {
    scrollToDate(date);
  }, [date]);
  var getNumberOfWeeksInMonth = function getNumberOfWeeksInMonth(month) {
    var days = (0, _dateutils.page)(new _xdate.default(month), firstDay);
    return days.length / 7;
  };
  var numberOfWeeks = (0, _react.useRef)(getNumberOfWeeksInMonth(date));
  var _useState3 = (0, _react.useState)(numberOfDays ? Positions.CLOSED : initialPosition),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    position = _useState4[0],
    setPosition = _useState4[1];
  var isOpen = position === Positions.OPEN;
  var getOpenHeight = function getOpenHeight() {
    if (!horizontal) {
      return Math.max(_constants.default.screenHeight, _constants.default.screenWidth);
    }
    return CLOSED_HEIGHT + WEEK_HEIGHT * (numberOfWeeks.current - 1) + (hideKnob ? 12 : _style.KNOB_CONTAINER_HEIGHT) + (_constants.default.isAndroid ? 3 : 0);
  };
  var openHeight = (0, _react.useRef)(getOpenHeight());
  var closedHeight = (0, _react.useMemo)(function () {
    return CLOSED_HEIGHT + (hideKnob || Number(numberOfDays) > 1 ? 0 : _style.KNOB_CONTAINER_HEIGHT);
  }, [numberOfDays, hideKnob]);
  var startHeight = (0, _react.useMemo)(function () {
    return isOpen ? openHeight.current : closedHeight;
  }, [closedHeight, isOpen]);
  var _height = (0, _react.useRef)(startHeight);
  var deltaY = (0, _react.useMemo)(function () {
    return new _reactNative.Animated.Value(startHeight);
  }, [startHeight]);
  var headerDeltaY = (0, _react.useRef)(new _reactNative.Animated.Value(isOpen ? -_style.HEADER_HEIGHT : 0));
  (0, _react.useEffect)(function () {
    _height.current = startHeight;
    deltaY.setValue(startHeight);
  }, [startHeight]);
  (0, _react.useEffect)(function () {
    if (numberOfDays) {
      setPosition(Positions.CLOSED);
    }
  }, [numberOfDays]);
  var wrapper = (0, _react.useRef)();
  var calendarList = (0, _react.useRef)();
  var header = (0, _react.useRef)();
  var weekCalendarWrapper = (0, _react.useRef)();
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var themeObject = Object.assign(headerStyleOverride, theme);
  var _wrapperStyles = (0, _react.useRef)({
    style: {
      height: startHeight
    }
  });
  var _headerStyles = {
    style: {
      top: isOpen ? -_style.HEADER_HEIGHT : 0
    }
  };
  var _weekCalendarStyles = {
    style: {
      opacity: isOpen ? 0 : 1
    }
  };
  var shouldHideArrows = !horizontal ? true : hideArrows || false;
  var updateNativeStyles = function updateNativeStyles() {
    var _wrapper$current;
    wrapper == null ? void 0 : (_wrapper$current = wrapper.current) == null ? void 0 : _wrapper$current.setNativeProps(_wrapperStyles.current);
    if (!horizontal) {
      var _header$current;
      header == null ? void 0 : (_header$current = header.current) == null ? void 0 : _header$current.setNativeProps(_headerStyles);
    } else {
      var _weekCalendarWrapper$;
      weekCalendarWrapper == null ? void 0 : (_weekCalendarWrapper$ = weekCalendarWrapper.current) == null ? void 0 : _weekCalendarWrapper$.setNativeProps(_weekCalendarStyles);
    }
  };
  var weekDaysStyle = (0, _react.useMemo)(function () {
    var leftPaddings = calendarStyle == null ? void 0 : calendarStyle.paddingLeft;
    var rightPaddings = calendarStyle == null ? void 0 : calendarStyle.paddingRight;
    return [style.current.weekDayNames, {
      paddingLeft: (0, _isNumber.default)(leftPaddings) ? leftPaddings + 6 : DAY_NAMES_PADDING,
      paddingRight: (0, _isNumber.default)(rightPaddings) ? rightPaddings + 6 : DAY_NAMES_PADDING
    }];
  }, [calendarStyle]);
  var animatedHeaderStyle = (0, _react.useMemo)(function () {
    return [style.current.header, {
      height: _style.HEADER_HEIGHT + 10,
      top: headerDeltaY.current
    }];
  }, [headerDeltaY.current]);
  var weekCalendarStyle = (0, _react.useMemo)(function () {
    return [style.current.weekContainer, isOpen ? style.current.hidden : style.current.visible];
  }, [isOpen]);
  var containerStyle = (0, _react.useMemo)(function () {
    return [allowShadow && style.current.containerShadow, propsStyle];
  }, [allowShadow, propsStyle]);
  var wrapperStyle = (0, _react.useMemo)(function () {
    return {
      height: deltaY
    };
  }, [deltaY]);
  var numberOfDaysHeaderStyle = (0, _react.useMemo)(function () {
    if (numberOfDays && numberOfDays > 1) {
      return {
        paddingHorizontal: 0
      };
    }
  }, [numberOfDays]);
  var _headerStyle = (0, _react.useMemo)(function () {
    return [numberOfDaysHeaderStyle, props.headerStyle];
  }, [props.headerStyle, numberOfDaysHeaderStyle]);
  (0, _react.useEffect)(function () {
    if (_reactNative.AccessibilityInfo) {
      if (_reactNative.AccessibilityInfo.isScreenReaderEnabled) {
        _reactNative.AccessibilityInfo.isScreenReaderEnabled().then(handleScreenReaderStatus);
      } else if (_reactNative.AccessibilityInfo.fetch) {
        _reactNative.AccessibilityInfo.fetch().then(handleScreenReaderStatus);
      }
    }
  }, []);
  var handleScreenReaderStatus = function handleScreenReaderStatus(screenReaderEnabled) {
    setScreenReaderEnabled(screenReaderEnabled);
  };
  var scrollToDate = function scrollToDate(date) {
    if (!horizontal) {
      var _calendarList$current;
      calendarList == null ? void 0 : (_calendarList$current = calendarList.current) == null ? void 0 : _calendarList$current.scrollToDay(date, 0, true);
    } else if (getYear(date) !== visibleYear.current || getMonth(date) !== visibleMonth.current) {
      var _calendarList$current2;
      calendarList == null ? void 0 : (_calendarList$current2 = calendarList.current) == null ? void 0 : _calendarList$current2.scrollToMonth(date);
    }
  };
  var scrollPage = (0, _react.useCallback)(function (next) {
    if (horizontal) {
      var d = (0, _interface.parseDate)(date);
      if (isOpen) {
        d.setDate(1);
        d.addMonths(next ? 1 : -1);
      } else {
        var dayOfTheWeek = d.getDay();
        if (dayOfTheWeek < firstDay && firstDay > 0) {
          dayOfTheWeek = 7 + dayOfTheWeek;
        }
        if (numberOfDays) {
          var daysToAdd = numberOfDays <= 1 ? 7 : numberOfDays;
          d.addDays(next ? daysToAdd : -daysToAdd);
        } else {
          var firstDayOfWeek = (next ? 7 : -7) - dayOfTheWeek + firstDay;
          d.addDays(firstDayOfWeek);
        }
      }
      setDate == null ? void 0 : setDate((0, _interface.toMarkingFormat)(d), _commons.UpdateSources.PAGE_SCROLL);
    }
  }, [horizontal, isOpen, firstDay, numberOfDays, setDate, date]);
  var handleMoveShouldSetPanResponder = function handleMoveShouldSetPanResponder(_, gestureState) {
    if (disablePan) {
      return false;
    }
    if (!horizontal && isOpen) {
      return false;
    }
    if (!isOpen && gestureState.dy < 0) {
      return false;
    }
    return gestureState.dy > 5 || gestureState.dy < -5;
  };
  var handlePanResponderMove = function handlePanResponderMove(_, gestureState) {
    _wrapperStyles.current.style.height = Math.min(Math.max(closedHeight, _height.current + gestureState.dy), openHeight.current);
    if (!horizontal) {
      _headerStyles.style.top = Math.min(Math.max(-gestureState.dy, -_style.HEADER_HEIGHT), 0);
    } else {
      if (!isOpen) {
        _weekCalendarStyles.style.opacity = Math.min(1, Math.max(1 - gestureState.dy / 100, 0));
      } else if (gestureState.dy < 0) {
        _weekCalendarStyles.style.opacity = Math.max(0, Math.min(Math.abs(gestureState.dy / 200), 1));
      }
    }
    updateNativeStyles();
  };
  var handlePanResponderEnd = function handlePanResponderEnd() {
    _height.current = Number(_wrapperStyles.current.style.height);
    bounceToPosition();
  };
  var numberOfDaysCondition = (0, _react.useMemo)(function () {
    return !numberOfDays || numberOfDays && numberOfDays <= 1;
  }, [numberOfDays]);
  var panResponder = (0, _react.useMemo)(function () {
    return numberOfDaysCondition ? _reactNative.PanResponder.create({
      onMoveShouldSetPanResponder: handleMoveShouldSetPanResponder,
      onPanResponderMove: handlePanResponderMove,
      onPanResponderRelease: handlePanResponderEnd,
      onPanResponderTerminate: handlePanResponderEnd
    }) : _reactNative.PanResponder.create({});
  }, [numberOfDays, position]);
  var bounceToPosition = function bounceToPosition() {
    var toValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    if (!disablePan) {
      var threshold = isOpen ? openHeight.current - closeThreshold : closedHeight + openThreshold;
      var _isOpen = _height.current >= threshold;
      var newValue = _isOpen ? openHeight.current : closedHeight;
      deltaY.setValue(_height.current);
      _height.current = toValue || newValue;
      _isOpen = _height.current >= threshold;
      _reactNative.Animated.spring(deltaY, {
        toValue: _height.current,
        speed: SPEED,
        bounciness: BOUNCINESS,
        useNativeDriver: false
      }).start();
      onCalendarToggled == null ? void 0 : onCalendarToggled(_isOpen);
      setPosition(function () {
        return _height.current === closedHeight ? Positions.CLOSED : Positions.OPEN;
      });
      closeHeader(_isOpen);
      resetWeekCalendarOpacity(_isOpen);
    }
  };
  var resetWeekCalendarOpacity = function resetWeekCalendarOpacity(isOpen) {
    _weekCalendarStyles.style.opacity = isOpen ? 0 : 1;
    updateNativeStyles();
  };
  var closeHeader = function closeHeader(isOpen) {
    headerDeltaY.current.setValue(Number(_headerStyles.style.top));
    if (!horizontal && !isOpen) {
      _reactNative.Animated.spring(headerDeltaY.current, {
        toValue: 0,
        speed: SPEED / 10,
        bounciness: 1,
        useNativeDriver: false
      }).start();
    }
  };
  var closeCalendar = (0, _react.useCallback)(function () {
    setTimeout(function () {
      if (isOpen) {
        bounceToPosition(closedHeight);
      }
    }, 0);
  }, [isOpen, closedHeight]);
  var toggleCalendarPosition = (0, _react.useCallback)(function () {
    bounceToPosition(isOpen ? closedHeight : openHeight.current);
  }, [isOpen, bounceToPosition, closedHeight]);
  var _onPressArrowLeft = (0, _react.useCallback)(function (method, month) {
    onPressArrowLeft == null ? void 0 : onPressArrowLeft(method, month);
    scrollPage(false);
  }, [onPressArrowLeft, scrollPage]);
  var _onPressArrowRight = (0, _react.useCallback)(function (method, month) {
    onPressArrowRight == null ? void 0 : onPressArrowRight(method, month);
    scrollPage(true);
  }, [onPressArrowRight, scrollPage]);
  var _onDayPress = (0, _react.useCallback)(function (value) {
    if (numberOfDaysCondition) {
      setDate == null ? void 0 : setDate(value.dateString, _commons.UpdateSources.DAY_PRESS);
    }
    if (closeOnDayPress) {
      closeCalendar();
    }
    onDayPress == null ? void 0 : onDayPress(value);
  }, [onDayPress, closeOnDayPress, closeCalendar, numberOfDaysCondition]);
  var onVisibleMonthsChange = (0, _react.useCallback)((0, _throttle.default)(function (value) {
    var newDate = (0, _first.default)(value);
    if (newDate) {
      var month = newDate.month;
      if (month && visibleMonth.current !== month) {
        visibleMonth.current = month;
        var year = newDate.year;
        if (year) {
          visibleYear.current = year;
        }
        if (visibleMonth.current !== getMonth(date)) {
          var next = isLaterDate(newDate, date);
          scrollPage(next);
        }
        setTimeout(function () {
          var _numberOfWeeks = getNumberOfWeeksInMonth(newDate.dateString);
          if (_numberOfWeeks !== numberOfWeeks.current) {
            numberOfWeeks.current = _numberOfWeeks;
            openHeight.current = getOpenHeight();
            if (isOpen) {
              bounceToPosition(openHeight.current);
            }
          }
        }, 0);
      }
    }
  }, 100, {
    trailing: true,
    leading: false
  }), [date, scrollPage]);
  var _renderArrow = (0, _react.useCallback)(function (direction) {
    if ((0, _isFunction.default)(renderArrow)) {
      return renderArrow(direction);
    }
    return (0, _jsxRuntime.jsx)(_reactNative.Image, {
      source: direction === 'right' ? rightArrowImageSource : leftArrowImageSource,
      style: style.current.arrowImage,
      testID: `${testID}.${direction}Arrow`
    });
  }, [renderArrow, rightArrowImageSource, leftArrowImageSource, testID]);
  var renderWeekDaysNames = function renderWeekDaysNames() {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: weekDaysStyle,
      children: (0, _jsxRuntime.jsx)(_WeekDaysNames.default, {
        firstDay: firstDay,
        style: style.current.dayHeader
      })
    });
  };
  var renderAnimatedHeader = function renderAnimatedHeader() {
    var _XDate;
    var monthYear = (_XDate = new _xdate.default(date)) == null ? void 0 : _XDate.toString('MMMM yyyy');
    return (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
      ref: header,
      style: animatedHeaderStyle,
      pointerEvents: 'none',
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        allowFontScaling: false,
        style: style.current.headerTitle,
        children: monthYear
      }), renderWeekDaysNames()]
    });
  };
  var renderKnob = function renderKnob() {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: style.current.knobContainer,
      pointerEvents: 'box-none',
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: style.current.knob,
        testID: `${testID}.knob`,
        onPress: toggleCalendarPosition,
        hitSlop: knobHitSlop
      })
    });
  };
  var renderWeekCalendar = function renderWeekCalendar() {
    var WeekComponent = disableWeekScroll ? _week.default : _WeekCalendar.default;
    return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      ref: weekCalendarWrapper,
      style: weekCalendarStyle,
      pointerEvents: isOpen ? 'none' : 'auto',
      children: (0, _jsxRuntime.jsx)(WeekComponent, _objectSpread(_objectSpread({
        testID: `${testID}.weekCalendar`,
        firstDay: firstDay
      }, others), {}, {
        allowShadow: disableWeekScroll ? undefined : false,
        current: disableWeekScroll ? date : undefined,
        theme: themeObject,
        style: calendarStyle,
        hideDayNames: true,
        onDayPress: _onDayPress,
        accessibilityElementsHidden: true,
        importantForAccessibility: 'no-hide-descendants'
      }))
    });
  };
  var renderCalendarList = function renderCalendarList() {
    return (0, _jsxRuntime.jsx)(_calendarList.default, _objectSpread(_objectSpread({
      testID: `${testID}.calendarList`,
      horizontal: horizontal,
      firstDay: firstDay,
      calendarStyle: calendarStyle
    }, others), {}, {
      current: date,
      theme: themeObject,
      ref: calendarList,
      onDayPress: _onDayPress,
      onVisibleMonthsChange: onVisibleMonthsChange,
      pagingEnabled: true,
      scrollEnabled: isOpen,
      hideArrows: shouldHideArrows,
      onPressArrowLeft: _onPressArrowLeft,
      onPressArrowRight: _onPressArrowRight,
      hideExtraDays: !horizontal && isOpen,
      renderArrow: _renderArrow,
      staticHeader: true,
      numberOfDays: numberOfDays,
      headerStyle: _headerStyle,
      timelineLeftInset: timelineLeftInset,
      context: (0, _react.useContext)(_Context.default)
    }));
  };
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    testID: testID,
    style: containerStyle,
    children: screenReaderEnabled ? (0, _jsxRuntime.jsx)(_calendar.default, _objectSpread(_objectSpread({
      testID: `${testID}.calendarAccessible`
    }, others), {}, {
      theme: themeObject,
      onDayPress: _onDayPress,
      hideExtraDays: true,
      renderArrow: _renderArrow
    })) : (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, _objectSpread(_objectSpread({
      testID: `${testID}.expandableContainer`,
      ref: wrapper,
      style: wrapperStyle
    }, panResponder.panHandlers), {}, {
      children: [renderCalendarList(), renderWeekCalendar(), !hideKnob && renderKnob(), !horizontal && renderAnimatedHeader()]
    }))
  });
};
var _default = ExpandableCalendar;
exports.default = _default;
ExpandableCalendar.displayName = 'ExpandableCalendar';
ExpandableCalendar.defaultProps = {
  horizontal: true,
  initialPosition: Positions.CLOSED,
  firstDay: 0,
  leftArrowImageSource: LEFT_ARROW,
  rightArrowImageSource: RIGHT_ARROW,
  allowShadow: true,
  openThreshold: PAN_GESTURE_THRESHOLD,
  closeThreshold: PAN_GESTURE_THRESHOLD,
  closeOnDayPress: true
};
ExpandableCalendar.positions = Positions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,