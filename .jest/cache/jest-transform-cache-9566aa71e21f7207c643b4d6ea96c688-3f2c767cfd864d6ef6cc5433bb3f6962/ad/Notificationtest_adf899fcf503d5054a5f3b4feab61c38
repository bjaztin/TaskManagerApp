b04eeb2806c934555bbdcb0ea8d8b525
_getJestObj().mock("expo-notifications", function () {
  return {
    requestPermissionsAsync: jest.fn().mockResolvedValue({
      status: "granted"
    }),
    scheduleNotificationAsync: jest.fn().mockResolvedValue()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("react-native");
var _Notification = require("../../src/utilities/Notification");
var Notifications = _interopRequireWildcard(require("expo-notifications"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("Notifications Compoenent", function () {
  test("Grant notification permission", (0, _asyncToGenerator2.default)(function* () {
    var result = yield (0, _Notification.PushNotification)();
    expect(result).toBeNull();
  }));
});
describe("Schedule Notification", function () {
  test("When the selected time is valid, trigger the notification", (0, _asyncToGenerator2.default)(function* () {
    var selectedStartTime = new Date();
    var task = "This is the task";
    var result = yield (0, _Notification.scheduleNotification)(selectedStartTime, task);
    expect(result).toBeUndefined();
  }));
  test("When the selected time is invaild to tigger the notification, show an alert", (0, _asyncToGenerator2.default)(function* () {
    jest.spyOn(Notifications, "scheduleNotificationAsync").mockImplementation(function () {
      return Promise.reject(new Error("Failed to schedule"));
    });
    var selectedStartTime = new Date();
    var task = "This is the task";
    var alert = jest.spyOn(_reactNative.Alert, "alert");
    yield (0, _Notification.scheduleNotification)(selectedStartTime, task);
    expect(alert).toHaveBeenCalledWith("Task has been added", "To schedule the notification, select a later time");
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyZXF1ZXN0UGVybWlzc2lvbnNBc3luYyIsImplc3QiLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwic3RhdHVzIiwic2NoZWR1bGVOb3RpZmljYXRpb25Bc3luYyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0TmF0aXZlIiwiX05vdGlmaWNhdGlvbiIsIk5vdGlmaWNhdGlvbnMiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwidGVzdCIsInJlc3VsdCIsIlB1c2hOb3RpZmljYXRpb24iLCJleHBlY3QiLCJ0b0JlTnVsbCIsInNlbGVjdGVkU3RhcnRUaW1lIiwiRGF0ZSIsInRhc2siLCJzY2hlZHVsZU5vdGlmaWNhdGlvbiIsInRvQmVVbmRlZmluZWQiLCJzcHlPbiIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIlByb21pc2UiLCJyZWplY3QiLCJFcnJvciIsImFsZXJ0IiwiQWxlcnQiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCJdLCJzb3VyY2VzIjpbIk5vdGlmaWNhdGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFsZXJ0IH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IHsgUHVzaE5vdGlmaWNhdGlvbiwgc2NoZWR1bGVOb3RpZmljYXRpb24gfSBmcm9tIFwiLi4vLi4vc3JjL3V0aWxpdGllcy9Ob3RpZmljYXRpb25cIjsgXG5pbXBvcnQgKiBhcyBOb3RpZmljYXRpb25zIGZyb20gXCJleHBvLW5vdGlmaWNhdGlvbnNcIjtcblxuamVzdC5tb2NrKFwiZXhwby1ub3RpZmljYXRpb25zXCIsICgpID0+ICh7XG4gIHJlcXVlc3RQZXJtaXNzaW9uc0FzeW5jOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBzdGF0dXM6IFwiZ3JhbnRlZFwiIH0pLFxuICBzY2hlZHVsZU5vdGlmaWNhdGlvbkFzeW5jOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoKSxcbn0pKTtcblxuZGVzY3JpYmUoXCJOb3RpZmljYXRpb25zIENvbXBvZW5lbnRcIiwgKCkgPT4ge1xuICB0ZXN0KFwiR3JhbnQgbm90aWZpY2F0aW9uIHBlcm1pc3Npb25cIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFB1c2hOb3RpZmljYXRpb24oKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlTnVsbCgpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZShcIlNjaGVkdWxlIE5vdGlmaWNhdGlvblwiLCAoKSA9PiB7XG4gIHRlc3QoXCJXaGVuIHRoZSBzZWxlY3RlZCB0aW1lIGlzIHZhbGlkLCB0cmlnZ2VyIHRoZSBub3RpZmljYXRpb25cIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGVkU3RhcnRUaW1lID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCB0YXNrID0gXCJUaGlzIGlzIHRoZSB0YXNrXCI7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzY2hlZHVsZU5vdGlmaWNhdGlvbihzZWxlY3RlZFN0YXJ0VGltZSwgdGFzayk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZVVuZGVmaW5lZCgpO1xuICB9KTtcblxuICB0ZXN0KFwiV2hlbiB0aGUgc2VsZWN0ZWQgdGltZSBpcyBpbnZhaWxkIHRvIHRpZ2dlciB0aGUgbm90aWZpY2F0aW9uLCBzaG93IGFuIGFsZXJ0XCIsIGFzeW5jICgpID0+IHtcbiAgICBqZXN0XG4gICAgICAuc3B5T24oTm90aWZpY2F0aW9ucywgXCJzY2hlZHVsZU5vdGlmaWNhdGlvbkFzeW5jXCIpXG4gICAgICAubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+XG4gICAgICAgIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byBzY2hlZHVsZVwiKSlcbiAgICAgICk7XG5cbiAgICBjb25zdCBzZWxlY3RlZFN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XG4gICAgXG4gICAgY29uc3QgdGFzayA9IFwiVGhpcyBpcyB0aGUgdGFza1wiO1xuXG4gICAgY29uc3QgYWxlcnQgPSBqZXN0LnNweU9uKEFsZXJ0LCBcImFsZXJ0XCIpO1xuXG4gICAgYXdhaXQgc2NoZWR1bGVOb3RpZmljYXRpb24oc2VsZWN0ZWRTdGFydFRpbWUsIHRhc2spO1xuXG4gICAgZXhwZWN0KGFsZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIFwiVGFzayBoYXMgYmVlbiBhZGRlZFwiLFxuICAgICAgXCJUbyBzY2hlZHVsZSB0aGUgbm90aWZpY2F0aW9uLCBzZWxlY3QgYSBsYXRlciB0aW1lXCJcbiAgICApO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFJQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7RUFBQSxPQUFPO0lBQ3JDQyx1QkFBdUIsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQztNQUFFQyxNQUFNLEVBQUU7SUFBVSxDQUFDLENBQUM7SUFDM0VDLHlCQUF5QixFQUFFSixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDO0VBQ3pELENBQUM7QUFBQSxDQUFDLENBQUM7QUFBQyxJQUFBRyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYs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