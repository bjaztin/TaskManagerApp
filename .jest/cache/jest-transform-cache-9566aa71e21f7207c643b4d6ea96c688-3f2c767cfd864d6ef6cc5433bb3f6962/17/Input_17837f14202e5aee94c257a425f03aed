65db1b476d770428ff33558a09344425
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Input = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _helpers = require("../helpers");
var _config = require("../config");
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var renderText = function renderText(content, defaultProps, style) {
  return (0, _helpers.renderNode)(_reactNative.Text, content, Object.assign(Object.assign({}, defaultProps), {
    style: _reactNative.StyleSheet.flatten([style, defaultProps && defaultProps.style])
  }));
};
var Input = function (_React$Component) {
  (0, _inherits2.default)(Input, _React$Component);
  var _super = _createSuper(Input);
  function Input() {
    var _this;
    (0, _classCallCheck2.default)(this, Input);
    _this = _super.apply(this, arguments);
    _this.shakeAnimationValue = new _reactNative.Animated.Value(0);
    _this.shake = function () {
      var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this),
        shakeAnimationValue = _assertThisInitialize.shakeAnimationValue;
      shakeAnimationValue.setValue(0);
      _reactNative.Animated.timing(shakeAnimationValue, {
        duration: 375,
        toValue: 3,
        easing: _reactNative.Easing.bounce,
        useNativeDriver: true
      }).start();
    };
    return _this;
  }
  (0, _createClass2.default)(Input, [{
    key: "focus",
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      this.input.blur();
    }
  }, {
    key: "clear",
    value: function clear() {
      this.input.clear();
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      return this.input.isFocused();
    }
  }, {
    key: "setNativeProps",
    value: function setNativeProps(nativeProps) {
      this.input.setNativeProps(nativeProps);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _a, _b, _c, _d, _e;
      var _f = this.props,
        containerStyle = _f.containerStyle,
        disabled = _f.disabled,
        disabledInputStyle = _f.disabledInputStyle,
        inputContainerStyle = _f.inputContainerStyle,
        leftIcon = _f.leftIcon,
        leftIconContainerStyle = _f.leftIconContainerStyle,
        rightIcon = _f.rightIcon,
        rightIconContainerStyle = _f.rightIconContainerStyle,
        _f$InputComponent = _f.InputComponent,
        InputComponent = _f$InputComponent === void 0 ? _reactNative.TextInput : _f$InputComponent,
        inputStyle = _f.inputStyle,
        errorProps = _f.errorProps,
        errorStyle = _f.errorStyle,
        errorMessage = _f.errorMessage,
        label = _f.label,
        labelStyle = _f.labelStyle,
        labelProps = _f.labelProps,
        theme = _f.theme,
        _f$renderErrorMessage = _f.renderErrorMessage,
        renderErrorMessage = _f$renderErrorMessage === void 0 ? true : _f$renderErrorMessage,
        style = _f.style,
        attributes = __rest(_f, ["containerStyle", "disabled", "disabledInputStyle", "inputContainerStyle", "leftIcon", "leftIconContainerStyle", "rightIcon", "rightIconContainerStyle", "InputComponent", "inputStyle", "errorProps", "errorStyle", "errorMessage", "label", "labelStyle", "labelProps", "theme", "renderErrorMessage", "style"]);
      var translateX = this.shakeAnimationValue.interpolate({
        inputRange: [0, 0.5, 1, 1.5, 2, 2.5, 3],
        outputRange: [0, -15, 0, 15, 0, -15, 0]
      });
      var hideErrorMessage = !renderErrorMessage && !errorMessage;
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, containerStyle]),
        children: [renderText(label, Object.assign({
          style: labelStyle
        }, labelProps), Object.assign({
          fontSize: 16,
          color: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.grey3
        }, _reactNative.Platform.select({
          android: Object.assign({}, _config.fonts.android.bold),
          default: {
            fontWeight: 'bold'
          }
        }))), (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
          style: _reactNative.StyleSheet.flatten([{
            flexDirection: 'row',
            borderBottomWidth: 1,
            alignItems: 'center',
            borderColor: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.grey3
          }, inputContainerStyle, {
            transform: [{
              translateX: translateX
            }]
          }]),
          children: [leftIcon && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: _reactNative.StyleSheet.flatten([styles.iconContainer, leftIconContainerStyle]),
            children: (0, _helpers.renderNode)(_Icon.default, leftIcon)
          }), (0, _jsxRuntime.jsx)(InputComponent, _objectSpread({
            testID: "RNE__Input__text-input",
            underlineColorAndroid: "transparent",
            editable: !disabled,
            ref: function ref(_ref) {
              _this2.input = _ref;
            },
            style: _reactNative.StyleSheet.flatten([{
              color: (_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.black,
              fontSize: 18,
              flex: 1,
              minHeight: 40
            }, inputStyle, disabled && styles.disabledInput, disabled && disabledInputStyle, style]),
            placeholderTextColor: (_d = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _d === void 0 ? void 0 : _d.grey3
          }, (0, _helpers.patchWebProps)(attributes))), rightIcon && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: _reactNative.StyleSheet.flatten([styles.iconContainer, rightIconContainerStyle]),
            children: (0, _helpers.renderNode)(_Icon.default, rightIcon)
          })]
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, _objectSpread(_objectSpread({}, errorProps), {}, {
          style: _reactNative.StyleSheet.flatten([{
            margin: 5,
            fontSize: 12,
            color: (_e = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _e === void 0 ? void 0 : _e.error
          }, errorStyle && errorStyle, hideErrorMessage && {
            height: 0,
            margin: 0,
            padding: 0
          }]),
          children: errorMessage
        }))]
      });
    }
  }]);
  return Input;
}(_react.default.Component);
exports.Input = Input;
var styles = _reactNative.StyleSheet.create({
  container: {
    width: '100%',
    paddingHorizontal: 10
  },
  disabledInput: {
    opacity: 0.5
  },
  iconContainer: {
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    paddingRight: 4,
    marginVertical: 4
  }
});
var _default = (0, _config.withTheme)(Input, 'Input');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9oZWxwZXJzIiwiX2NvbmZpZyIsIl9JY29uIiwiX2pzeFJ1bnRpbWUiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkyIiwiZGVmYXVsdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mMiIsInJlc3VsdCIsIk5ld1RhcmdldCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiY2FsbCIsIl9fcmVzdCIsInMiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJpbmRleE9mIiwiaSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwicmVuZGVyVGV4dCIsImNvbnRlbnQiLCJkZWZhdWx0UHJvcHMiLCJzdHlsZSIsInJlbmRlck5vZGUiLCJUZXh0IiwiYXNzaWduIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJJbnB1dCIsIl9SZWFjdCRDb21wb25lbnQiLCJfaW5oZXJpdHMyIiwiX3N1cGVyIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2syIiwic2hha2VBbmltYXRpb25WYWx1ZSIsIkFuaW1hdGVkIiwiVmFsdWUiLCJzaGFrZSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyIiwic2V0VmFsdWUiLCJ0aW1pbmciLCJkdXJhdGlvbiIsInRvVmFsdWUiLCJlYXNpbmciLCJFYXNpbmciLCJib3VuY2UiLCJ1c2VOYXRpdmVEcml2ZXIiLCJzdGFydCIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsImZvY3VzIiwiaW5wdXQiLCJibHVyIiwiY2xlYXIiLCJpc0ZvY3VzZWQiLCJzZXROYXRpdmVQcm9wcyIsIm5hdGl2ZVByb3BzIiwicmVuZGVyIiwiX3RoaXMyIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJfZSIsIl9mIiwicHJvcHMiLCJjb250YWluZXJTdHlsZSIsImRpc2FibGVkIiwiZGlzYWJsZWRJbnB1dFN0eWxlIiwiaW5wdXRDb250YWluZXJTdHlsZSIsImxlZnRJY29uIiwibGVmdEljb25Db250YWluZXJTdHlsZSIsInJpZ2h0SWNvbiIsInJpZ2h0SWNvbkNvbnRhaW5lclN0eWxlIiwiX2YkSW5wdXRDb21wb25lbnQiLCJJbnB1dENvbXBvbmVudCIsIlRleHRJbnB1dCIsImlucHV0U3R5bGUiLCJlcnJvclByb3BzIiwiZXJyb3JTdHlsZSIsImVycm9yTWVzc2FnZSIsImxhYmVsIiwibGFiZWxTdHlsZSIsImxhYmVsUHJvcHMiLCJ0aGVtZSIsIl9mJHJlbmRlckVycm9yTWVzc2FnZSIsInJlbmRlckVycm9yTWVzc2FnZSIsImF0dHJpYnV0ZXMiLCJ0cmFuc2xhdGVYIiwiaW50ZXJwb2xhdGUiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJoaWRlRXJyb3JNZXNzYWdlIiwianN4cyIsIlZpZXciLCJzdHlsZXMiLCJjb250YWluZXIiLCJjaGlsZHJlbiIsImZvbnRTaXplIiwiY29sb3IiLCJjb2xvcnMiLCJncmV5MyIsIlBsYXRmb3JtIiwic2VsZWN0IiwiYW5kcm9pZCIsImZvbnRzIiwiYm9sZCIsImZvbnRXZWlnaHQiLCJmbGV4RGlyZWN0aW9uIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJhbGlnbkl0ZW1zIiwiYm9yZGVyQ29sb3IiLCJ0cmFuc2Zvcm0iLCJqc3giLCJpY29uQ29udGFpbmVyIiwiSWNvbiIsInRlc3RJRCIsInVuZGVybGluZUNvbG9yQW5kcm9pZCIsImVkaXRhYmxlIiwicmVmIiwiYmxhY2siLCJmbGV4IiwibWluSGVpZ2h0IiwiZGlzYWJsZWRJbnB1dCIsInBsYWNlaG9sZGVyVGV4dENvbG9yIiwicGF0Y2hXZWJQcm9wcyIsIm1hcmdpbiIsImVycm9yIiwiaGVpZ2h0IiwicGFkZGluZyIsIlJlYWN0IiwiQ29tcG9uZW50IiwiZXhwb3J0cyIsImNyZWF0ZSIsIndpZHRoIiwicGFkZGluZ0hvcml6b250YWwiLCJvcGFjaXR5IiwianVzdGlmeUNvbnRlbnQiLCJwYWRkaW5nUmlnaHQiLCJtYXJnaW5WZXJ0aWNhbCIsIl9kZWZhdWx0Iiwid2l0aFRoZW1lIl0sInNvdXJjZXMiOlsiSW5wdXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRleHQsIFZpZXcsIFRleHRJbnB1dCwgQW5pbWF0ZWQsIEVhc2luZywgUGxhdGZvcm0sIFN0eWxlU2hlZXQsIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHJlbmRlck5vZGUsIHBhdGNoV2ViUHJvcHMgfSBmcm9tICcuLi9oZWxwZXJzJztcbmltcG9ydCB7IGZvbnRzLCB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vaWNvbnMvSWNvbic7XG5jb25zdCByZW5kZXJUZXh0ID0gKGNvbnRlbnQsIGRlZmF1bHRQcm9wcywgc3R5bGUpID0+IHJlbmRlck5vZGUoVGV4dCwgY29udGVudCwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0UHJvcHMpLCB7IHN0eWxlOiBTdHlsZVNoZWV0LmZsYXR0ZW4oW3N0eWxlLCBkZWZhdWx0UHJvcHMgJiYgZGVmYXVsdFByb3BzLnN0eWxlXSkgfSkpO1xuY2xhc3MgSW5wdXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnNoYWtlQW5pbWF0aW9uVmFsdWUgPSBuZXcgQW5pbWF0ZWQuVmFsdWUoMCk7XG4gICAgICAgIHRoaXMuc2hha2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHNoYWtlQW5pbWF0aW9uVmFsdWUgfSA9IHRoaXM7XG4gICAgICAgICAgICBzaGFrZUFuaW1hdGlvblZhbHVlLnNldFZhbHVlKDApO1xuICAgICAgICAgICAgLy8gQW5pbWF0aW9uIGR1cmF0aW9uIGJhc2VkIG9uIE1hdGVyaWFsIERlc2lnblxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctY29tbW9uLWR1cmF0aW9uc1xuICAgICAgICAgICAgQW5pbWF0ZWQudGltaW5nKHNoYWtlQW5pbWF0aW9uVmFsdWUsIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMzc1LFxuICAgICAgICAgICAgICAgIHRvVmFsdWU6IDMsXG4gICAgICAgICAgICAgICAgZWFzaW5nOiBFYXNpbmcuYm91bmNlLFxuICAgICAgICAgICAgICAgIHVzZU5hdGl2ZURyaXZlcjogdHJ1ZSxcbiAgICAgICAgICAgIH0pLnN0YXJ0KCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZvY3VzKCkge1xuICAgICAgICB0aGlzLmlucHV0LmZvY3VzKCk7XG4gICAgfVxuICAgIGJsdXIoKSB7XG4gICAgICAgIHRoaXMuaW5wdXQuYmx1cigpO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5pbnB1dC5jbGVhcigpO1xuICAgIH1cbiAgICBpc0ZvY3VzZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlucHV0LmlzRm9jdXNlZCgpO1xuICAgIH1cbiAgICBzZXROYXRpdmVQcm9wcyhuYXRpdmVQcm9wcykge1xuICAgICAgICB0aGlzLmlucHV0LnNldE5hdGl2ZVByb3BzKG5hdGl2ZVByb3BzKTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICBjb25zdCBfZiA9IHRoaXMucHJvcHMsIHsgY29udGFpbmVyU3R5bGUsIGRpc2FibGVkLCBkaXNhYmxlZElucHV0U3R5bGUsIGlucHV0Q29udGFpbmVyU3R5bGUsIGxlZnRJY29uLCBsZWZ0SWNvbkNvbnRhaW5lclN0eWxlLCByaWdodEljb24sIHJpZ2h0SWNvbkNvbnRhaW5lclN0eWxlLCBJbnB1dENvbXBvbmVudCA9IFRleHRJbnB1dCwgaW5wdXRTdHlsZSwgZXJyb3JQcm9wcywgZXJyb3JTdHlsZSwgZXJyb3JNZXNzYWdlLCBsYWJlbCwgbGFiZWxTdHlsZSwgbGFiZWxQcm9wcywgdGhlbWUsIHJlbmRlckVycm9yTWVzc2FnZSA9IHRydWUsIHN0eWxlIH0gPSBfZiwgYXR0cmlidXRlcyA9IF9fcmVzdChfZiwgW1wiY29udGFpbmVyU3R5bGVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkSW5wdXRTdHlsZVwiLCBcImlucHV0Q29udGFpbmVyU3R5bGVcIiwgXCJsZWZ0SWNvblwiLCBcImxlZnRJY29uQ29udGFpbmVyU3R5bGVcIiwgXCJyaWdodEljb25cIiwgXCJyaWdodEljb25Db250YWluZXJTdHlsZVwiLCBcIklucHV0Q29tcG9uZW50XCIsIFwiaW5wdXRTdHlsZVwiLCBcImVycm9yUHJvcHNcIiwgXCJlcnJvclN0eWxlXCIsIFwiZXJyb3JNZXNzYWdlXCIsIFwibGFiZWxcIiwgXCJsYWJlbFN0eWxlXCIsIFwibGFiZWxQcm9wc1wiLCBcInRoZW1lXCIsIFwicmVuZGVyRXJyb3JNZXNzYWdlXCIsIFwic3R5bGVcIl0pO1xuICAgICAgICBjb25zdCB0cmFuc2xhdGVYID0gdGhpcy5zaGFrZUFuaW1hdGlvblZhbHVlLmludGVycG9sYXRlKHtcbiAgICAgICAgICAgIGlucHV0UmFuZ2U6IFswLCAwLjUsIDEsIDEuNSwgMiwgMi41LCAzXSxcbiAgICAgICAgICAgIG91dHB1dFJhbmdlOiBbMCwgLTE1LCAwLCAxNSwgMCwgLTE1LCAwXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGhpZGVFcnJvck1lc3NhZ2UgPSAhcmVuZGVyRXJyb3JNZXNzYWdlICYmICFlcnJvck1lc3NhZ2U7XG4gICAgICAgIHJldHVybiAoPFZpZXcgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbc3R5bGVzLmNvbnRhaW5lciwgY29udGFpbmVyU3R5bGVdKX0+XG4gICAgICAgIHtyZW5kZXJUZXh0KGxhYmVsLCBPYmplY3QuYXNzaWduKHsgc3R5bGU6IGxhYmVsU3R5bGUgfSwgbGFiZWxQcm9wcyksIE9iamVjdC5hc3NpZ24oeyBmb250U2l6ZTogMTYsIGNvbG9yOiAoX2EgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ3JleTMgfSwgUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgICAgICAgICBhbmRyb2lkOiBPYmplY3QuYXNzaWduKHt9LCBmb250cy5hbmRyb2lkLmJvbGQpLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSkpfVxuXG4gICAgICAgIDxBbmltYXRlZC5WaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbVdpZHRoOiAxLFxuICAgICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IChfYiA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5ncmV5MyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0Q29udGFpbmVyU3R5bGUsXG4gICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06IFt7IHRyYW5zbGF0ZVggfV0gfSxcbiAgICAgICAgICAgIF0pfT5cbiAgICAgICAgICB7bGVmdEljb24gJiYgKDxWaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgICAgICAgICBzdHlsZXMuaWNvbkNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICAgICAgbGVmdEljb25Db250YWluZXJTdHlsZSxcbiAgICAgICAgICAgICAgICBdKX0+XG4gICAgICAgICAgICAgIHtyZW5kZXJOb2RlKEljb24sIGxlZnRJY29uKX1cbiAgICAgICAgICAgIDwvVmlldz4pfVxuXG4gICAgICAgICAgPElucHV0Q29tcG9uZW50IHRlc3RJRD1cIlJORV9fSW5wdXRfX3RleHQtaW5wdXRcIiB1bmRlcmxpbmVDb2xvckFuZHJvaWQ9XCJ0cmFuc3BhcmVudFwiIGVkaXRhYmxlPXshZGlzYWJsZWR9IHJlZj17KHJlZikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQgPSByZWY7XG4gICAgICAgICAgICB9fSBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAoX2MgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuYmxhY2ssXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxOCxcbiAgICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0OiA0MCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0U3R5bGUsXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQgJiYgc3R5bGVzLmRpc2FibGVkSW5wdXQsXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQgJiYgZGlzYWJsZWRJbnB1dFN0eWxlLFxuICAgICAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgXSl9IHBsYWNlaG9sZGVyVGV4dENvbG9yPXsoX2QgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuZ3JleTN9IHsuLi5wYXRjaFdlYlByb3BzKGF0dHJpYnV0ZXMpfS8+XG5cbiAgICAgICAgICB7cmlnaHRJY29uICYmICg8VmlldyBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzLmljb25Db250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0SWNvbkNvbnRhaW5lclN0eWxlLFxuICAgICAgICAgICAgICAgIF0pfT5cbiAgICAgICAgICAgICAge3JlbmRlck5vZGUoSWNvbiwgcmlnaHRJY29uKX1cbiAgICAgICAgICAgIDwvVmlldz4pfVxuICAgICAgICA8L0FuaW1hdGVkLlZpZXc+XG5cbiAgICAgICAgPFRleHQgey4uLmVycm9yUHJvcHN9IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiA1LFxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTIsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAoX2UgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuZXJyb3IsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvclN0eWxlICYmIGVycm9yU3R5bGUsXG4gICAgICAgICAgICAgICAgaGlkZUVycm9yTWVzc2FnZSAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdKX0+XG4gICAgICAgICAge2Vycm9yTWVzc2FnZX1cbiAgICAgICAgPC9UZXh0PlxuICAgICAgPC9WaWV3Pik7XG4gICAgfVxufVxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBwYWRkaW5nSG9yaXpvbnRhbDogMTAsXG4gICAgfSxcbiAgICBkaXNhYmxlZElucHV0OiB7XG4gICAgICAgIG9wYWNpdHk6IDAuNSxcbiAgICB9LFxuICAgIGljb25Db250YWluZXI6IHtcbiAgICAgICAgaGVpZ2h0OiA0MCxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiA0LFxuICAgICAgICBtYXJnaW5WZXJ0aWNhbDogNCxcbiAgICB9LFxufSk7XG5leHBvcnQgeyBJbnB1dCB9O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKElucHV0LCAnSW5wdXQnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBV0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsUUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksS0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQWlDLElBQUFLLFdBQUEsR0FBQUwsT0FBQTtBQUFBLFNBQUFNLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdB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