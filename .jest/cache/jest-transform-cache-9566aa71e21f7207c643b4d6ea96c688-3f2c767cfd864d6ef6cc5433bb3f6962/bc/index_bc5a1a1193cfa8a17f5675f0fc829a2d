748b645a935f12aa7c3d4271681c32f8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _omit = _interopRequireDefault(require("lodash/omit"));
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _some = _interopRequireDefault(require("lodash/some"));
var _xdate = _interopRequireDefault(require("xdate"));
var _react = _interopRequireWildcard(require("react"));
var _dateutils = require("../../dateutils");
var _services = require("../../services");
var _interface = require("../../interface");
var _basic = _interopRequireDefault(require("./basic"));
var _period = _interopRequireDefault(require("./period"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function areEqual(prevProps, nextProps) {
  var prevPropsWithoutMarkDates = (0, _omit.default)(prevProps, 'marking');
  var nextPropsWithoutMarkDates = (0, _omit.default)(nextProps, 'marking');
  var didPropsChange = (0, _some.default)(prevPropsWithoutMarkDates, function (value, key) {
    return value !== nextPropsWithoutMarkDates[key];
  });
  var isMarkingEqual = (0, _isEqual.default)(prevProps.marking, nextProps.marking);
  return !didPropsChange && isMarkingEqual;
}
var Day = _react.default.memo(function (props) {
  var date = props.date,
    marking = props.marking,
    dayComponent = props.dayComponent,
    markingType = props.markingType;
  var _date = date ? new _xdate.default(date) : undefined;
  var _isToday = (0, _dateutils.isToday)(_date);
  var markingAccessibilityLabel = (0, _react.useMemo)(function () {
    var label = '';
    if (marking) {
      if (marking.accessibilityLabel) {
        return marking.accessibilityLabel;
      }
      if (marking.selected) {
        label += 'selected ';
        if (!marking.marked) {
          label += 'You have no entries for this day ';
        }
      }
      if (marking.marked) {
        label += 'You have entries for this day ';
      }
      if (marking.startingDay) {
        label += 'period start ';
      }
      if (marking.endingDay) {
        label += 'period end ';
      }
      if (marking.disabled || marking.disableTouchEvent) {
        label += 'disabled ';
      }
    }
    return label;
  }, [marking]);
  var getAccessibilityLabel = (0, _react.useMemo)(function () {
    var today = (0, _services.getDefaultLocale)().today || 'today';
    var formatAccessibilityLabel = (0, _services.getDefaultLocale)().formatAccessibilityLabel || 'dddd d MMMM yyyy';
    return `${_isToday ? today : ''} ${_date == null ? void 0 : _date.toString(formatAccessibilityLabel)} ${markingAccessibilityLabel}`;
  }, [_date, marking, _isToday]);
  var Component = dayComponent || (markingType === 'period' ? _period.default : _basic.default);
  var dayComponentProps = dayComponent ? {
    date: (0, _interface.xdateToData)(date || new _xdate.default())
  } : undefined;
  return (0, _jsxRuntime.jsx)(Component, _objectSpread(_objectSpread(_objectSpread({}, props), {}, {
    accessibilityLabel: getAccessibilityLabel
  }, dayComponentProps), {}, {
    children: (0, _dateutils.formatNumbers)(_date == null ? void 0 : _date.getDate())
  }));
}, areEqual);
var _default = Day;
exports.default = _default;
Day.displayName = 'Day';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,