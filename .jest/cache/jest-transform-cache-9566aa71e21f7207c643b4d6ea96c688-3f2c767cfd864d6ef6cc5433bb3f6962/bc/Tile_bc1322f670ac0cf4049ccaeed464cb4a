334bf1102e9b401e191d4c9e853e4f31
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Tile = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Image = _interopRequireDefault(require("../image/Image"));
var _Text = _interopRequireDefault(require("../text/Text"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _FeaturedTile = _interopRequireDefault(require("./FeaturedTile"));
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Tile = function Tile(props) {
  var featured = props.featured,
    imageSrc = props.imageSrc,
    icon = props.icon,
    title = props.title,
    children = props.children,
    caption = props.caption,
    titleStyle = props.titleStyle,
    onPress = props.onPress,
    activeOpacity = props.activeOpacity,
    overlayContainerStyle = props.overlayContainerStyle,
    captionStyle = props.captionStyle,
    iconContainerStyle = props.iconContainerStyle,
    imageContainerStyle = props.imageContainerStyle,
    containerStyle = props.containerStyle,
    contentContainerStyle = props.contentContainerStyle,
    titleNumberOfLines = props.titleNumberOfLines,
    _props$ImageComponent = props.ImageComponent,
    ImageComponent = _props$ImageComponent === void 0 ? _Image.default : _props$ImageComponent,
    _props$imageProps = props.imageProps,
    imageProps = _props$imageProps === void 0 ? {} : _props$imageProps,
    attributes = __rest(props, ["featured", "imageSrc", "icon", "title", "children", "caption", "titleStyle", "onPress", "activeOpacity", "overlayContainerStyle", "captionStyle", "iconContainerStyle", "imageContainerStyle", "containerStyle", "contentContainerStyle", "titleNumberOfLines", "ImageComponent", "imageProps"]);
  var _props$width = props.width,
    width = _props$width === void 0 ? _reactNative.Dimensions.get('window').width : _props$width,
    _props$height = props.height,
    height = _props$height === void 0 ? width * 0.8 : _props$height;
  if (featured) {
    var featuredProps = {
      title: title,
      icon: icon,
      caption: caption,
      imageSrc: imageSrc,
      onPress: onPress,
      activeOpacity: activeOpacity,
      containerStyle: containerStyle,
      imageContainerStyle: imageContainerStyle,
      overlayContainerStyle: overlayContainerStyle,
      titleStyle: titleStyle,
      captionStyle: captionStyle,
      width: width,
      height: height,
      imageProps: imageProps,
      ImageComponent: ImageComponent
    };
    return (0, _jsxRuntime.jsx)(_FeaturedTile.default, _objectSpread({}, featuredProps));
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, _objectSpread(_objectSpread({}, attributes), {}, {
    onPress: onPress,
    activeOpacity: activeOpacity,
    style: _reactNative.StyleSheet.flatten([{
      width: width,
      height: height
    }, containerStyle && containerStyle]),
    children: [(0, _jsxRuntime.jsx)(ImageComponent, _objectSpread(_objectSpread({
      resizeMode: "cover",
      source: imageSrc,
      containerStyle: _reactNative.StyleSheet.flatten([styles.imageContainer, imageContainerStyle && imageContainerStyle]),
      style: Object.assign(Object.assign({}, _reactNative.StyleSheet.absoluteFillObject), {
        alignItems: 'center',
        justifyContent: 'center'
      })
    }, imageProps), {}, {
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle && iconContainerStyle]),
        children: icon && (0, _jsxRuntime.jsx)(_Icon.default, _objectSpread({}, icon))
      })
    })), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([styles.contentContainer, contentContainerStyle && contentContainerStyle]),
      children: [(0, _jsxRuntime.jsx)(_Text.default, {
        testID: "tileTitle",
        h4: !titleStyle || !('fontSize' in titleStyle),
        style: _reactNative.StyleSheet.flatten([styles.text, titleStyle && titleStyle]),
        numberOfLines: titleNumberOfLines,
        children: title
      }), children]
    })]
  }));
};
exports.Tile = Tile;
var styles = _reactNative.StyleSheet.create({
  imageContainer: {
    flex: 2
  },
  text: {
    backgroundColor: 'rgba(0,0,0,0)',
    marginBottom: 5
  },
  contentContainer: {
    paddingTop: 15,
    paddingBottom: 5,
    paddingLeft: 15,
    paddingRight: 15
  },
  iconContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf: 'center'
  }
});
var _default = (0, _config.withTheme)(Tile, 'Tile');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfSW1hZ2UiLCJfVGV4dCIsIl9JY29uIiwiX0ZlYXR1cmVkVGlsZSIsIl9qc3hSdW50aW1lIiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImRlZmF1bHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiX19yZXN0IiwicyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiaSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiVGlsZSIsInByb3BzIiwiZmVhdHVyZWQiLCJpbWFnZVNyYyIsImljb24iLCJ0aXRsZSIsImNoaWxkcmVuIiwiY2FwdGlvbiIsInRpdGxlU3R5bGUiLCJvblByZXNzIiwiYWN0aXZlT3BhY2l0eSIsIm92ZXJsYXlDb250YWluZXJTdHlsZSIsImNhcHRpb25TdHlsZSIsImljb25Db250YWluZXJTdHlsZSIsImltYWdlQ29udGFpbmVyU3R5bGUiLCJjb250YWluZXJTdHlsZSIsImNvbnRlbnRDb250YWluZXJTdHlsZSIsInRpdGxlTnVtYmVyT2ZMaW5lcyIsIl9wcm9wcyRJbWFnZUNvbXBvbmVudCIsIkltYWdlQ29tcG9uZW50IiwiSW1hZ2UiLCJfcHJvcHMkaW1hZ2VQcm9wcyIsImltYWdlUHJvcHMiLCJhdHRyaWJ1dGVzIiwiX3Byb3BzJHdpZHRoIiwid2lkdGgiLCJEaW1lbnNpb25zIiwiZ2V0IiwiX3Byb3BzJGhlaWdodCIsImhlaWdodCIsImZlYXR1cmVkUHJvcHMiLCJqc3giLCJqc3hzIiwiVG91Y2hhYmxlT3BhY2l0eSIsInN0eWxlIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJyZXNpemVNb2RlIiwic291cmNlIiwic3R5bGVzIiwiaW1hZ2VDb250YWluZXIiLCJhc3NpZ24iLCJhYnNvbHV0ZUZpbGxPYmplY3QiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJWaWV3IiwiaWNvbkNvbnRhaW5lciIsImNvbnRlbnRDb250YWluZXIiLCJ0ZXN0SUQiLCJoNCIsInRleHQiLCJudW1iZXJPZkxpbmVzIiwiZXhwb3J0cyIsImNyZWF0ZSIsImZsZXgiLCJiYWNrZ3JvdW5kQ29sb3IiLCJtYXJnaW5Cb3R0b20iLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYWxpZ25TZWxmIiwiX2RlZmF1bHQiLCJ3aXRoVGhlbWUiXSwic291cmNlcyI6WyJUaWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWaWV3LCBTdHlsZVNoZWV0LCBEaW1lbnNpb25zLCBUb3VjaGFibGVPcGFjaXR5LCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IEltYWdlIGZyb20gJy4uL2ltYWdlL0ltYWdlJztcbmltcG9ydCBUZXh0IGZyb20gJy4uL3RleHQvVGV4dCc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29ucy9JY29uJztcbmltcG9ydCBGZWF0dXJlZFRpbGUgZnJvbSAnLi9GZWF0dXJlZFRpbGUnO1xuY29uc3QgVGlsZSA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgZmVhdHVyZWQsIGltYWdlU3JjLCBpY29uLCB0aXRsZSwgY2hpbGRyZW4sIGNhcHRpb24sIHRpdGxlU3R5bGUsIG9uUHJlc3MsIGFjdGl2ZU9wYWNpdHksIG92ZXJsYXlDb250YWluZXJTdHlsZSwgY2FwdGlvblN0eWxlLCBpY29uQ29udGFpbmVyU3R5bGUsIGltYWdlQ29udGFpbmVyU3R5bGUsIGNvbnRhaW5lclN0eWxlLCBjb250ZW50Q29udGFpbmVyU3R5bGUsIHRpdGxlTnVtYmVyT2ZMaW5lcywgSW1hZ2VDb21wb25lbnQgPSBJbWFnZSwgaW1hZ2VQcm9wcyA9IHt9IH0gPSBwcm9wcywgYXR0cmlidXRlcyA9IF9fcmVzdChwcm9wcywgW1wiZmVhdHVyZWRcIiwgXCJpbWFnZVNyY1wiLCBcImljb25cIiwgXCJ0aXRsZVwiLCBcImNoaWxkcmVuXCIsIFwiY2FwdGlvblwiLCBcInRpdGxlU3R5bGVcIiwgXCJvblByZXNzXCIsIFwiYWN0aXZlT3BhY2l0eVwiLCBcIm92ZXJsYXlDb250YWluZXJTdHlsZVwiLCBcImNhcHRpb25TdHlsZVwiLCBcImljb25Db250YWluZXJTdHlsZVwiLCBcImltYWdlQ29udGFpbmVyU3R5bGVcIiwgXCJjb250YWluZXJTdHlsZVwiLCBcImNvbnRlbnRDb250YWluZXJTdHlsZVwiLCBcInRpdGxlTnVtYmVyT2ZMaW5lc1wiLCBcIkltYWdlQ29tcG9uZW50XCIsIFwiaW1hZ2VQcm9wc1wiXSk7XG4gICAgY29uc3QgeyB3aWR0aCA9IERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS53aWR0aCwgaGVpZ2h0ID0gd2lkdGggKiAwLjgsIH0gPSBwcm9wcztcbiAgICBpZiAoZmVhdHVyZWQpIHtcbiAgICAgICAgY29uc3QgZmVhdHVyZWRQcm9wcyA9IHtcbiAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgaWNvbixcbiAgICAgICAgICAgIGNhcHRpb24sXG4gICAgICAgICAgICBpbWFnZVNyYyxcbiAgICAgICAgICAgIG9uUHJlc3MsXG4gICAgICAgICAgICBhY3RpdmVPcGFjaXR5LFxuICAgICAgICAgICAgY29udGFpbmVyU3R5bGUsXG4gICAgICAgICAgICBpbWFnZUNvbnRhaW5lclN0eWxlLFxuICAgICAgICAgICAgb3ZlcmxheUNvbnRhaW5lclN0eWxlLFxuICAgICAgICAgICAgdGl0bGVTdHlsZSxcbiAgICAgICAgICAgIGNhcHRpb25TdHlsZSxcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgaW1hZ2VQcm9wcyxcbiAgICAgICAgICAgIEltYWdlQ29tcG9uZW50LFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gPEZlYXR1cmVkVGlsZSB7Li4uZmVhdHVyZWRQcm9wc30vPjtcbiAgICB9XG4gICAgcmV0dXJuICg8VG91Y2hhYmxlT3BhY2l0eSB7Li4uYXR0cmlidXRlc30gb25QcmVzcz17b25QcmVzc30gYWN0aXZlT3BhY2l0eT17YWN0aXZlT3BhY2l0eX0gc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlICYmIGNvbnRhaW5lclN0eWxlLFxuICAgICAgICBdKX0+XG4gICAgICA8SW1hZ2VDb21wb25lbnQgcmVzaXplTW9kZT1cImNvdmVyXCIgc291cmNlPXtpbWFnZVNyY30gY29udGFpbmVyU3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgICAgICBzdHlsZXMuaW1hZ2VDb250YWluZXIsXG4gICAgICAgICAgICBpbWFnZUNvbnRhaW5lclN0eWxlICYmIGltYWdlQ29udGFpbmVyU3R5bGUsXG4gICAgICAgIF0pfSBzdHlsZT17T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBTdHlsZVNoZWV0LmFic29sdXRlRmlsbE9iamVjdCksIHsgYWxpZ25JdGVtczogJ2NlbnRlcicsIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyB9KX0gey4uLmltYWdlUHJvcHN9PlxuICAgICAgICA8VmlldyBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgIHN0eWxlcy5pY29uQ29udGFpbmVyLFxuICAgICAgICAgICAgaWNvbkNvbnRhaW5lclN0eWxlICYmIGljb25Db250YWluZXJTdHlsZSxcbiAgICAgICAgXSl9PlxuICAgICAgICAgIHtpY29uICYmIDxJY29uIHsuLi5pY29ufS8+fVxuICAgICAgICA8L1ZpZXc+XG4gICAgICA8L0ltYWdlQ29tcG9uZW50PlxuXG4gICAgICA8VmlldyBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgIHN0eWxlcy5jb250ZW50Q29udGFpbmVyLFxuICAgICAgICAgICAgY29udGVudENvbnRhaW5lclN0eWxlICYmIGNvbnRlbnRDb250YWluZXJTdHlsZSxcbiAgICAgICAgXSl9PlxuICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJ0aWxlVGl0bGVcIiBoND17IXRpdGxlU3R5bGUgfHwgISgnZm9udFNpemUnIGluIHRpdGxlU3R5bGUpfSBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtzdHlsZXMudGV4dCwgdGl0bGVTdHlsZSAmJiB0aXRsZVN0eWxlXSl9IG51bWJlck9mTGluZXM9e3RpdGxlTnVtYmVyT2ZMaW5lc30+XG4gICAgICAgICAge3RpdGxlfVxuICAgICAgICA8L1RleHQ+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVmlldz5cbiAgICA8L1RvdWNoYWJsZU9wYWNpdHk+KTtcbn07XG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgaW1hZ2VDb250YWluZXI6IHtcbiAgICAgICAgZmxleDogMixcbiAgICB9LFxuICAgIHRleHQ6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogNSxcbiAgICB9LFxuICAgIGNvbnRlbnRDb250YWluZXI6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogMTUsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDUsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAxNSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAxNSxcbiAgICB9LFxuICAgIGljb25Db250YWluZXI6IHtcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgYWxpZ25TZWxmOiAnY2VudGVyJyxcbiAgICB9LFxufSk7XG5leHBvcnQgeyBUaWxlIH07XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoVGlsZSwgJ1RpbGUnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBV0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUks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