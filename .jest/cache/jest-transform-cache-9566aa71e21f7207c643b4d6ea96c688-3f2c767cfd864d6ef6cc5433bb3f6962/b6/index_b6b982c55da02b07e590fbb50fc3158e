06b93ef2386c1de9dc732be346b5cdd9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports._updatePropsJS = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _JSReanimated = _interopRequireDefault(require("./JSReanimated"));
var _PlatformChecker = require("../PlatformChecker");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var createReactDOMStyle;
var createTransformValue;
if ((0, _PlatformChecker.isWeb)()) {
  try {
    createReactDOMStyle = require('react-native-web/dist/exports/StyleSheet/compiler/createReactDOMStyle').default;
  } catch (e) {}
  try {
    createTransformValue = require('react-native-web/dist/exports/StyleSheet/preprocess').createTransformValue;
  } catch (e) {}
}
var reanimatedJS = new _JSReanimated.default();
global._makeShareableClone = function (c) {
  return c;
};
global._scheduleOnJS = queueMicrotask;
var _updatePropsJS = function _updatePropsJS(updates, viewRef) {
  if (viewRef._component) {
    var component = viewRef._component;
    var _Object$keys$reduce = Object.keys(updates).reduce(function (acc, key) {
        var value = updates[key];
        var index = typeof value === 'function' ? 1 : 0;
        acc[index][key] = value;
        return acc;
      }, [{}, {}]),
      _Object$keys$reduce2 = (0, _slicedToArray2.default)(_Object$keys$reduce, 1),
      rawStyles = _Object$keys$reduce2[0];
    if (typeof component.setNativeProps === 'function') {
      setNativeProps(component, rawStyles);
    } else if (createReactDOMStyle !== undefined && component.style !== undefined) {
      updatePropsDOM(component, rawStyles);
    } else if (Object.keys(component.props).length > 0) {
      Object.keys(component.props).forEach(function (key) {
        if (!rawStyles[key]) {
          return;
        }
        var dashedKey = key.replace(/[A-Z]/g, function (m) {
          return '-' + m.toLowerCase();
        });
        component._touchableNode.setAttribute(dashedKey, rawStyles[key]);
      });
    } else {
      console.warn('It is not possible to manipulate component');
    }
  }
};
exports._updatePropsJS = _updatePropsJS;
var setNativeProps = function setNativeProps(component, style) {
  var _component$setNativeP;
  var previousStyle = component.previousStyle ? component.previousStyle : {};
  var currentStyle = _objectSpread(_objectSpread({}, previousStyle), style);
  component.previousStyle = currentStyle;
  (_component$setNativeP = component.setNativeProps) === null || _component$setNativeP === void 0 ? void 0 : _component$setNativeP.call(component, {
    style: currentStyle
  });
};
var updatePropsDOM = function updatePropsDOM(component, style) {
  var previousStyle = component.previousStyle ? component.previousStyle : {};
  var currentStyle = _objectSpread(_objectSpread({}, previousStyle), style);
  component.previousStyle = currentStyle;
  var domStyle = createReactDOMStyle(currentStyle);
  if (Array.isArray(domStyle.transform) && createTransformValue !== undefined) {
    domStyle.transform = createTransformValue(domStyle.transform);
  }
  for (var key in domStyle) {
    component.style[key] = domStyle[key];
  }
};
var _default = reanimatedJS;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,