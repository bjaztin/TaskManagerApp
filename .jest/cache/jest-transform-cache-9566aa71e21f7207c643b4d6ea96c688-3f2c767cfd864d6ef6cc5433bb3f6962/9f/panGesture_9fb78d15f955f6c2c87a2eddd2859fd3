b1ab335af5e5524d8e78590561358de7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty3 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty3.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PanGesture = void 0;
var _gesture = require("./gesture");
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var _worklet_4341595201848_init_data = {
  code: "function changeEventCalculator(current, previous) {\n  let changePayload;\n  if (previous === undefined) {\n    changePayload = {\n      changeX: current.translationX,\n      changeY: current.translationY\n    };\n  } else {\n    changePayload = {\n      changeX: current.translationX - previous.translationX,\n      changeY: current.translationY - previous.translationY\n    };\n  }\n  return {\n    ...current,\n    ...changePayload\n  };\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/panGesture.js",
  sourceMap: "{\"version\":3,\"names\":[\"changeEventCalculator\",\"current\",\"previous\",\"changePayload\",\"undefined\",\"changeX\",\"translationX\",\"changeY\",\"translationY\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/panGesture.js\"],\"mappings\":\"AAWA,SAAAA,qBAASA,CAAsBC,OAAA,EAAOC,QAAE,EAAQ;EAG9C,IAAIC,aAAa;EAEjB,IAAID,QAAQ,KAAKE,SAAS,EAAE;IAC1BD,aAAa,GAAG;MACdE,OAAO,EAAEJ,OAAO,CAACK,YAAY;MAC7BC,OAAO,EAAEN,OAAO,CAACO;IACnB,CAAC;EACH,CAAC,MAAM;IACLL,aAAa,GAAG;MACdE,OAAO,EAAEJ,OAAO,CAACK,YAAY,GAAGJ,QAAQ,CAACI,YAAY;MACrDC,OAAO,EAAEN,OAAO,CAACO,YAAY,GAAGN,QAAQ,CAACM;IAC3C,CAAC;EACH;EAEA,OAAO;IAAE,GAAGP,OAAO;IACjB,GAAGE;EACL,CAAC;AACH\"}"
};
var changeEventCalculator = function () {
  var _e = [new global.Error(), 1, -27];
  var _f = function _f(current, previous) {
    var changePayload;
    if (previous === undefined) {
      changePayload = {
        changeX: current.translationX,
        changeY: current.translationY
      };
    } else {
      changePayload = {
        changeX: current.translationX - previous.translationX,
        changeY: current.translationY - previous.translationY
      };
    }
    return _objectSpread(_objectSpread({}, current), changePayload);
  };
  _f._closure = {};
  _f.__initData = _worklet_4341595201848_init_data;
  _f.__workletHash = 4341595201848;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
var PanGesture = function (_gesture$ContinousBas) {
  (0, _inherits2.default)(PanGesture, _gesture$ContinousBas);
  var _super = _createSuper(PanGesture);
  function PanGesture() {
    var _this;
    (0, _classCallCheck2.default)(this, PanGesture);
    _this = _super.call(this);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "config", {});
    _this.handlerName = 'PanGestureHandler';
    return _this;
  }
  (0, _createClass2.default)(PanGesture, [{
    key: "activeOffsetY",
    value: function activeOffsetY(offset) {
      if (Array.isArray(offset)) {
        this.config.activeOffsetYStart = offset[0];
        this.config.activeOffsetYEnd = offset[1];
      } else if (offset < 0) {
        this.config.activeOffsetYStart = offset;
      } else {
        this.config.activeOffsetYEnd = offset;
      }
      return this;
    }
  }, {
    key: "activeOffsetX",
    value: function activeOffsetX(offset) {
      if (Array.isArray(offset)) {
        this.config.activeOffsetXStart = offset[0];
        this.config.activeOffsetXEnd = offset[1];
      } else if (offset < 0) {
        this.config.activeOffsetXStart = offset;
      } else {
        this.config.activeOffsetXEnd = offset;
      }
      return this;
    }
  }, {
    key: "failOffsetY",
    value: function failOffsetY(offset) {
      if (Array.isArray(offset)) {
        this.config.failOffsetYStart = offset[0];
        this.config.failOffsetYEnd = offset[1];
      } else if (offset < 0) {
        this.config.failOffsetYStart = offset;
      } else {
        this.config.failOffsetYEnd = offset;
      }
      return this;
    }
  }, {
    key: "failOffsetX",
    value: function failOffsetX(offset) {
      if (Array.isArray(offset)) {
        this.config.failOffsetXStart = offset[0];
        this.config.failOffsetXEnd = offset[1];
      } else if (offset < 0) {
        this.config.failOffsetXStart = offset;
      } else {
        this.config.failOffsetXEnd = offset;
      }
      return this;
    }
  }, {
    key: "minPointers",
    value: function minPointers(_minPointers) {
      this.config.minPointers = _minPointers;
      return this;
    }
  }, {
    key: "maxPointers",
    value: function maxPointers(_maxPointers) {
      this.config.maxPointers = _maxPointers;
      return this;
    }
  }, {
    key: "minDistance",
    value: function minDistance(distance) {
      this.config.minDist = distance;
      return this;
    }
  }, {
    key: "minVelocity",
    value: function minVelocity(velocity) {
      this.config.minVelocity = velocity;
      return this;
    }
  }, {
    key: "minVelocityX",
    value: function minVelocityX(velocity) {
      this.config.minVelocityX = velocity;
      return this;
    }
  }, {
    key: "minVelocityY",
    value: function minVelocityY(velocity) {
      this.config.minVelocityY = velocity;
      return this;
    }
  }, {
    key: "averageTouches",
    value: function averageTouches(value) {
      this.config.avgTouches = value;
      return this;
    }
  }, {
    key: "enableTrackpadTwoFingerGesture",
    value: function enableTrackpadTwoFingerGesture(value) {
      this.config.enableTrackpadTwoFingerGesture = value;
      return this;
    }
  }, {
    key: "activateAfterLongPress",
    value: function activateAfterLongPress(duration) {
      this.config.activateAfterLongPress = duration;
      return this;
    }
  }, {
    key: "onChange",
    value: function onChange(callback) {
      this.handlers.changeEventCalculator = changeEventCalculator;
      return (0, _get2.default)((0, _getPrototypeOf2.default)(PanGesture.prototype), "onChange", this).call(this, callback);
    }
  }]);
  return PanGesture;
}(_gesture.ContinousBaseGesture);
exports.PanGesture = PanGesture;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,