304ffc8827c382623c97732ec94b6665
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FAB = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _Button = _interopRequireDefault(require("./Button"));
var _config = require("../config");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var FAB = function FAB(_a) {
  var _ref;
  var _b, _c;
  var color = _a.color,
    _a$size = _a.size,
    size = _a$size === void 0 ? 'large' : _a$size,
    _a$visible = _a.visible,
    visible = _a$visible === void 0 ? true : _a$visible,
    disabled = _a.disabled,
    upperCase = _a.upperCase,
    theme = _a.theme,
    style = _a.style,
    titleStyle = _a.titleStyle,
    buttonStyle = _a.buttonStyle,
    containerStyle = _a.containerStyle,
    iconContainerStyle = _a.iconContainerStyle,
    placement = _a.placement,
    props = __rest(_a, ["color", "size", "visible", "disabled", "upperCase", "theme", "style", "titleStyle", "buttonStyle", "containerStyle", "iconContainerStyle", "placement"]);
  var _React$useRef = _react.default.useRef(new _reactNative.Animated.Value(Number(visible))),
    animation = _React$useRef.current;
  _react.default.useEffect(function () {
    _reactNative.Animated.timing(animation, {
      toValue: Number(visible),
      duration: 200,
      useNativeDriver: true
    }).start();
  }, [animation, visible]);
  return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
    style: [{
      opacity: animation,
      transform: [{
        scale: animation
      }]
    }, styles.content, placement && (_ref = {}, (0, _defineProperty2.default)(_ref, placement, 0), (0, _defineProperty2.default)(_ref, "position", 'absolute'), (0, _defineProperty2.default)(_ref, "margin", 16), (0, _defineProperty2.default)(_ref, "bottom", 0), _ref), style],
    children: (0, _jsxRuntime.jsx)(_Button.default, _objectSpread(_objectSpread({
      buttonStyle: _reactNative.StyleSheet.flatten([props.title ? styles.extendedLabel : size === 'small' ? styles.smallFAB : styles.largeFAB, {
        backgroundColor: color || ((_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.secondary)
      }, buttonStyle]),
      iconContainerStyle: [props.title ? {} : size === 'small' ? styles.smallFAB : styles.largeFAB, iconContainerStyle],
      containerStyle: _reactNative.StyleSheet.flatten([styles.container, disabled && styles.disabled, containerStyle]),
      titleStyle: [styles.label, {
        color: (_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.white
      }, upperCase && styles.upperCaseLabel, titleStyle]
    }, props), {}, {
      disabled: disabled,
      theme: theme
    }))
  });
};
exports.FAB = FAB;
var styles = _reactNative.StyleSheet.create({
  container: {
    elevation: 4,
    borderRadius: 28
  },
  largeFAB: {
    height: 56,
    width: 56,
    padding: 16
  },
  smallFAB: {
    height: 40,
    width: 40,
    padding: 8
  },
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 28
  },
  label: {
    marginHorizontal: 8
  },
  upperCaseLabel: {
    textTransform: 'uppercase'
  },
  extendedLabel: {
    height: 48,
    paddingHorizontal: 16
  },
  disabled: {
    elevation: 0
  }
});
var _default = (0, _config.withTheme)(FAB, 'FAB');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,