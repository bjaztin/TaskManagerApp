3fec4e42c874f6b76ae33743a7759803
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _xdate = _interopRequireDefault(require("xdate"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _dateutils = require("../dateutils");
var _interface = require("../interface");
var _dayStateManager = require("../day-state-manager");
var _componentUpdater = require("../componentUpdater");
var _style = _interopRequireDefault(require("./style"));
var _index = _interopRequireDefault(require("../calendar/day/index"));
var _jsxRuntime = require("react/jsx-runtime");
var _this = this;
var _excluded = ["context", "markedDates"],
  _excluded2 = ["context", "markedDates"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function arePropsEqual(prevProps, nextProps) {
  var prevContext = prevProps.context,
    prevMarkings = prevProps.markedDates,
    prevOthers = (0, _objectWithoutProperties2.default)(prevProps, _excluded);
  var nextContext = nextProps.context,
    nextMarkings = nextProps.markedDates,
    nextOthers = (0, _objectWithoutProperties2.default)(nextProps, _excluded2);
  return (0, _isEqual.default)(prevContext, nextContext) && (0, _isEqual.default)(prevMarkings, nextMarkings) && (0, _isEqual.default)(prevOthers, nextOthers);
}
var Week = _react.default.memo(function (props) {
  var theme = props.theme,
    current = props.current,
    firstDay = props.firstDay,
    hideExtraDays = props.hideExtraDays,
    markedDates = props.markedDates,
    onDayPress = props.onDayPress,
    onDayLongPress = props.onDayLongPress,
    propsStyle = props.style,
    _props$numberOfDays = props.numberOfDays,
    numberOfDays = _props$numberOfDays === void 0 ? 1 : _props$numberOfDays,
    timelineLeftInset = props.timelineLeftInset,
    testID = props.testID;
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var disableDaySelection = (0, _react.useMemo)(function () {
    return !!numberOfDays && numberOfDays > 1;
  }, [numberOfDays]);
  var getWeek = (0, _react.useCallback)(function (date) {
    if (date) {
      return (0, _dateutils.getWeekDates)(date, firstDay);
    }
  }, [firstDay]);
  var partialWeekStyle = (0, _react.useMemo)(function () {
    return [style.current.partialWeek, {
      paddingLeft: timelineLeftInset
    }];
  }, [timelineLeftInset]);
  var dayProps = (0, _componentUpdater.extractDayProps)(props);
  var currXdate = (0, _react.useMemo)(function () {
    return (0, _interface.parseDate)(current);
  }, [current]);
  var renderDay = function renderDay(day, id) {
    if (current && hideExtraDays) {
      if (!(0, _dateutils.sameMonth)(day, currXdate)) {
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: style.current.emptyDayContainer
        }, id);
      }
    }
    var dayString = (0, _interface.toMarkingFormat)(day);
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: style.current.dayContainer,
      children: (0, _jsxRuntime.jsx)(_index.default, _objectSpread(_objectSpread({}, dayProps), {}, {
        testID: `${testID}.day_${dayString}`,
        date: dayString,
        state: (0, _dayStateManager.getState)(day, currXdate, props, disableDaySelection),
        marking: disableDaySelection ? _objectSpread(_objectSpread({}, markedDates == null ? void 0 : markedDates[dayString]), {}, {
          disableTouchEvent: true
        }) : markedDates == null ? void 0 : markedDates[dayString],
        onPress: onDayPress,
        onLongPress: onDayLongPress
      }))
    }, id);
  };
  var renderWeek = function renderWeek() {
    var dates = numberOfDays > 1 ? (0, _dateutils.getPartialWeekDates)(current, numberOfDays) : getWeek(current);
    var week = [];
    if (dates) {
      var todayIndex = (dates == null ? void 0 : dates.indexOf((0, _interface.parseDate)(new Date()))) || -1;
      var sliced = dates.slice(todayIndex, numberOfDays);
      var datesToRender = numberOfDays > 1 && todayIndex > -1 ? sliced : dates;
      datesToRender.forEach(function (day, id) {
        var d = day instanceof _xdate.default ? day : new _xdate.default(day);
        week.push(renderDay(d, id));
      }, _this);
    }
    return week;
  };
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: style.current.container,
    testID: `${testID}.week_${current}`,
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [style.current.week, numberOfDays > 1 ? partialWeekStyle : undefined, propsStyle],
      children: renderWeek()
    })
  });
}, arePropsEqual);
var _default = Week;
exports.default = _default;
Week.displayName = 'Week';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,