1a9eb011458765d170246cddb4098695
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectDestructuringEmpty2 = _interopRequireDefault(require("@babel/runtime/helpers/objectDestructuringEmpty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _xdate = _interopRequireDefault(require("xdate"));
var _infiniteList = _interopRequireDefault(require("../../infinite-list"));
var _week = _interopRequireDefault(require("../week"));
var _WeekDaysNames = _interopRequireDefault(require("../../commons/WeekDaysNames"));
var _Context = _interopRequireDefault(require("../../expandableCalendar/Context"));
var _style = _interopRequireDefault(require("../style"));
var _interface = require("../../interface");
var _componentUpdater = require("../../componentUpdater");
var _constants = _interopRequireDefault(require("../../commons/constants"));
var _commons = require("../commons");
var _dateutils = require("../../dateutils");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["allowShadow"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var NUMBER_OF_PAGES = 50;
var DEFAULT_PAGE_HEIGHT = 48;
var WeekCalendar = function WeekCalendar(props) {
  var current = props.current,
    _props$firstDay = props.firstDay,
    firstDay = _props$firstDay === void 0 ? 0 : _props$firstDay,
    markedDates = props.markedDates,
    _props$allowShadow = props.allowShadow,
    allowShadow = _props$allowShadow === void 0 ? true : _props$allowShadow,
    hideDayNames = props.hideDayNames,
    theme = props.theme,
    calendarWidth = props.calendarWidth,
    _props$calendarHeight = props.calendarHeight,
    calendarHeight = _props$calendarHeight === void 0 ? DEFAULT_PAGE_HEIGHT : _props$calendarHeight,
    testID = props.testID;
  var context = (0, _react.useContext)(_Context.default);
  var date = context.date,
    updateSource = context.updateSource;
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var list = (0, _react.useRef)();
  var _useState = (0, _react.useState)(getDatesArray(current || date, firstDay, NUMBER_OF_PAGES)),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    items = _useState2[0],
    setItems = _useState2[1];
  var extraData = {
    current: current,
    date: context.date,
    firstDay: firstDay
  };
  var containerWidth = calendarWidth || _constants.default.screenWidth;
  var weekStyle = (0, _react.useMemo)(function () {
    return [{
      width: containerWidth
    }, props.style];
  }, [containerWidth, props.style]);
  (0, _react.useEffect)(function () {
    if (updateSource !== _commons.UpdateSources.WEEK_SCROLL) {
      var _list$current;
      var pageIndex = items.findIndex(function (item) {
        return (0, _dateutils.sameWeek)(item, date, firstDay);
      });
      (_list$current = list.current) == null ? void 0 : _list$current.scrollToOffset == null ? void 0 : _list$current.scrollToOffset(pageIndex * containerWidth, 0, false);
    }
  }, [date]);
  var onDayPress = (0, _react.useCallback)(function (dateData) {
    context.setDate == null ? void 0 : context.setDate(dateData.dateString, _commons.UpdateSources.DAY_PRESS);
    props.onDayPress == null ? void 0 : props.onDayPress(dateData);
  }, [props.onDayPress]);
  var onPageChange = (0, _react.useCallback)(function (pageIndex, _prevPage, _ref) {
    var scrolledByUser = _ref.scrolledByUser;
    if (scrolledByUser) {
      context == null ? void 0 : context.setDate(items[pageIndex], _commons.UpdateSources.WEEK_SCROLL);
    }
  }, [items]);
  var reloadPages = (0, _react.useCallback)(function (pageIndex) {
    var date = items[pageIndex];
    setItems(getDatesArray(date, firstDay, NUMBER_OF_PAGES));
  }, [items]);
  var renderItem = (0, _react.useCallback)(function (_type, item) {
    var allowShadow = props.allowShadow,
      calendarListProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var _extractCalendarProps = (0, _componentUpdater.extractCalendarProps)(calendarListProps),
      others = Object.assign({}, ((0, _objectDestructuringEmpty2.default)(_extractCalendarProps), _extractCalendarProps));
    var isSameWeek = (0, _dateutils.sameWeek)(item, date, firstDay);
    return (0, _react.createElement)(_week.default, _objectSpread(_objectSpread({}, others), {}, {
      key: item,
      current: isSameWeek ? date : item,
      firstDay: firstDay,
      style: weekStyle,
      markedDates: markedDates,
      onDayPress: onDayPress,
      context: context
    }));
  }, [date, markedDates]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    testID: testID,
    style: [allowShadow && style.current.containerShadow, !hideDayNames && style.current.containerWrapper],
    children: [!hideDayNames && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [style.current.week, style.current.weekCalendar],
      children: (0, _jsxRuntime.jsx)(_WeekDaysNames.default, {
        firstDay: firstDay,
        style: style.current.dayHeader
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      children: (0, _jsxRuntime.jsx)(_infiniteList.default, {
        isHorizontal: true,
        ref: list,
        data: items,
        renderItem: renderItem,
        reloadPages: reloadPages,
        onReachNearEdgeThreshold: Math.round(NUMBER_OF_PAGES * 0.4),
        extendedState: extraData,
        style: style.current.container,
        initialPageIndex: NUMBER_OF_PAGES,
        pageHeight: calendarHeight,
        pageWidth: containerWidth,
        onPageChange: onPageChange,
        scrollViewProps: {
          showsHorizontalScrollIndicator: false
        }
      }, "week-list")
    })]
  });
};
var _default = WeekCalendar;
exports.default = _default;
function getDate(date, firstDay, weekIndex) {
  var d = new _xdate.default(date);
  var dayOfTheWeek = d.getDay();
  if (dayOfTheWeek < firstDay && firstDay > 0) {
    dayOfTheWeek = 7 + dayOfTheWeek;
  }
  var dd = weekIndex === 0 ? d : d.addDays(firstDay - dayOfTheWeek);
  var newDate = dd.addWeeks(weekIndex);
  return (0, _interface.toMarkingFormat)(newDate);
}
function getDatesArray(date, firstDay) {
  var numberOfPages = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NUMBER_OF_PAGES;
  var array = [];
  for (var index = -numberOfPages; index <= numberOfPages; index++) {
    var d = getDate(date, firstDay, index);
    array.push(d);
  }
  return array;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,