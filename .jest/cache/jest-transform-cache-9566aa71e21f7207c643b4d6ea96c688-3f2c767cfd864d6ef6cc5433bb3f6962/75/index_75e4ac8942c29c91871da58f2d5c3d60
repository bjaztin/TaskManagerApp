6a902d6ee00cb7478687a06be9061aad
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _findIndex = _interopRequireDefault(require("lodash/findIndex"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _xdate = _interopRequireDefault(require("xdate"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _componentUpdater = require("../componentUpdater");
var _interface = require("../interface");
var _dateutils = require("../dateutils");
var _constants = _interopRequireDefault(require("../commons/constants"));
var _hooks = require("../hooks");
var _style = _interopRequireDefault(require("./style"));
var _calendar = _interopRequireDefault(require("../calendar"));
var _item = _interopRequireDefault(require("./item"));
var _index = _interopRequireDefault(require("../calendar/header/index"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var CALENDAR_WIDTH = _constants.default.screenWidth;
var CALENDAR_HEIGHT = 360;
var PAST_SCROLL_RANGE = 50;
var FUTURE_SCROLL_RANGE = 50;
var CalendarList = function CalendarList(props, ref) {
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      scrollToDay: function scrollToDay(date, offset, animated) {
        _scrollToDay(date, offset, animated);
      },
      scrollToMonth: function scrollToMonth(date) {
        _scrollToMonth(date);
      }
    };
  });
  var theme = props.theme,
    current = props.current,
    firstDay = props.firstDay,
    markedDates = props.markedDates,
    headerStyle = props.headerStyle,
    onMonthChange = props.onMonthChange,
    onVisibleMonthsChange = props.onVisibleMonthsChange,
    _props$pastScrollRang = props.pastScrollRange,
    pastScrollRange = _props$pastScrollRang === void 0 ? PAST_SCROLL_RANGE : _props$pastScrollRang,
    _props$futureScrollRa = props.futureScrollRange,
    futureScrollRange = _props$futureScrollRa === void 0 ? FUTURE_SCROLL_RANGE : _props$futureScrollRa,
    _props$calendarHeight = props.calendarHeight,
    calendarHeight = _props$calendarHeight === void 0 ? CALENDAR_HEIGHT : _props$calendarHeight,
    _props$calendarWidth = props.calendarWidth,
    calendarWidth = _props$calendarWidth === void 0 ? CALENDAR_WIDTH : _props$calendarWidth,
    calendarStyle = props.calendarStyle,
    _props$animateScroll = props.animateScroll,
    animateScroll = _props$animateScroll === void 0 ? false : _props$animateScroll,
    _props$showScrollIndi = props.showScrollIndicator,
    showScrollIndicator = _props$showScrollIndi === void 0 ? false : _props$showScrollIndi,
    staticHeader = props.staticHeader,
    testID = props.testID,
    propsStyle = props.style,
    onLayout = props.onLayout,
    removeClippedSubviews = props.removeClippedSubviews,
    _props$horizontal = props.horizontal,
    horizontal = _props$horizontal === void 0 ? false : _props$horizontal,
    pagingEnabled = props.pagingEnabled,
    _props$scrollEnabled = props.scrollEnabled,
    scrollEnabled = _props$scrollEnabled === void 0 ? true : _props$scrollEnabled,
    _props$nestedScrollEn = props.nestedScrollEnabled,
    nestedScrollEnabled = _props$nestedScrollEn === void 0 ? true : _props$nestedScrollEn,
    _props$scrollsToTop = props.scrollsToTop,
    scrollsToTop = _props$scrollsToTop === void 0 ? false : _props$scrollsToTop,
    _props$keyExtractor = props.keyExtractor,
    keyExtractor = _props$keyExtractor === void 0 ? function (_, index) {
      return String(index);
    } : _props$keyExtractor,
    keyboardShouldPersistTaps = props.keyboardShouldPersistTaps,
    onScrollBeginDrag = props.onScrollBeginDrag,
    onScrollEndDrag = props.onScrollEndDrag,
    onMomentumScrollBegin = props.onMomentumScrollBegin,
    onMomentumScrollEnd = props.onMomentumScrollEnd,
    onEndReachedThreshold = props.onEndReachedThreshold,
    onEndReached = props.onEndReached;
  var calendarProps = (0, _componentUpdater.extractCalendarProps)(props);
  var headerProps = (0, _componentUpdater.extractHeaderProps)(props);
  var calendarSize = horizontal ? calendarWidth : calendarHeight;
  var _useState = (0, _react.useState)((0, _interface.parseDate)(current)),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentMonth = _useState2[0],
    setCurrentMonth = _useState2[1];
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var list = (0, _react.useRef)();
  var range = (0, _react.useRef)(horizontal ? 1 : 3);
  var initialDate = (0, _react.useRef)((0, _interface.parseDate)(current) || new _xdate.default());
  var visibleMonth = (0, _react.useRef)(currentMonth);
  var items = (0, _react.useMemo)(function () {
    var months = [];
    for (var i = 0; i <= pastScrollRange + futureScrollRange; i++) {
      var _initialDate$current;
      var rangeDate = (_initialDate$current = initialDate.current) == null ? void 0 : _initialDate$current.clone().addMonths(i - pastScrollRange, true);
      months.push(rangeDate);
    }
    return months;
  }, [pastScrollRange, futureScrollRange]);
  var staticHeaderStyle = (0, _react.useMemo)(function () {
    return [style.current.staticHeader, headerStyle];
  }, [headerStyle]);
  var listStyle = (0, _react.useMemo)(function () {
    return [style.current.container, propsStyle];
  }, [propsStyle]);
  var initialDateIndex = (0, _react.useMemo)(function () {
    return (0, _findIndex.default)(items, function (item) {
      var _initialDate$current2;
      return item.toString() === ((_initialDate$current2 = initialDate.current) == null ? void 0 : _initialDate$current2.toString());
    });
  }, [items]);
  var getDateIndex = (0, _react.useCallback)(function (date) {
    return (0, _findIndex.default)(items, function (item) {
      return item.toString() === date.toString();
    });
  }, [items]);
  (0, _react.useEffect)(function () {
    if (current) {
      _scrollToMonth(new _xdate.default(current));
    }
  }, [current]);
  (0, _hooks.useDidUpdate)(function () {
    var currMont = currentMonth == null ? void 0 : currentMonth.clone();
    if (currMont) {
      var data = (0, _interface.xdateToData)(currMont);
      onMonthChange == null ? void 0 : onMonthChange(data);
      onVisibleMonthsChange == null ? void 0 : onVisibleMonthsChange([data]);
    }
  }, [currentMonth]);
  var _scrollToDay = function _scrollToDay(date, offset, animated) {
    var _initialDate$current3;
    var scrollTo = (0, _interface.parseDate)(date);
    var diffMonths = Math.round(initialDate == null ? void 0 : (_initialDate$current3 = initialDate.current) == null ? void 0 : _initialDate$current3.clone().setDate(1).diffMonths(scrollTo == null ? void 0 : scrollTo.clone().setDate(1)));
    var scrollAmount = calendarSize * pastScrollRange + diffMonths * calendarSize + (offset || 0);
    if (!horizontal) {
      var week = 0;
      var days = (0, _dateutils.page)(scrollTo, firstDay);
      for (var i = 0; i < days.length; i++) {
        week = Math.floor(i / 7);
        if ((0, _dateutils.sameDate)(days[i], scrollTo)) {
          scrollAmount += 46 * week;
          break;
        }
      }
    }
    if (scrollAmount !== 0) {
      var _list$current;
      list == null ? void 0 : (_list$current = list.current) == null ? void 0 : _list$current.scrollToOffset({
        offset: scrollAmount,
        animated: animated
      });
    }
  };
  var _scrollToMonth = (0, _react.useCallback)(function (date) {
    var _initialDate$current4;
    var scrollTo = (0, _interface.parseDate)(date);
    var diffMonths = Math.round(initialDate == null ? void 0 : (_initialDate$current4 = initialDate.current) == null ? void 0 : _initialDate$current4.clone().setDate(1).diffMonths(scrollTo == null ? void 0 : scrollTo.clone().setDate(1)));
    var scrollAmount = calendarSize * pastScrollRange + diffMonths * calendarSize;
    if (scrollAmount !== 0) {
      var _list$current2;
      list == null ? void 0 : (_list$current2 = list.current) == null ? void 0 : _list$current2.scrollToOffset({
        offset: scrollAmount,
        animated: animateScroll
      });
    }
  }, [calendarSize]);
  var addMonth = (0, _react.useCallback)(function (count) {
    var day = currentMonth == null ? void 0 : currentMonth.clone().addMonths(count, true);
    if ((0, _dateutils.sameMonth)(day, currentMonth) || getDateIndex(day) === -1) {
      return;
    }
    _scrollToMonth(day);
    setCurrentMonth(day);
  }, [currentMonth, _scrollToMonth]);
  var getMarkedDatesForItem = (0, _react.useCallback)(function (item) {
    if (markedDates && item) {
      for (var _ref of Object.entries(markedDates)) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
        var key = _ref2[0];
        var _ = _ref2[1];
        if ((0, _dateutils.sameMonth)(new _xdate.default(key), new _xdate.default(item))) {
          return markedDates;
        }
      }
    }
  }, [markedDates]);
  var getItemLayout = (0, _react.useCallback)(function (_, index) {
    return {
      length: calendarSize,
      offset: calendarSize * index,
      index: index
    };
  }, []);
  var isDateInRange = (0, _react.useCallback)(function (date) {
    for (var i = -range.current; i <= range.current; i++) {
      var newMonth = currentMonth == null ? void 0 : currentMonth.clone().addMonths(i, true);
      if ((0, _dateutils.sameMonth)(date, newMonth)) {
        return true;
      }
    }
    return false;
  }, [currentMonth]);
  var renderItem = (0, _react.useCallback)(function (_ref3) {
    var item = _ref3.item;
    var dateString = (0, _interface.toMarkingFormat)(item);
    var _dateString$split = dateString.split('-'),
      _dateString$split2 = (0, _slicedToArray2.default)(_dateString$split, 2),
      year = _dateString$split2[0],
      month = _dateString$split2[1];
    var testId = `${testID}.item_${year}-${month}`;
    return (0, _jsxRuntime.jsx)(_item.default, _objectSpread(_objectSpread({}, calendarProps), {}, {
      testID: testId,
      markedDates: getMarkedDatesForItem(item),
      item: item,
      style: calendarStyle,
      horizontal: horizontal,
      calendarWidth: calendarWidth,
      calendarHeight: calendarHeight,
      scrollToMonth: _scrollToMonth,
      visible: isDateInRange(item)
    }));
  }, [horizontal, calendarStyle, calendarWidth, testID, getMarkedDatesForItem, isDateInRange, calendarProps]);
  var renderStaticHeader = function renderStaticHeader() {
    if (staticHeader && horizontal) {
      return (0, _jsxRuntime.jsx)(_index.default, _objectSpread(_objectSpread({}, headerProps), {}, {
        testID: `${testID}.staticHeader`,
        style: staticHeaderStyle,
        month: currentMonth,
        addMonth: addMonth,
        accessibilityElementsHidden: true,
        importantForAccessibility: 'no-hide-descendants'
      }));
    }
  };
  var viewabilityConfig = (0, _react.useRef)({
    viewAreaCoveragePercentThreshold: 20
  });
  var onViewableItemsChanged = (0, _react.useCallback)(function (_ref4) {
    var _viewableItems$;
    var viewableItems = _ref4.viewableItems;
    var newVisibleMonth = (0, _interface.parseDate)((_viewableItems$ = viewableItems[0]) == null ? void 0 : _viewableItems$.item);
    if (!(0, _dateutils.sameDate)(visibleMonth == null ? void 0 : visibleMonth.current, newVisibleMonth)) {
      visibleMonth.current = newVisibleMonth;
      setCurrentMonth(visibleMonth.current);
    }
  }, []);
  var viewabilityConfigCallbackPairs = (0, _react.useRef)([{
    viewabilityConfig: viewabilityConfig.current,
    onViewableItemsChanged: onViewableItemsChanged
  }]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: style.current.flatListContainer,
    testID: testID,
    children: [(0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      ref: list,
      style: listStyle,
      showsVerticalScrollIndicator: showScrollIndicator,
      showsHorizontalScrollIndicator: showScrollIndicator,
      data: items,
      renderItem: renderItem,
      getItemLayout: getItemLayout,
      initialNumToRender: range.current,
      initialScrollIndex: initialDateIndex,
      viewabilityConfigCallbackPairs: viewabilityConfigCallbackPairs.current,
      testID: `${testID}.list`,
      onLayout: onLayout,
      removeClippedSubviews: removeClippedSubviews,
      pagingEnabled: pagingEnabled,
      scrollEnabled: scrollEnabled,
      scrollsToTop: scrollsToTop,
      horizontal: horizontal,
      keyboardShouldPersistTaps: keyboardShouldPersistTaps,
      keyExtractor: keyExtractor,
      onEndReachedThreshold: onEndReachedThreshold,
      onEndReached: onEndReached,
      nestedScrollEnabled: nestedScrollEnabled,
      onMomentumScrollBegin: onMomentumScrollBegin,
      onMomentumScrollEnd: onMomentumScrollEnd,
      onScrollBeginDrag: onScrollBeginDrag,
      onScrollEndDrag: onScrollEndDrag
    }), renderStaticHeader()]
  });
};
var _default = (0, _react.forwardRef)(CalendarList);
exports.default = _default;
CalendarList.displayName = 'CalendarList';
CalendarList.propTypes = _objectSpread(_objectSpread({}, _calendar.default.propTypes), {}, {
  pastScrollRange: _propTypes.default.number,
  futureScrollRange: _propTypes.default.number,
  calendarWidth: _propTypes.default.number,
  calendarHeight: _propTypes.default.number,
  calendarStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number, _propTypes.default.array]),
  staticHeader: _propTypes.default.bool,
  showScrollIndicator: _propTypes.default.bool,
  animateScroll: _propTypes.default.bool,
  scrollEnabled: _propTypes.default.bool,
  scrollsToTop: _propTypes.default.bool,
  pagingEnabled: _propTypes.default.bool,
  horizontal: _propTypes.default.bool,
  keyboardShouldPersistTaps: _propTypes.default.oneOf(['never', 'always', 'handled']),
  keyExtractor: _propTypes.default.func,
  onEndReachedThreshold: _propTypes.default.number,
  onEndReached: _propTypes.default.func,
  nestedScrollEnabled: _propTypes.default.bool
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,