aac90d5b45ce350766d5fbd413babf3f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Card = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _CardTitle = _interopRequireDefault(require("./CardTitle"));
var _CardDivider = _interopRequireDefault(require("./CardDivider"));
var _CardImage = _interopRequireDefault(require("./CardImage"));
var _CardFeaturedTitle = _interopRequireDefault(require("./CardFeaturedTitle"));
var _CardFeaturedSubtitle = _interopRequireDefault(require("./CardFeaturedSubtitle"));
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Card = function Card(props) {
  var _a, _b;
  var children = props.children,
    containerStyle = props.containerStyle,
    wrapperStyle = props.wrapperStyle,
    theme = props.theme,
    attributes = __rest(props, ["children", "containerStyle", "wrapperStyle", "theme"]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, _objectSpread(_objectSpread({}, attributes), {}, {
    style: _reactNative.StyleSheet.flatten([Object.assign({
      backgroundColor: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.white,
      borderWidth: 1,
      padding: 15,
      margin: 15,
      marginBottom: 0,
      borderColor: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.grey5
    }, _reactNative.Platform.select({
      android: {
        elevation: 1
      },
      default: {
        shadowColor: 'rgba(0,0,0, .2)',
        shadowOffset: {
          height: 0,
          width: 0
        },
        shadowOpacity: 1,
        shadowRadius: 1
      }
    })), containerStyle && containerStyle]),
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([styles.wrapper, wrapperStyle && wrapperStyle]),
      children: children
    })
  }));
};
exports.Card = Card;
var styles = _reactNative.StyleSheet.create({
  wrapper: {
    backgroundColor: 'transparent'
  }
});
var ThemedCard = Object.assign((0, _config.withTheme)(Card, 'Card'), {
  Divider: _CardDivider.default,
  Image: _CardImage.default,
  Title: _CardTitle.default,
  FeaturedTitle: _CardFeaturedTitle.default,
  FeaturedSubtitle: _CardFeaturedSubtitle.default
});
var _default = ThemedCard;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,