abd95ef7831f2d92c0ada996dfa25bfd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = styleConstructor;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactNative = require("react-native");
var defaultStyle = _interopRequireWildcard(require("../style"));
var _constants = _interopRequireDefault(require("../commons/constants"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var LINE_COLOR = '#D8D8D8';
var TIME_LABEL_COLOR = '#AAAAAA';
var EVENT_TEXT_COLOR = '#615B73';
var NOW_INDICATOR_COLOR = 'red';
var UNAVAILABLE_HOURS_BLOCK_COLOR = '#F8F9FA';
function styleConstructor() {
  var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var calendarHeight = arguments.length > 1 ? arguments[1] : undefined;
  var appStyle = _objectSpread(_objectSpread({}, defaultStyle), theme);
  return _reactNative.StyleSheet.create({
    container: _objectSpread({
      backgroundColor: appStyle.calendarBackground
    }, appStyle.timelineContainer),
    contentStyle: _objectSpread(_objectSpread({
      backgroundColor: appStyle.calendarBackground
    }, appStyle.contentStyle), {}, {
      flexDirection: 'row',
      height: calendarHeight + 10
    }),
    line: _objectSpread(_objectSpread({
      height: 1,
      backgroundColor: LINE_COLOR
    }, theme.line), {}, {
      position: 'absolute'
    }),
    verticalLine: _objectSpread(_objectSpread({
      width: 1,
      backgroundColor: LINE_COLOR
    }, appStyle.verticalLine), {}, {
      position: 'absolute',
      height: '105%'
    }),
    nowIndicator: {
      position: 'absolute',
      right: 0
    },
    nowIndicatorLine: _objectSpread(_objectSpread({
      height: 1,
      backgroundColor: NOW_INDICATOR_COLOR
    }, appStyle.nowIndicatorLine), {}, {
      position: 'absolute',
      left: 0,
      right: 0
    }),
    nowIndicatorKnob: _objectSpread(_objectSpread({
      width: 7,
      height: 7,
      borderRadius: 4,
      backgroundColor: NOW_INDICATOR_COLOR
    }, appStyle.nowIndicatorKnob), {}, {
      position: 'absolute',
      left: -3,
      top: -3
    }),
    timeLabel: _objectSpread(_objectSpread({
      color: TIME_LABEL_COLOR,
      fontSize: 10,
      fontWeight: '500',
      fontFamily: _constants.default.isIOS ? 'Helvetica Neue' : 'Roboto',
      paddingLeft: 12,
      textAlign: 'center'
    }, appStyle.timeLabel), {}, {
      position: 'absolute'
    }),
    unavailableHoursBlock: {
      position: 'absolute',
      right: 0,
      backgroundColor: UNAVAILABLE_HOURS_BLOCK_COLOR
    },
    event: _objectSpread(_objectSpread({
      opacity: 1,
      paddingLeft: 4,
      paddingTop: 5,
      paddingBottom: 0,
      backgroundColor: '#F0F4FF',
      borderColor: '#DDE5FD',
      borderWidth: 1
    }, appStyle.event), {}, {
      position: 'absolute',
      flex: 1,
      flexDirection: 'column',
      alignItems: 'flex-start',
      overflow: 'hidden',
      minHeight: 25
    }),
    eventTitle: _objectSpread(_objectSpread({
      color: EVENT_TEXT_COLOR,
      fontWeight: '600'
    }, appStyle.eventTitle), {}, {
      minHeight: 15
    }),
    eventSummary: _objectSpread(_objectSpread({
      color: EVENT_TEXT_COLOR,
      fontSize: 12
    }, appStyle.eventSummary), {}, {
      flexWrap: 'wrap'
    }),
    eventTimes: _objectSpread(_objectSpread({
      marginTop: 3,
      color: EVENT_TEXT_COLOR,
      fontSize: 10,
      fontWeight: 'bold'
    }, appStyle.eventTimes), {}, {
      flexWrap: 'wrap'
    }),
    eventsContainer: {
      flex: 1
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,