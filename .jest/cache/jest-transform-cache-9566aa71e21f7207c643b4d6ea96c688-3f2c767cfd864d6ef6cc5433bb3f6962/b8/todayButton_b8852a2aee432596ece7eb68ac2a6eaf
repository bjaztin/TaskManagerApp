907c37151bd5efd2c1a06b5c0a239fd2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _xdate = _interopRequireDefault(require("xdate"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _services = require("../../services");
var _interface = require("../../interface");
var _dateutils = require("../../dateutils");
var _commons = require("../commons");
var _style = _interopRequireDefault(require("../style"));
var _index = _interopRequireDefault(require("./index"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var TOP_POSITION = 65;
var DOWN_ICON = require("../../img/down.png");
var UP_ICON = require("../../img/up.png");
var TodayButton = function TodayButton(props, ref) {
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      disable: function disable(shouldDisable) {
        _disable(shouldDisable);
      }
    };
  });
  var _props$margin = props.margin,
    margin = _props$margin === void 0 ? 0 : _props$margin,
    _props$disabledOpacit = props.disabledOpacity,
    disabledOpacity = _props$disabledOpacit === void 0 ? 0.3 : _props$disabledOpacit,
    theme = props.theme,
    propsStyle = props.style;
  var _useContext = (0, _react.useContext)(_index.default),
    date = _useContext.date,
    setDate = _useContext.setDate;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    disabled = _useState2[0],
    setDisabled = _useState2[1];
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var state = (0, _dateutils.isToday)(date) ? 0 : (0, _dateutils.isPastDate)(date) ? -1 : 1;
  var shouldShow = state !== 0;
  (0, _react.useEffect)(function () {
    if (shouldShow) {
      setButtonIcon(getButtonIcon());
    }
    animatePosition();
  }, [state]);
  (0, _react.useEffect)(function () {
    if (!shouldShow) {
      return;
    }
    animateOpacity();
  }, [disabled]);
  var _disable = function _disable(shouldDisable) {
    if (shouldDisable !== disabled) {
      setDisabled(shouldDisable);
    }
  };
  var getFormattedLabel = function getFormattedLabel() {
    var todayStr = (0, _services.getDefaultLocale)().today || _commons.todayString;
    var today = todayStr.charAt(0).toUpperCase() + todayStr.slice(1);
    return today;
  };
  var today = (0, _react.useRef)(getFormattedLabel());
  var getButtonIcon = function getButtonIcon() {
    if (shouldShow) {
      return state === 1 ? UP_ICON : DOWN_ICON;
    }
  };
  var _useState3 = (0, _react.useState)(getButtonIcon()),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    buttonIcon = _useState4[0],
    setButtonIcon = _useState4[1];
  var buttonY = (0, _react.useRef)(new _reactNative.Animated.Value(margin ? -margin : -TOP_POSITION));
  var opacity = (0, _react.useRef)(new _reactNative.Animated.Value(1));
  var getPositionAnimation = function getPositionAnimation() {
    var toValue = state === 0 ? TOP_POSITION : -margin || -TOP_POSITION;
    return {
      toValue: toValue,
      tension: 30,
      friction: 8,
      useNativeDriver: true
    };
  };
  var getOpacityAnimation = function getOpacityAnimation() {
    return {
      toValue: disabled ? disabledOpacity : 1,
      duration: 500,
      useNativeDriver: true
    };
  };
  var animatePosition = function animatePosition() {
    var animationData = getPositionAnimation();
    _reactNative.Animated.spring(buttonY.current, _objectSpread({}, animationData)).start();
  };
  var animateOpacity = function animateOpacity() {
    var animationData = getOpacityAnimation();
    _reactNative.Animated.timing(opacity.current, _objectSpread({}, animationData)).start();
  };
  var getTodayDate = function getTodayDate() {
    return (0, _interface.toMarkingFormat)(new _xdate.default());
  };
  var onPress = (0, _react.useCallback)(function () {
    setDate(getTodayDate(), _commons.UpdateSources.TODAY_PRESS);
  }, [setDate]);
  return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
    style: [style.current.todayButtonContainer, {
      transform: [{
        translateY: buttonY.current
      }]
    }],
    children: (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      style: [style.current.todayButton, propsStyle],
      onPress: onPress,
      disabled: disabled,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Animated.Image, {
        style: [style.current.todayButtonImage, {
          opacity: opacity.current
        }],
        source: buttonIcon
      }), (0, _jsxRuntime.jsx)(_reactNative.Animated.Text, {
        allowFontScaling: false,
        style: [style.current.todayButtonText, {
          opacity: opacity.current
        }],
        children: today.current
      })]
    })
  });
};
var _default = (0, _react.forwardRef)(TodayButton);
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,