75ce17b66892a4740a9f6a90f4fe2cde
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterConfig = filterConfig;
exports.findNodeHandle = findNodeHandle;
exports.scheduleFlushOperations = scheduleFlushOperations;
exports.baseGestureHandlerWithMonitorProps = exports.baseGestureHandlerProps = void 0;
var _reactNative = require("react-native");
var _handlersRegistry = require("./handlersRegistry");
var _utils = require("../utils");
var _RNGestureHandlerModule = _interopRequireDefault(require("../RNGestureHandlerModule"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var commonProps = ['id', 'enabled', 'shouldCancelWhenOutside', 'hitSlop', 'cancelsTouchesInView', 'userSelect'];
var componentInteractionProps = ['waitFor', 'simultaneousHandlers'];
var baseGestureHandlerProps = [].concat(commonProps, componentInteractionProps, ['onBegan', 'onFailed', 'onCancelled', 'onActivated', 'onEnded', 'onGestureEvent', 'onHandlerStateChange']);
exports.baseGestureHandlerProps = baseGestureHandlerProps;
var baseGestureHandlerWithMonitorProps = [].concat(commonProps, ['needsPointerData', 'manualActivation']);
exports.baseGestureHandlerWithMonitorProps = baseGestureHandlerWithMonitorProps;
function isConfigParam(param, name) {
  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';
}
function filterConfig(props, validProps) {
  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var filteredConfig = _objectSpread({}, defaults);
  for (var key of validProps) {
    var value = props[key];
    if (isConfigParam(value, key)) {
      if (key === 'simultaneousHandlers' || key === 'waitFor') {
        value = transformIntoHandlerTags(props[key]);
      } else if (key === 'hitSlop' && typeof value !== 'object') {
        value = {
          top: value,
          left: value,
          bottom: value,
          right: value
        };
      }
      filteredConfig[key] = value;
    }
  }
  return filteredConfig;
}
function transformIntoHandlerTags(handlerIDs) {
  handlerIDs = (0, _utils.toArray)(handlerIDs);
  if (_reactNative.Platform.OS === 'web') {
    return handlerIDs.map(function (_ref) {
      var current = _ref.current;
      return current;
    }).filter(function (handle) {
      return handle;
    });
  }
  return handlerIDs.map(function (handlerID) {
    var _handlerID$current;
    return _handlersRegistry.handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;
  }).filter(function (handlerTag) {
    return handlerTag > 0;
  });
}
function findNodeHandle(node) {
  if (_reactNative.Platform.OS === 'web') {
    return node;
  }
  return (0, _reactNative.findNodeHandle)(node);
}
var flushOperationsScheduled = false;
function scheduleFlushOperations() {
  if (!flushOperationsScheduled) {
    flushOperationsScheduled = true;
    queueMicrotask(function () {
      _RNGestureHandlerModule.default.flushOperations();
      flushOperationsScheduled = false;
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,