0310ac9d8e83ceef0831bd3998d5d1f2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {};
exports.default = void 0;
var Animated = _interopRequireWildcard(require("./Animated"));
var _global = _interopRequireDefault(require("./reanimated2/js-reanimated/global"));
var _reanimated = require("./reanimated2");
Object.keys(_reanimated).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _reanimated[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _reanimated[key];
    }
  });
});
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
if (!_global.default) {
  console.error('[Reanimated] Unable to initialize global objects for web.');
}
var _default = Animated;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBbmltYXRlZCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nbG9iYWwiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3JlYW5pbWF0ZWQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9leHBvcnROYW1lcyIsImV4cG9ydHMiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVzYyIsInNldCIsIndlYkdsb2JhbElzSW5pdGlhbGl6ZWQiLCJjb25zb2xlIiwiZXJyb3IiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFuaW1hdGVkIGZyb20gJy4vQW5pbWF0ZWQnO1xuaW1wb3J0IHdlYkdsb2JhbElzSW5pdGlhbGl6ZWQgZnJvbSAnLi9yZWFuaW1hdGVkMi9qcy1yZWFuaW1hdGVkL2dsb2JhbCc7XG5pZiAoIXdlYkdsb2JhbElzSW5pdGlhbGl6ZWQpIHtcbiAgLyogXG4gICAgYHdlYkdsb2JhbElzSW5pdGlhbGl6ZWRgIHNob3VsZCBhbHdheXMgYmUgYHRydWVgLCBcbiAgICBidXQgd2UgbmVlZCB0byB1c2UgYHdlYkdsb2JhbElzSW5pdGlhbGl6ZWRgIHNvbWV3aGVyZSB0byBlbnN1cmUgZnVuY3Rpb24gZXhlY3V0aW9uLCBcbiAgICBpbiBhbm90aGVyIHdheSwgdGhlIGJ1bmRsZXIgY2FuIHJlbW92ZSB1bnVzZWQgdmFyaWFibGVzLiBcbiAgKi9cbiAgY29uc29sZS5lcnJvcignW1JlYW5pbWF0ZWRdIFVuYWJsZSB0byBpbml0aWFsaXplIGdsb2JhbCBvYmplY3RzIGZvciB3ZWIuJyk7XG59XG5cbmV4cG9ydCAqIGZyb20gJy4vcmVhbmltYXRlZDInO1xuZXhwb3J0IGRlZmF1bHQgQW5pbWF0ZWQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFFBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQVVBLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUFBSSxNQUFBLENBQUFDLElBQUEsQ0FBQUYsV0FBQSxFQUFBRyxPQUFBLFdBQUFDLEdBQUE7RUFBQSxJQUFBQSxHQUFBLGtCQUFBQSxHQUFBO0VBQUEsSUFBQUgsTUFBQSxDQUFBSSxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBQyxZQUFBLEVBQUFKLEdBQUE7RUFBQSxJQUFBQSxHQUFBLElBQUFLLE9BQUEsSUFBQUEsT0FBQSxDQUFBTCxHQUFBLE1BQUFKLFdBQUEsQ0FBQUksR0FBQTtFQUFBSCxNQUFBLENBQUFTLGNBQUEsQ0FBQUQsT0FBQSxFQUFBTCxHQUFBO0lBQUFPLFVBQUE7SUFBQUMsR0FBQSxXQUFBQSxJQUFBO01BQUEsT0FBQVosV0FBQSxDQUFBSSxHQUFBO0lBQUE7RUFBQTtBQUFBO0FBQTZCLFNBQUFTLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBbEIsd0JBQUFzQixHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9BQUEsRUFBQUYsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQSxZQUFBRyxLQUFBLENBQUFULEdBQUEsQ0FBQU0sR0FBQSxTQUFBSyxNQUFBLFdBQUFDLHFCQUFBLEdBQUF2QixNQUFBLENBQUFTLGNBQUEsSUFBQVQsTUFBQSxDQUFBd0Isd0JBQUEsV0FBQXJCLEdBQUEsSUFBQWMsR0FBQSxRQUFBZCxHQUFBLGtCQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFXLEdBQUEsRUFBQWQsR0FBQSxTQUFBc0IsSUFBQSxHQUFBRixxQkFBQSxHQUFBdkIsTUFBQSxDQUFBd0Isd0JBQUEsQ0FBQVAsR0FBQSxFQUFBZCxHQUFBLGNBQUFzQixJQUFBLEtBQUFBLElBQUEsQ0FBQWQsR0FBQSxJQUFBYyxJQUFBLENBQUFDLEdBQUEsS0FBQTFCLE1BQUEsQ0FBQVMsY0FBQSxDQUFBYSxNQUFBLEVBQUFuQixHQUFBLEVBQUFzQixJQUFBLFlBQUFILE1BQUEsQ0FBQW5CLEdBQUEsSUFBQWMsR0FBQSxDQUFBZCxHQUFBLFNBQUFtQixNQUFBLENBQUFILE9BQUEsR0FBQUYsR0FBQSxNQUFBRyxLQUFBLElBQUFBLEtBQUEsQ0FBQU0sR0FBQSxDQUFBVCxHQUFBLEVBQUFLLE1BQUEsWUFBQUEsTUFBQTtBQVQ3QixJQUFJLENBQUNLLGVBQXNCLEVBQUU7RUFNM0JDLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLDJEQUEyRCxDQUFDO0FBQzVFO0FBQUEsSUFBQUMsUUFBQSxHQUdlcEMsUUFBUTtBQUFBYyxPQUFBLENBQUFXLE9BQUEsR0FBQVcsUUFBQSJ9