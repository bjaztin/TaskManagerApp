786719f12ea9c766f2f3c8d195012ab7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _SignOut = _interopRequireDefault(require("../../../src/components/TaskScreenFeatures/SignOut"));
var _jsxRuntime = require("react/jsx-runtime");
describe("SignOut Component", function () {
  it("renders correctly", function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SignOut.default, {
        navigation: {
          navigate: jest.fn()
        }
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    var logoutButton = getByTestId("logout");
    expect(logoutButton).toBeTruthy();
  });
  it("Open the modal when SignOut icon is pressed", function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SignOut.default, {
        navigation: {
          navigate: jest.fn()
        }
      })),
      getByText = _render2.getByText,
      getByTestId = _render2.getByTestId;
    var modal = getByTestId("signOutmodal");
    expect(modal).toBeTruthy();
    var logoutButton = getByTestId("logout");
    _reactNative.fireEvent.press(logoutButton);
    expect(modal).toBeTruthy();
  });
  it("Close the modal when the Cancel button is pressed", function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SignOut.default, {
        navigation: {
          navigate: jest.fn()
        }
      })),
      getByText = _render3.getByText,
      getByTestId = _render3.getByTestId;
    var logoutButton = getByTestId("logout");
    _reactNative.fireEvent.press(logoutButton);
    var modal = getByTestId("signOutmodal");
    expect(modal).toBeTruthy();
    var cancelButton = getByTestId("cancel");
    _reactNative.fireEvent.press(cancelButton);
    expect(modal).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9TaWduT3V0IiwiX2pzeFJ1bnRpbWUiLCJkZXNjcmliZSIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJqZXN0IiwiZm4iLCJnZXRCeVRleHQiLCJnZXRCeVRlc3RJZCIsImxvZ291dEJ1dHRvbiIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyMiIsIm1vZGFsIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJfcmVuZGVyMyIsImNhbmNlbEJ1dHRvbiJdLCJzb3VyY2VzIjpbIlNpZ25PdXQudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IFNpZ25PdXQgZnJvbSBcIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1Rhc2tTY3JlZW5GZWF0dXJlcy9TaWduT3V0XCI7XG5cbmRlc2NyaWJlKFwiU2lnbk91dCBDb21wb25lbnRcIiwgKCkgPT4ge1xuICBpdChcInJlbmRlcnMgY29ycmVjdGx5XCIsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxTaWduT3V0IG5hdmlnYXRpb249e3sgbmF2aWdhdGU6IGplc3QuZm4oKSB9fSAvPlxuICAgICk7XG5cbiAgICBjb25zdCBsb2dvdXRCdXR0b24gPSBnZXRCeVRlc3RJZChcImxvZ291dFwiKTtcbiAgICBleHBlY3QobG9nb3V0QnV0dG9uKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KFwiT3BlbiB0aGUgbW9kYWwgd2hlbiBTaWduT3V0IGljb24gaXMgcHJlc3NlZFwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8U2lnbk91dCBuYXZpZ2F0aW9uPXt7IG5hdmlnYXRlOiBqZXN0LmZuKCkgfX0gLz5cbiAgICApO1xuXG4gICAgLy9TaG93IG1vZGFsXG4gICAgY29uc3QgbW9kYWwgPSBnZXRCeVRlc3RJZChcInNpZ25PdXRtb2RhbFwiKTtcbiAgICBleHBlY3QobW9kYWwpLnRvQmVUcnV0aHkoKTtcblxuICAgIC8vcHJlc3NlZCB0aGUgbG9nb3V0IGJ1dHRvblxuICAgIGNvbnN0IGxvZ291dEJ1dHRvbiA9IGdldEJ5VGVzdElkKFwibG9nb3V0XCIpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhsb2dvdXRCdXR0b24pO1xuICAgIGV4cGVjdChtb2RhbCkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdChcIkNsb3NlIHRoZSBtb2RhbCB3aGVuIHRoZSBDYW5jZWwgYnV0dG9uIGlzIHByZXNzZWRcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPFNpZ25PdXQgbmF2aWdhdGlvbj17eyBuYXZpZ2F0ZTogamVzdC5mbigpIH19IC8+XG4gICAgKTtcblxuICAgIGNvbnN0IGxvZ291dEJ1dHRvbiA9IGdldEJ5VGVzdElkKFwibG9nb3V0XCIpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhsb2dvdXRCdXR0b24pO1xuXG4gICAgLy8gc2hvdyBtb2RhbFxuICAgIGNvbnN0IG1vZGFsID0gZ2V0QnlUZXN0SWQoXCJzaWduT3V0bW9kYWxcIik7XG4gICAgZXhwZWN0KG1vZGFsKS50b0JlVHJ1dGh5KCk7XG5cbiAgICBjb25zdCBjYW5jZWxCdXR0b24gPSBnZXRCeVRlc3RJZChcImNhbmNlbFwiKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoY2FuY2VsQnV0dG9uKTtcbiAgICBleHBlY3QobW9kYWwpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbn0pO1xuIl0sIm1h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