7f2042498a9e3f46c4bbafd35de36446
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KNOB_CONTAINER_HEIGHT = exports.HEADER_HEIGHT = void 0;
exports.default = styleConstructor;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactNative = require("react-native");
var defaultStyle = _interopRequireWildcard(require("../style"));
var _constants = _interopRequireDefault(require("../commons/constants"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var HEADER_HEIGHT = 68;
exports.HEADER_HEIGHT = HEADER_HEIGHT;
var KNOB_CONTAINER_HEIGHT = 24;
exports.KNOB_CONTAINER_HEIGHT = KNOB_CONTAINER_HEIGHT;
function styleConstructor() {
  var _theme$stylesheet, _theme$stylesheet$exp;
  var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var appStyle = _objectSpread(_objectSpread({}, defaultStyle), theme);
  return _reactNative.StyleSheet.create(_objectSpread({
    containerShadow: _objectSpread({
      backgroundColor: appStyle.calendarBackground
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: '#858F96',
        shadowOpacity: 0.25,
        shadowRadius: 10,
        shadowOffset: {
          height: 2,
          width: 0
        },
        zIndex: 99
      },
      android: {
        elevation: 3
      }
    })),
    containerWrapper: {
      paddingBottom: 6
    },
    container: {
      backgroundColor: appStyle.calendarBackground
    },
    knobContainer: {
      position: 'absolute',
      left: 0,
      right: 0,
      height: KNOB_CONTAINER_HEIGHT,
      bottom: 0,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: appStyle.calendarBackground
    },
    knob: {
      width: 40,
      height: 4,
      borderRadius: 3,
      backgroundColor: appStyle.expandableKnobColor
    },
    sectionText: {
      fontWeight: 'bold',
      fontSize: 12,
      lineHeight: 16,
      color: '#7a92a5',
      paddingTop: 24,
      paddingBottom: 8,
      paddingLeft: 20,
      paddingRight: 20,
      backgroundColor: appStyle.calendarBackground,
      textAlign: 'left',
      textTransform: 'uppercase'
    },
    header: {
      position: 'absolute',
      left: 0,
      right: 0,
      backgroundColor: appStyle.calendarBackground
    },
    headerTitle: {
      alignSelf: 'center',
      paddingTop: 13,
      paddingBottom: 18,
      fontSize: appStyle.textMonthFontSize,
      fontFamily: appStyle.textMonthFontFamily,
      fontWeight: appStyle.textMonthFontWeight,
      color: appStyle.monthTextColor
    },
    weekDayNames: {
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    dayHeader: {
      width: 32,
      textAlign: 'center',
      fontSize: appStyle.textDayHeaderFontSize,
      fontFamily: appStyle.textDayHeaderFontFamily,
      fontWeight: appStyle.textDayHeaderFontWeight,
      color: appStyle.textSectionTitleColor
    },
    monthView: {
      backgroundColor: appStyle.calendarBackground
    },
    weekContainer: {
      position: 'absolute',
      left: 0,
      right: 0,
      top: HEADER_HEIGHT + (_constants.default.isAndroid ? 8 : 9)
    },
    hidden: {
      opacity: 0
    },
    visible: {
      opacity: 1
    },
    weekCalendar: {
      marginTop: 12,
      marginBottom: -2
    },
    week: {
      marginTop: 7,
      marginBottom: 7,
      paddingRight: 15,
      paddingLeft: 15,
      flexDirection: 'row',
      justifyContent: 'space-around'
    },
    partialWeek: {
      paddingRight: 0
    },
    dayContainer: {
      flex: 1,
      alignItems: 'center'
    },
    emptyDayContainer: {
      flex: 1
    },
    arrowImage: {
      tintColor: appStyle.arrowColor,
      transform: _constants.default.isRTL ? [{
        scaleX: -1
      }] : undefined
    },
    contextWrapper: {
      flex: 1
    },
    todayButtonContainer: {
      alignItems: appStyle.todayButtonPosition === 'right' ? 'flex-end' : 'flex-start',
      position: 'absolute',
      left: 20,
      right: 20,
      bottom: 0
    },
    todayButton: _objectSpread({
      height: _constants.default.isTablet ? 40 : 28,
      paddingHorizontal: _constants.default.isTablet ? 20 : 12,
      borderRadius: _constants.default.isTablet ? 20 : 14,
      flexDirection: appStyle.todayButtonPosition === 'right' ? 'row-reverse' : 'row',
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'white'
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: '#79838A',
        shadowOpacity: 0.3,
        shadowRadius: 14,
        shadowOffset: {
          height: 6,
          width: 0
        }
      },
      android: {
        elevation: 6
      }
    })),
    todayButtonText: {
      color: appStyle.todayButtonTextColor,
      fontSize: _constants.default.isTablet ? appStyle.todayButtonFontSize + 2 : appStyle.todayButtonFontSize,
      fontWeight: appStyle.todayButtonFontWeight,
      fontFamily: appStyle.todayButtonFontFamily
    },
    todayButtonImage: {
      tintColor: appStyle.todayButtonTextColor,
      marginLeft: appStyle.todayButtonPosition === 'right' ? 7 : undefined,
      marginRight: appStyle.todayButtonPosition === 'right' ? undefined : 7
    }
  }, (theme == null ? void 0 : (_theme$stylesheet = theme.stylesheet) == null ? void 0 : (_theme$stylesheet$exp = _theme$stylesheet.expandable) == null ? void 0 : _theme$stylesheet$exp.main) || {}));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,