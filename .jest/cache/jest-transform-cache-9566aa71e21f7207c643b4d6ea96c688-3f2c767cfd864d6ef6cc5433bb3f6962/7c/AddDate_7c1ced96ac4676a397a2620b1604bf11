73df3315b6702b94222755717fbc6000
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactNative = require("react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNativeCalendars = require("react-native-calendars");
var _jsxRuntime = require("react/jsx-runtime");
function cov_5gvmk4ruh() {
  var path = "/Users/bjaztin/Desktop/taskManagerApp/src/components/TaskScreenFeatures/AddDate.js";
  var hash = "b4ec7e1086cfcb6b873bbae6c7b41b02814e5d6e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/bjaztin/Desktop/taskManagerApp/src/components/TaskScreenFeatures/AddDate.js",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 16
        },
        end: {
          line: 43,
          column: 1
        }
      },
      "1": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 23
        },
        end: {
          line: 13,
          column: 6
        }
      },
      "3": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 17,
          column: 6
        }
      },
      "4": {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 42,
          column: 4
        }
      },
      "5": {
        start: {
          line: 27,
          column: 31
        },
        end: {
          line: 27,
          column: 67
        }
      },
      "6": {
        start: {
          line: 47,
          column: 15
        },
        end: {
          line: 55,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 16
          },
          end: {
            line: 5,
            column: 17
          }
        },
        loc: {
          start: {
            line: 5,
            column: 60
          },
          end: {
            line: 43,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 24
          },
          end: {
            line: 7,
            column: 25
          }
        },
        loc: {
          start: {
            line: 7,
            column: 34
          },
          end: {
            line: 18,
            column: 3
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 22
          },
          end: {
            line: 27,
            column: 23
          }
        },
        loc: {
          start: {
            line: 27,
            column: 31
          },
          end: {
            line: 27,
            column: 67
          }
        },
        line: 27
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b4ec7e1086cfcb6b873bbae6c7b41b02814e5d6e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_5gvmk4ruh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_5gvmk4ruh();
cov_5gvmk4ruh().s[0]++;
var AddDate = function AddDate(_ref) {
  var selectedDate = _ref.selectedDate,
    onSelectedDateChange = _ref.onSelectedDateChange;
  cov_5gvmk4ruh().f[0]++;
  cov_5gvmk4ruh().s[1]++;
  var dateFormatter = function dateFormatter(date) {
    cov_5gvmk4ruh().f[1]++;
    var dateFormat = (cov_5gvmk4ruh().s[2]++, new Date(date.timestamp).toLocaleDateString("en-US", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric"
    }));
    cov_5gvmk4ruh().s[3]++;
    return {
      day: dateFormat,
      timestamp: date.timestamp
    };
  };
  cov_5gvmk4ruh().s[4]++;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.calendarContainer,
      children: (0, _jsxRuntime.jsx)(_reactNativeCalendars.Calendar, {
        markedDates: (0, _defineProperty2.default)({}, selectedDate, {
          selected: true,
          selectedColor: "#D58258"
        }),
        onDayPress: function onDayPress(day) {
          cov_5gvmk4ruh().f[2]++;
          cov_5gvmk4ruh().s[5]++;
          return onSelectedDateChange(day.dateString);
        },
        dateFormatter: dateFormatter,
        theme: {
          backgroundColor: "#ffffff",
          calendarBackground: "#ffffff",
          textSectionTitleColor: "#b6c1cd",
          selectedDayBackgroundColor: "#00adf5",
          selectedDayTextColor: "#ffffff",
          todayTextColor: "#D58258",
          dayTextColor: "#2d4150",
          textDisabledColor: "green"
        }
      })
    })
  });
};
var _default = AddDate;
exports.default = _default;
var styles = (cov_5gvmk4ruh().s[6]++, _reactNative.StyleSheet.create({
  container: {
    marginTop: 12
  },
  calendarContainer: {
    borderRadius: 10,
    overflow: "hidden"
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,