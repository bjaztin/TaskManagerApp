{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_defineProperty2","_objectWithoutProperties2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_Platform","_virtualizedLists","React","_interopRequireWildcard","_jsxRuntime","_excluded","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ownKeys","e","r","t","keys","getOwnPropertySymbols","o","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","sham","Proxy","Boolean","valueOf","SectionList","_React$PureComponent","_super","_this","_len","args","Array","_key","concat","_captureRef","ref","_wrapperListRef","scrollToLocation","params","recordInteraction","listRef","getListRef","flashScrollIndicators","getScrollResponder","getScrollableNode","setNativeProps","props","render","_this$props","_stickySectionHeadersEnabled","stickySectionHeadersEnabled","restProps","Platform","OS","jsx","VirtualizedSectionList","getItemCount","items","getItem","index","PureComponent"],"sources":["SectionList.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {ScrollResponderType} from '../Components/ScrollView/ScrollView';\nimport type {\n  ScrollToLocationParamsType,\n  SectionBase as _SectionBase,\n  VirtualizedSectionListProps,\n} from '@react-native/virtualized-lists';\n\nimport Platform from '../Utilities/Platform';\nimport {VirtualizedSectionList} from '@react-native/virtualized-lists';\nimport * as React from 'react';\n\ntype Item = any;\n\nexport type SectionBase<SectionItemT> = _SectionBase<SectionItemT>;\n\ntype RequiredProps<SectionT: SectionBase<any>> = {|\n  /**\n   * The actual data to render, akin to the `data` prop in [`<FlatList>`](https://reactnative.dev/docs/flatlist).\n   *\n   * General shape:\n   *\n   *     sections: $ReadOnlyArray<{\n   *       data: $ReadOnlyArray<SectionItem>,\n   *       renderItem?: ({item: SectionItem, ...}) => ?React.Element<*>,\n   *       ItemSeparatorComponent?: ?ReactClass<{highlighted: boolean, ...}>,\n   *     }>\n   */\n  sections: $ReadOnlyArray<SectionT>,\n|};\n\ntype OptionalProps<SectionT: SectionBase<any>> = {|\n  /**\n   * Default renderer for every item in every section. Can be over-ridden on a per-section basis.\n   */\n  renderItem?: (info: {\n    item: Item,\n    index: number,\n    section: SectionT,\n    separators: {\n      highlight: () => void,\n      unhighlight: () => void,\n      updateProps: (select: 'leading' | 'trailing', newProps: Object) => void,\n      ...\n    },\n    ...\n  }) => null | React.Element<any>,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks item.key, then\n   * falls back to using the index, like react does. Note that this sets keys for each item, but\n   * each overall section still needs its own key.\n   */\n  keyExtractor?: ?(item: Item, index: number) => string,\n  /**\n   * Called once when the scroll position gets within `onEndReachedThreshold` of the rendered\n   * content.\n   */\n  onEndReached?: ?(info: {distanceFromEnd: number, ...}) => void,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n|};\n\nexport type Props<SectionT> = {|\n  ...$Diff<\n    VirtualizedSectionListProps<SectionT>,\n    {\n      getItem: $PropertyType<VirtualizedSectionListProps<SectionT>, 'getItem'>,\n      getItemCount: $PropertyType<\n        VirtualizedSectionListProps<SectionT>,\n        'getItemCount',\n      >,\n      renderItem: $PropertyType<\n        VirtualizedSectionListProps<SectionT>,\n        'renderItem',\n      >,\n      keyExtractor: $PropertyType<\n        VirtualizedSectionListProps<SectionT>,\n        'keyExtractor',\n      >,\n      ...\n    },\n  >,\n  ...RequiredProps<SectionT>,\n  ...OptionalProps<SectionT>,\n|};\n\n/**\n * A performant interface for rendering sectioned lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Configurable viewability callbacks.\n *  - List header support.\n *  - List footer support.\n *  - Item separator support.\n *  - Section header support.\n *  - Section separator support.\n *  - Heterogeneous data and item rendering support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *\n * If you don't need section support and want a simpler interface, use\n * [`<FlatList>`](https://reactnative.dev/docs/flatlist).\n *\n * Simple Examples:\n *\n *     <SectionList\n *       renderItem={({item}) => <ListItem title={item} />}\n *       renderSectionHeader={({section}) => <Header title={section.title} />}\n *       sections={[ // homogeneous rendering between sections\n *         {data: [...], title: ...},\n *         {data: [...], title: ...},\n *         {data: [...], title: ...},\n *       ]}\n *     />\n *\n *     <SectionList\n *       sections={[ // heterogeneous rendering between sections\n *         {data: [...], renderItem: ...},\n *         {data: [...], renderItem: ...},\n *         {data: [...], renderItem: ...},\n *       ]}\n *     />\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate and momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n */\nexport default class SectionList<\n  SectionT: SectionBase<any>,\n> extends React.PureComponent<Props<SectionT>, void> {\n  props: Props<SectionT>;\n\n  /**\n   * Scrolls to the item at the specified `sectionIndex` and `itemIndex` (within the section)\n   * positioned in the viewable area such that `viewPosition` 0 places it at the top (and may be\n   * covered by a sticky header), 1 at the bottom, and 0.5 centered in the middle. `viewOffset` is a\n   * fixed number of pixels to offset the final target position, e.g. to compensate for sticky\n   * headers.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToLocation(params: ScrollToLocationParamsType) {\n    if (this._wrapperListRef != null) {\n      this._wrapperListRef.scrollToLocation(params);\n    }\n  }\n\n  /**\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction() {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    listRef && listRef.recordInteraction();\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    listRef && listRef.flashScrollIndicators();\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder(): ?ScrollResponderType {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    if (listRef) {\n      return listRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode(): any {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    if (listRef) {\n      return listRef.getScrollableNode();\n    }\n  }\n\n  setNativeProps(props: Object) {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    if (listRef) {\n      listRef.setNativeProps(props);\n    }\n  }\n\n  render(): React.Node {\n    const {\n      stickySectionHeadersEnabled: _stickySectionHeadersEnabled,\n      ...restProps\n    } = this.props;\n    const stickySectionHeadersEnabled =\n      _stickySectionHeadersEnabled ?? Platform.OS === 'ios';\n    return (\n      <VirtualizedSectionList\n        {...restProps}\n        stickySectionHeadersEnabled={stickySectionHeadersEnabled}\n        ref={this._captureRef}\n        // $FlowFixMe[missing-local-annot]\n        getItemCount={items => items.length}\n        // $FlowFixMe[missing-local-annot]\n        getItem={(items, index) => items[index]}\n      />\n    );\n  }\n\n  _wrapperListRef: ?React.ElementRef<typeof VirtualizedSectionList>;\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  _captureRef = ref => {\n    this._wrapperListRef = ref;\n  };\n}\n"],"mappings":"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"}