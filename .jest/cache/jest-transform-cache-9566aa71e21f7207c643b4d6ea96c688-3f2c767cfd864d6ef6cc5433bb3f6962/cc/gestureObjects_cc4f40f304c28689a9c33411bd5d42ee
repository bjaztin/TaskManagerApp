ac03e184eeb7955444cc03f6ff088565
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _construct2 = _interopRequireDefault(require("@babel/runtime/helpers/construct"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GestureObjects = void 0;
var _flingGesture = require("./flingGesture");
var _forceTouchGesture = require("./forceTouchGesture");
var _gestureComposition = require("./gestureComposition");
var _longPressGesture = require("./longPressGesture");
var _panGesture = require("./panGesture");
var _pinchGesture = require("./pinchGesture");
var _rotationGesture = require("./rotationGesture");
var _tapGesture = require("./tapGesture");
var _nativeGesture = require("./nativeGesture");
var _manualGesture = require("./manualGesture");
var GestureObjects = {
  Tap: function Tap() {
    return new _tapGesture.TapGesture();
  },
  Pan: function Pan() {
    return new _panGesture.PanGesture();
  },
  Pinch: function Pinch() {
    return new _pinchGesture.PinchGesture();
  },
  Rotation: function Rotation() {
    return new _rotationGesture.RotationGesture();
  },
  Fling: function Fling() {
    return new _flingGesture.FlingGesture();
  },
  LongPress: function LongPress() {
    return new _longPressGesture.LongPressGesture();
  },
  ForceTouch: function ForceTouch() {
    return new _forceTouchGesture.ForceTouchGesture();
  },
  Native: function Native() {
    return new _nativeGesture.NativeGesture();
  },
  Manual: function Manual() {
    return new _manualGesture.ManualGesture();
  },
  Race: function Race() {
    for (var _len = arguments.length, gestures = new Array(_len), _key = 0; _key < _len; _key++) {
      gestures[_key] = arguments[_key];
    }
    return (0, _construct2.default)(_gestureComposition.ComposedGesture, gestures);
  },
  Simultaneous: function Simultaneous() {
    for (var _len2 = arguments.length, gestures = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      gestures[_key2] = arguments[_key2];
    }
    return (0, _construct2.default)(_gestureComposition.SimultaneousGesture, gestures);
  },
  Exclusive: function Exclusive() {
    for (var _len3 = arguments.length, gestures = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      gestures[_key3] = arguments[_key3];
    }
    return (0, _construct2.default)(_gestureComposition.ExclusiveGesture, gestures);
  }
};
exports.GestureObjects = GestureObjects;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmxpbmdHZXN0dXJlIiwicmVxdWlyZSIsIl9mb3JjZVRvdWNoR2VzdHVyZSIsIl9nZXN0dXJlQ29tcG9zaXRpb24iLCJfbG9uZ1ByZXNzR2VzdHVyZSIsIl9wYW5HZXN0dXJlIiwiX3BpbmNoR2VzdHVyZSIsIl9yb3RhdGlvbkdlc3R1cmUiLCJfdGFwR2VzdHVyZSIsIl9uYXRpdmVHZXN0dXJlIiwiX21hbnVhbEdlc3R1cmUiLCJHZXN0dXJlT2JqZWN0cyIsIlRhcCIsIlRhcEdlc3R1cmUiLCJQYW4iLCJQYW5HZXN0dXJlIiwiUGluY2giLCJQaW5jaEdlc3R1cmUiLCJSb3RhdGlvbiIsIlJvdGF0aW9uR2VzdHVyZSIsIkZsaW5nIiwiRmxpbmdHZXN0dXJlIiwiTG9uZ1ByZXNzIiwiTG9uZ1ByZXNzR2VzdHVyZSIsIkZvcmNlVG91Y2giLCJGb3JjZVRvdWNoR2VzdHVyZSIsIk5hdGl2ZSIsIk5hdGl2ZUdlc3R1cmUiLCJNYW51YWwiLCJNYW51YWxHZXN0dXJlIiwiUmFjZSIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJnZXN0dXJlcyIsIkFycmF5IiwiX2tleSIsIl9jb25zdHJ1Y3QyIiwiZGVmYXVsdCIsIkNvbXBvc2VkR2VzdHVyZSIsIlNpbXVsdGFuZW91cyIsIl9sZW4yIiwiX2tleTIiLCJTaW11bHRhbmVvdXNHZXN0dXJlIiwiRXhjbHVzaXZlIiwiX2xlbjMiLCJfa2V5MyIsIkV4Y2x1c2l2ZUdlc3R1cmUiXSwic291cmNlcyI6WyJnZXN0dXJlT2JqZWN0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGbGluZ0dlc3R1cmUgfSBmcm9tICcuL2ZsaW5nR2VzdHVyZSc7XG5pbXBvcnQgeyBGb3JjZVRvdWNoR2VzdHVyZSB9IGZyb20gJy4vZm9yY2VUb3VjaEdlc3R1cmUnO1xuaW1wb3J0IHsgR2VzdHVyZSB9IGZyb20gJy4vZ2VzdHVyZSc7XG5pbXBvcnQge1xuICBDb21wb3NlZEdlc3R1cmUsXG4gIEV4Y2x1c2l2ZUdlc3R1cmUsXG4gIFNpbXVsdGFuZW91c0dlc3R1cmUsXG59IGZyb20gJy4vZ2VzdHVyZUNvbXBvc2l0aW9uJztcbmltcG9ydCB7IExvbmdQcmVzc0dlc3R1cmUgfSBmcm9tICcuL2xvbmdQcmVzc0dlc3R1cmUnO1xuaW1wb3J0IHsgUGFuR2VzdHVyZSB9IGZyb20gJy4vcGFuR2VzdHVyZSc7XG5pbXBvcnQgeyBQaW5jaEdlc3R1cmUgfSBmcm9tICcuL3BpbmNoR2VzdHVyZSc7XG5pbXBvcnQgeyBSb3RhdGlvbkdlc3R1cmUgfSBmcm9tICcuL3JvdGF0aW9uR2VzdHVyZSc7XG5pbXBvcnQgeyBUYXBHZXN0dXJlIH0gZnJvbSAnLi90YXBHZXN0dXJlJztcbmltcG9ydCB7IE5hdGl2ZUdlc3R1cmUgfSBmcm9tICcuL25hdGl2ZUdlc3R1cmUnO1xuaW1wb3J0IHsgTWFudWFsR2VzdHVyZSB9IGZyb20gJy4vbWFudWFsR2VzdHVyZSc7XG5cbmV4cG9ydCBjb25zdCBHZXN0dXJlT2JqZWN0cyA9IHtcbiAgVGFwOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBUYXBHZXN0dXJlKCk7XG4gIH0sXG5cbiAgUGFuOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQYW5HZXN0dXJlKCk7XG4gIH0sXG5cbiAgUGluY2g6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFBpbmNoR2VzdHVyZSgpO1xuICB9LFxuXG4gIFJvdGF0aW9uOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBSb3RhdGlvbkdlc3R1cmUoKTtcbiAgfSxcblxuICBGbGluZzogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgRmxpbmdHZXN0dXJlKCk7XG4gIH0sXG5cbiAgTG9uZ1ByZXNzOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBMb25nUHJlc3NHZXN0dXJlKCk7XG4gIH0sXG5cbiAgRm9yY2VUb3VjaDogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgRm9yY2VUb3VjaEdlc3R1cmUoKTtcbiAgfSxcblxuICBOYXRpdmU6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IE5hdGl2ZUdlc3R1cmUoKTtcbiAgfSxcblxuICBNYW51YWw6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IE1hbnVhbEdlc3R1cmUoKTtcbiAgfSxcblxuICAvKipcbiAgICogQnVpbGRzIGEgY29tcG9zZWQgZ2VzdHVyZSBjb25zaXN0aW5nIG9mIGdlc3R1cmVzIHByb3ZpZGVkIGFzIHBhcmFtZXRlcnMuXG4gICAqIFRoZSBmaXJzdCBvbmUgdGhhdCBiZWNvbWVzIGFjdGl2ZSBjYW5jZWxzIHRoZSByZXN0IG9mIGdlc3R1cmVzLlxuICAgKi9cbiAgUmFjZTogKC4uLmdlc3R1cmVzOiBHZXN0dXJlW10pID0+IHtcbiAgICByZXR1cm4gbmV3IENvbXBvc2VkR2VzdHVyZSguLi5nZXN0dXJlcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhIGNvbXBvc2VkIGdlc3R1cmUgdGhhdCBhbGxvd3MgYWxsIGJhc2UgZ2VzdHVyZXMgdG8gcnVuIHNpbXVsdGFuZW91c2x5LlxuICAgKi9cbiAgU2ltdWx0YW5lb3VzKC4uLmdlc3R1cmVzOiBHZXN0dXJlW10pIHtcbiAgICByZXR1cm4gbmV3IFNpbXVsdGFuZW91c0dlc3R1cmUoLi4uZ2VzdHVyZXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYSBjb21wb3NlZCBnZXN0dXJlIHdoZXJlIG9ubHkgb25lIG9mIHRoZSBwcm92aWRlZCBnZXN0dXJlcyBjYW4gYmVjb21lIGFjdGl2ZS5cbiAgICogUHJpb3JpdHkgaXMgZGVjaWRlZCB0aHJvdWdoIHRoZSBvcmRlciBvZiBnZXN0dXJlczogdGhlIGZpcnN0IG9uZSBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAqIHRoYW4gdGhlIHNlY29uZCBvbmUsIHNlY29uZCBvbmUgaGFzIGhpZ2hlciBwcmlvcml0eSB0aGFuIHRoZSB0aGlyZCBvbmUsIGFuZCBzbyBvbi5cbiAgICogRm9yIGV4YW1wbGUsIHRvIG1ha2UgYSBnZXN0dXJlIHRoYXQgcmVjb2duaXplcyBib3RoIHNpbmdsZSBhbmQgZG91YmxlIHRhcCB5b3UgbmVlZFxuICAgKiB0byBjYWxsIEV4Y2x1c2l2ZShkb3VibGVUYXAsIHNpbmdsZVRhcCkuXG4gICAqL1xuICBFeGNsdXNpdmUoLi4uZ2VzdHVyZXM6IEdlc3R1cmVbXSkge1xuICAgIHJldHVybiBuZXcgRXhjbHVzaXZlR2VzdHVyZSguLi5nZXN0dXJlcyk7XG4gIH0sXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLGFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLGtCQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxtQkFBQSxHQUFBRixPQUFBO0FBS0EsSUFBQUcsaUJBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLGFBQUEsR0FBQUwsT0FBQTtBQUNBLElBQUFNLGdCQUFBLEdBQUFOLE9BQUE7QUFDQSxJQUFBTyxXQUFBLEdBQUFQLE9BQUE7QUFDQSxJQUFBUSxjQUFBLEdBQUFSLE9BQUE7QUFDQSxJQUFBUyxjQUFBLEdBQUFULE9BQUE7QUFFTyxJQUFNVSxjQUFjLEdBQUc7RUFDNUJDLEdBQUcsRUFBRSxTQUFBQSxJQUFBLEVBQU07SUFDVCxPQUFPLElBQUlKLFdBQUEsQ0FBQUssVUFBSixFQUFQO0VBQ0QsQ0FIMkI7RUFLNUJDLEdBQUcsRUFBRSxTQUFBQSxJQUFBLEVBQU07SUFDVCxPQUFPLElBQUlULFdBQUEsQ0FBQVUsVUFBSixFQUFQO0VBQ0QsQ0FQMkI7RUFTNUJDLEtBQUssRUFBRSxTQUFBQSxNQUFBLEVBQU07SUFDWCxPQUFPLElBQUlWLGFBQUEsQ0FBQVcsWUFBSixFQUFQO0VBQ0QsQ0FYMkI7RUFhNUJDLFFBQVEsRUFBRSxTQUFBQSxTQUFBLEVBQU07SUFDZCxPQUFPLElBQUlYLGdCQUFBLENBQUFZLGVBQUosRUFBUDtFQUNELENBZjJCO0VBaUI1QkMsS0FBSyxFQUFFLFNBQUFBLE1BQUEsRUFBTTtJQUNYLE9BQU8sSUFBSXBCLGFBQUEsQ0FBQXFCLFlBQUosRUFBUDtFQUNELENBbkIyQjtFQXFCNUJDLFNBQVMsRUFBRSxTQUFBQSxVQUFBLEVBQU07SUFDZixPQUFPLElBQUlsQixpQkFBQSxDQUFBbUIsZ0JBQUosRUFBUDtFQUNELENBdkIyQjtFQXlCNUJDLFVBQVUsRUFBRSxTQUFBQSxXQUFBLEVBQU07SUFDaEIsT0FBTyxJQUFJdEIsa0JBQUEsQ0FBQXVCLGlCQUFKLEVBQVA7RUFDRCxDQTNCMkI7RUE2QjVCQyxNQUFNLEVBQUUsU0FBQUEsT0FBQSxFQUFNO0lBQ1osT0FBTyxJQUFJakIsY0FBQSxDQUFBa0IsYUFBSixFQUFQO0VBQ0QsQ0EvQjJCO0VBaUM1QkMsTUFBTSxFQUFFLFNBQUFBLE9BQUEsRUFBTTtJQUNaLE9BQU8sSUFBSWxCLGNBQUEsQ0FBQW1CLGFBQUosRUFBUDtFQUNELENBbkMyQjtFQXlDNUJDLElBQUksRUFBRSxTQUFBQSxLQUFBLEVBQTRCO0lBQUEsU0FBQUMsSUFBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBeEJDLFFBQUosT0FBQUMsS0FBQSxDQUFBSixJQUFBLEdBQUFLLElBQUEsTUFBQUEsSUFBQSxHQUFBTCxJQUFBLEVBQUFLLElBQUE7TUFBSUYsUUFBSixDQUFBRSxJQUFBLElBQUFKLFNBQUEsQ0FBQUksSUFBQTtJQUFBO0lBQ0osV0FBQUMsV0FBQSxDQUFBQyxPQUFBLEVBQVduQyxtQkFBQSxDQUFBb0MsZUFBSixFQUF1QkwsUUFBdkI7RUFDUixDQTNDMkI7RUFnRDVCTSxZQUFZLFdBQUFBLGFBQUEsRUFBeUI7SUFBQSxTQUFBQyxLQUFBLEdBQUFULFNBQUEsQ0FBQUMsTUFBQSxFQUFyQkMsUUFBSixPQUFBQyxLQUFBLENBQUFNLEtBQUEsR0FBQUMsS0FBQSxNQUFBQSxLQUFBLEdBQUFELEtBQUEsRUFBQUMsS0FBQTtNQUFJUixRQUFKLENBQUFRLEtBQUEsSUFBQVYsU0FBQSxDQUFBVSxLQUFBO0lBQUE7SUFDVixXQUFBTCxXQUFBLENBQUFDLE9BQUEsRUFBV25DLG1CQUFBLENBQUF3QyxtQkFBSixFQUEyQlQsUUFBM0I7RUFDUixDQWxEMkI7RUEyRDVCVSxTQUFTLFdBQUFBLFVBQUEsRUFBeUI7SUFBQSxTQUFBQyxLQUFBLEdBQUFiLFNBQUEsQ0FBQUMsTUFBQSxFQUFyQkMsUUFBSixPQUFBQyxLQUFBLENBQUFVLEtBQUEsR0FBQUMsS0FBQSxNQUFBQSxLQUFBLEdBQUFELEtBQUEsRUFBQUMsS0FBQTtNQUFJWixRQUFKLENBQUFZLEtBQUEsSUFBQWQsU0FBQSxDQUFBYyxLQUFBO0lBQUE7SUFDUCxXQUFBVCxXQUFBLENBQUFDLE9BQUEsRUFBV25DLG1CQUFBLENBQUE0QyxnQkFBSixFQUF3QmIsUUFBeEI7RUFDUjtBQTdEMkIsQ0FBdkIifQ==