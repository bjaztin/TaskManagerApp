444a56fd0e7c3833e256a89fb51e7aad
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Picker;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _picker = _interopRequireDefault(require("./picker"));
var _utils = require("./utils");
var _constants = require("./constants");
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["value", "locale", "maximumDate", "minimumDate", "minuteInterval", "timeZoneOffsetInMinutes", "timeZoneName", "textColor", "accentColor", "themeVariant", "onChange", "mode", "display", "disabled"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var getDisplaySafe = function getDisplaySafe(display) {
  var majorVersionIOS = parseInt(_reactNative.Platform.Version, 10);
  if (display === _constants.IOS_DISPLAY.inline && majorVersionIOS < 14) {
    return _constants.IOS_DISPLAY.spinner;
  }
  if (majorVersionIOS < 14) {
    return _constants.IOS_DISPLAY.spinner;
  }
  return display;
};
function Picker(_ref) {
  var value = _ref.value,
    locale = _ref.locale,
    maximumDate = _ref.maximumDate,
    minimumDate = _ref.minimumDate,
    minuteInterval = _ref.minuteInterval,
    timeZoneOffsetInMinutes = _ref.timeZoneOffsetInMinutes,
    timeZoneName = _ref.timeZoneName,
    textColor = _ref.textColor,
    accentColor = _ref.accentColor,
    themeVariant = _ref.themeVariant,
    onChange = _ref.onChange,
    _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? _constants.IOS_MODE.date : _ref$mode,
    _ref$display = _ref.display,
    providedDisplay = _ref$display === void 0 ? _constants.IOS_DISPLAY.default : _ref$display,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    other = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  (0, _utils.sharedPropsValidation)({
    value: value,
    timeZoneOffsetInMinutes: timeZoneOffsetInMinutes,
    timeZoneName: timeZoneName
  });
  var display = getDisplaySafe(providedDisplay);
  var _onChange = function _onChange(event) {
    var timestamp = event.nativeEvent.timestamp;
    var unifiedEvent = _objectSpread(_objectSpread({}, event), {}, {
      type: _constants.EVENT_TYPE_SET
    });
    var date = timestamp !== undefined ? new Date(timestamp) : undefined;
    onChange && onChange(unifiedEvent, date);
  };
  var onDismiss = function onDismiss() {
    onChange && onChange({
      type: _constants.EVENT_TYPE_DISMISSED,
      nativeEvent: {
        timestamp: value.getTime(),
        utcOffset: 0
      }
    }, value);
  };
  return (0, _jsxRuntime.jsx)(_picker.default, _objectSpread(_objectSpread({}, other), {}, {
    date: (0, _utils.dateToMilliseconds)(value),
    locale: locale !== null && locale !== '' ? locale : undefined,
    maximumDate: (0, _utils.dateToMilliseconds)(maximumDate),
    minimumDate: (0, _utils.dateToMilliseconds)(minimumDate),
    mode: mode,
    minuteInterval: minuteInterval,
    timeZoneOffsetInMinutes: timeZoneOffsetInMinutes,
    timeZoneName: timeZoneName,
    onChange: _onChange,
    onPickerDismiss: onDismiss,
    textColor: textColor,
    accentColor: accentColor,
    themeVariant: themeVariant,
    onStartShouldSetResponder: function onStartShouldSetResponder() {
      return true;
    },
    onResponderTerminationRequest: function onResponderTerminationRequest() {
      return false;
    },
    displayIOS: display,
    enabled: disabled !== true
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,