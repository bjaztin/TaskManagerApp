5d3f251f4a1dd657dbf69d36557a8249
_getJestObj().mock("@react-native-async-storage/async-storage", function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
_getJestObj().mock("expo-haptics", function () {
  return {
    impactAsync: jest.fn(),
    ImpactFeedbackStyle: {
      Heavy: "Heavy"
    }
  };
});
_getJestObj().mock("../../../src/components/TaskDetail/TaskTagIcon", function () {
  return {};
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _TaskDetails = _interopRequireDefault(require("../../../src/components/TaskDetail/TaskDetails"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("TaskDetails component", function () {
  var taskItem = {
    id: "1",
    task: "This is task",
    note: "This is note",
    url: "https://example1234.com"
  };
  test("Renders task items correctly", (0, _asyncToGenerator2.default)(function* () {
    var onDelete = jest.fn();
    var onImagePress = jest.fn();
    var onToggleComplete = jest.fn();
    var setIsTagPickerVisible = jest.fn();
    var selectedDate = "2023-09-01";
    var selectedTime = new Date("2023-09-01T11:00:00Z");
    var selectedEndTime = new Date("2023-09-01T12:00:00Z");
    var selectedImage = "https://example123.com/image.jpg";
    _asyncStorage.default.getItem.mockResolvedValueOnce(null);
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_TaskDetails.default, {
        item: taskItem,
        onDelete: onDelete,
        onImagePress: onImagePress,
        onToggleComplete: onToggleComplete,
        setIsTagPickerVisible: setIsTagPickerVisible,
        selectedDate: selectedDate,
        selectedTime: selectedTime,
        selectedEndTime: selectedEndTime,
        selectedImage: selectedImage
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    expect(getByText("This is task")).toBeTruthy();
    expect(getByText("This is note")).toBeTruthy();
    expect(getByText("https://example1234.com")).toBeTruthy();
    var completeButton = getByTestId("completeButton");
    expect(completeButton).toBeTruthy();
    _reactNative.fireEvent.press(completeButton);
    expect(onToggleComplete).toHaveBeenCalledWith(taskItem.id);
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith(`completedTask${taskItem.id}`, JSON.stringify(true));
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRJdGVtIiwiamVzdCIsImZuIiwic2V0SXRlbSIsImltcGFjdEFzeW5jIiwiSW1wYWN0RmVlZGJhY2tTdHlsZSIsIkhlYXZ5IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfVGFza0RldGFpbHMiLCJfYXN5bmNTdG9yYWdlIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwidGFza0l0ZW0iLCJpZCIsInRhc2siLCJub3RlIiwidXJsIiwidGVzdCIsImRlZmF1bHQiLCJvbkRlbGV0ZSIsIm9uSW1hZ2VQcmVzcyIsIm9uVG9nZ2xlQ29tcGxldGUiLCJzZXRJc1RhZ1BpY2tlclZpc2libGUiLCJzZWxlY3RlZERhdGUiLCJzZWxlY3RlZFRpbWUiLCJEYXRlIiwic2VsZWN0ZWRFbmRUaW1lIiwic2VsZWN0ZWRJbWFnZSIsIkFzeW5jU3RvcmFnZSIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJpdGVtIiwiZ2V0QnlUZXh0IiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiY29tcGxldGVCdXR0b24iLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VzIjpbIlRhc2tEZXRhaWxzLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcblxuaW1wb3J0IFRhc2tEZXRhaWxzIGZyb20gXCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UYXNrRGV0YWlsL1Rhc2tEZXRhaWxzXCJcbmltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSBcIkByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlXCI7XG5cbi8vIE1vY2sgQXN5bmNTdG9yYWdlXG5qZXN0Lm1vY2soXCJAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZVwiLCAoKSA9PiAoe1xuICBnZXRJdGVtOiBqZXN0LmZuKCksXG4gIHNldEl0ZW06IGplc3QuZm4oKSxcbn0pKTtcblxuLy8gTW9jayBIYXB0aWNzXG5qZXN0Lm1vY2soXCJleHBvLWhhcHRpY3NcIiwgKCkgPT4gKHtcbiAgaW1wYWN0QXN5bmM6IGplc3QuZm4oKSxcbiAgSW1wYWN0RmVlZGJhY2tTdHlsZTogeyBIZWF2eTogXCJIZWF2eVwiIH0sXG59KSk7XG5cbi8vIE1vY2sgVGFza1RhZ0ljb25cbmplc3QubW9jayhcIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1Rhc2tEZXRhaWwvVGFza1RhZ0ljb25cIiwgKCkgPT4gKHt9KSk7XG5cbmRlc2NyaWJlKFwiVGFza0RldGFpbHMgY29tcG9uZW50XCIsICgpID0+IHtcbiAgY29uc3QgdGFza0l0ZW0gPSB7XG4gICAgaWQ6IFwiMVwiLFxuICAgIHRhc2s6IFwiVGhpcyBpcyB0YXNrXCIsXG4gICAgbm90ZTogXCJUaGlzIGlzIG5vdGVcIixcbiAgICB1cmw6IFwiaHR0cHM6Ly9leGFtcGxlMTIzNC5jb21cIixcbiAgfTtcblxuICB0ZXN0KFwiUmVuZGVycyB0YXNrIGl0ZW1zIGNvcnJlY3RseVwiLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gTW9jayBmdW5jdGlvbnMgYW5kIHByb3BzXG4gICAgY29uc3Qgb25EZWxldGUgPSBqZXN0LmZuKCk7XG4gICAgY29uc3Qgb25JbWFnZVByZXNzID0gamVzdC5mbigpO1xuICAgIGNvbnN0IG9uVG9nZ2xlQ29tcGxldGUgPSBqZXN0LmZuKCk7XG4gICAgY29uc3Qgc2V0SXNUYWdQaWNrZXJWaXNpYmxlID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHNlbGVjdGVkRGF0ZSA9IFwiMjAyMy0wOS0wMVwiO1xuICAgIGNvbnN0IHNlbGVjdGVkVGltZSA9IG5ldyBEYXRlKFwiMjAyMy0wOS0wMVQxMTowMDowMFpcIik7XG4gICAgY29uc3Qgc2VsZWN0ZWRFbmRUaW1lID0gbmV3IERhdGUoXCIyMDIzLTA5LTAxVDEyOjAwOjAwWlwiKTtcbiAgICBjb25zdCBzZWxlY3RlZEltYWdlID0gXCJodHRwczovL2V4YW1wbGUxMjMuY29tL2ltYWdlLmpwZ1wiO1xuXG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG51bGwpO1xuXG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8VGFza0RldGFpbHNcbiAgICAgICAgaXRlbT17dGFza0l0ZW19XG4gICAgICAgIG9uRGVsZXRlPXtvbkRlbGV0ZX1cbiAgICAgICAgb25JbWFnZVByZXNzPXtvbkltYWdlUHJlc3N9XG4gICAgICAgIG9uVG9nZ2xlQ29tcGxldGU9e29uVG9nZ2xlQ29tcGxldGV9XG4gICAgICAgIHNldElzVGFnUGlja2VyVmlzaWJsZT17c2V0SXNUYWdQaWNrZXJWaXNpYmxlfVxuICAgICAgICBzZWxlY3RlZERhdGU9e3NlbGVjdGVkRGF0ZX1cbiAgICAgICAgc2VsZWN0ZWRUaW1lPXtzZWxlY3RlZFRpbWV9XG4gICAgICAgIHNlbGVjdGVkRW5kVGltZT17c2VsZWN0ZWRFbmRUaW1lfVxuICAgICAgICBzZWxlY3RlZEltYWdlPXtzZWxlY3RlZEltYWdlfVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgZXhwZWN0KGdldEJ5VGV4dChcIlRoaXMgaXMgdGFza1wiKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoXCJUaGlzIGlzIG5vdGVcIikpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KFwiaHR0cHM6Ly9leGFtcGxlMTIzNC5jb21cIikpLnRvQmVUcnV0aHkoKTtcbiAgXG4gICAgY29uc3QgY29tcGxldGVCdXR0b24gPSBnZXRCeVRlc3RJZChcImNvbXBsZXRlQnV0dG9uXCIpO1xuXG4gICAgZXhwZWN0KGNvbXBsZXRlQnV0dG9uKS50b0JlVHJ1dGh5KCk7XG5cbiAgICBmaXJlRXZlbnQucHJlc3MoY29tcGxldGVCdXR0b24pO1xuXG4gICAgZXhwZWN0KG9uVG9nZ2xlQ29tcGxldGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHRhc2tJdGVtLmlkKTtcblxuICAgIGV4cGVjdChBc3luY1N0b3JhZ2Uuc2V0SXRlbSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBgY29tcGxldGVkVGFzayR7dGFza0l0ZW0uaWR9YCxcbiAgICAgIEpTT04uc3RyaW5naWZ5KHRydWUpXG4gICAgKTtcblxuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBT0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxFQUFFO0VBQUEsT0FBTztJQUM1REMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCQyxPQUFPLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ25CLENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSEosV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFO0VBQUEsT0FBTztJQUMvQkssV0FBVyxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCRyxtQkFBbUIsRUFBRTtNQUFFQyxLQUFLLEVBQUU7SUFBUTtFQUN4QyxDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hSLFdBQUEsR0FBS0MsSUFBSSxtREFBbUQ7RUFBQSxPQUFPLENBQUMsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUFDLElBQUFRLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBbkJ4RSxJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFFQSxJQUFBSSxZQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxhQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBcUUsSUFBQU0sV0FBQSxHQUFBTixPQUFBO0FBQUEsU0FBQVYsWUFBQTtFQUFBLElBQUFpQixRQUFBLEdBQUFQLE9BQUE7SUFBQVAsSUFBQSxHQUFBYyxRQUFBLENBQUFkLElBQUE7RUFBQUgsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUcsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBaUJyRWUsUUFBUSxDQUFDLHVCQUF1QixFQUFFLFlBQU07RUFDdEMsSUFBTUMsUUFBUSxHQUFHO0lBQ2ZDLEVBQUUsRUFBRSxHQUFHO0lBQ1BDLElBQUksRUFBRSxjQUFjO0lBQ3BCQyxJQUFJLEVBQUUsY0FBYztJQUNwQkMsR0FBRyxFQUFFO0VBQ1AsQ0FBQztFQUVEQyxJQUFJLENBQUMsOEJBQThCLE1BQUFiLGtCQUFBLENBQUFjLE9BQUEsRUFBRSxhQUFZO0lBRS9DLElBQU1DLFFBQVEsR0FBR3ZCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDMUIsSUFBTXVCLFlBQVksR0FBR3hCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDOUIsSUFBTXdCLGdCQUFnQixHQUFHekIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUNsQyxJQUFNeUIscUJBQXFCLEdBQUcxQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLElBQU0wQixZQUFZLEdBQUcsWUFBWTtJQUNqQyxJQUFNQyxZQUFZLEdBQUcsSUFBSUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDO0lBQ3JELElBQU1DLGVBQWUsR0FBRyxJQUFJRCxJQUFJLENBQUMsc0JBQXNCLENBQUM7SUFDeEQsSUFBTUUsYUFBYSxHQUFHLGtDQUFrQztJQUV4REMscUJBQVksQ0FBQ2pDLE9BQU8sQ0FBQ2tDLHFCQUFxQixDQUFDLElBQUksQ0FBQztJQUVoRCxJQUFBQyxPQUFBLEdBQW1DLElBQUFDLG1CQUFNLEVBQ3ZDLElBQUF0QixXQUFBLENBQUF1QixHQUFBLEVBQUN6QixZQUFBLENBQUFXLE9BQVc7UUFDVmUsSUFBSSxFQUFFckIsUUFBUztRQUNmTyxRQUFRLEVBQUVBLFFBQVM7UUFDbkJDLFlBQVksRUFBRUEsWUFBYTtRQUMzQkMsZ0JBQWdCLEVBQUVBLGdCQUFpQjtRQUNuQ0MscUJBQXFCLEVBQUVBLHFCQUFzQjtRQUM3Q0MsWUFBWSxFQUFFQSxZQUFhO1FBQzNCQyxZQUFZLEVBQUVBLFlBQWE7UUFDM0JFLGVBQWUsRUFBRUEsZUFBZ0I7UUFDakNDLGFBQWEsRUFBRUE7TUFBYyxDQUM5QixDQUNILENBQUM7TUFaT08sU0FBUyxHQUFBSixPQUFBLENBQVRJLFNBQVM7TUFBRUMsV0FBVyxHQUFBTCxPQUFBLENBQVhLLFdBQVc7SUFjOUJDLE1BQU0sQ0FBQ0YsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0lBQzlDRCxNQUFNLENBQUNGLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUM5Q0QsTUFBTSxDQUFDRixTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUV6RCxJQUFNQyxjQUFjLEdBQUdILFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztJQUVwREMsTUFBTSxDQUFDRSxjQUFjLENBQUMsQ0FBQ0QsVUFBVSxDQUFDLENBQUM7SUFFbkNFLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0YsY0FBYyxDQUFDO0lBRS9CRixNQUFNLENBQUNmLGdCQUFnQixDQUFDLENBQUNvQixvQkFBb0IsQ0FBQzdCLFFBQVEsQ0FBQ0MsRUFBRSxDQUFDO0lBRTFEdUIsTUFBTSxDQUFDUixxQkFBWSxDQUFDOUIsT0FBTyxDQUFDLENBQUMyQyxvQkFBb0IsQ0FDOUMsZ0JBQWU3QixRQUFRLENBQUNDLEVBQUcsRUFBQyxFQUM3QjZCLElBQUksQ0FBQ0MsU0FBUyxDQUFDLElBQUksQ0FDckIsQ0FBQztFQUVILENBQUMsRUFBQztBQUNKLENBQUMsQ0FBQyJ9