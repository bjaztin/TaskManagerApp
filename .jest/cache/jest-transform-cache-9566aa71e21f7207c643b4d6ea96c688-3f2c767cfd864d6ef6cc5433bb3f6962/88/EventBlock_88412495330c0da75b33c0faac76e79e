b75d4b81ecc1a4eb6965da384576c4c1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _xdate = _interopRequireDefault(require("xdate"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var TEXT_LINE_HEIGHT = 17;
var EVENT_DEFAULT_COLOR = '#add8e6';
var EventBlock = function EventBlock(props) {
  var index = props.index,
    event = props.event,
    renderEvent = props.renderEvent,
    onPress = props.onPress,
    format24h = props.format24h,
    styles = props.styles;
  var numberOfLines = Math.floor(event.height / TEXT_LINE_HEIGHT);
  var formatTime = format24h ? 'HH:mm' : 'hh:mm A';
  var eventStyle = (0, _react.useMemo)(function () {
    return {
      left: event.left,
      height: event.height,
      width: event.width,
      top: event.top,
      backgroundColor: event.color ? event.color : EVENT_DEFAULT_COLOR
    };
  }, [event]);
  var _onPress = (0, _react.useCallback)(function () {
    onPress(index);
  }, [index, onPress]);
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
    activeOpacity: 0.9,
    onPress: _onPress,
    style: [styles.event, eventStyle],
    children: renderEvent ? renderEvent(event) : (0, _jsxRuntime.jsxs)(_reactNative.View, {
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        numberOfLines: 1,
        style: styles.eventTitle,
        children: event.title || 'Event'
      }), numberOfLines > 1 ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
        numberOfLines: numberOfLines - 1,
        style: [styles.eventSummary],
        children: event.summary || ' '
      }) : null, numberOfLines > 2 ? (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: styles.eventTimes,
        numberOfLines: 1,
        children: [new _xdate.default(event.start).toString(formatTime), " - ", new _xdate.default(event.end).toString(formatTime)]
      }) : null]
    })
  });
};
var _default = EventBlock;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfeGRhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlYWN0TmF0aXZlIiwiX2pzeFJ1bnRpbWUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiVEVYVF9MSU5FX0hFSUdIVCIsIkVWRU5UX0RFRkFVTFRfQ09MT1IiLCJFdmVudEJsb2NrIiwicHJvcHMiLCJpbmRleCIsImV2ZW50IiwicmVuZGVyRXZlbnQiLCJvblByZXNzIiwiZm9ybWF0MjRoIiwic3R5bGVzIiwibnVtYmVyT2ZMaW5lcyIsIk1hdGgiLCJmbG9vciIsImhlaWdodCIsImZvcm1hdFRpbWUiLCJldmVudFN0eWxlIiwidXNlTWVtbyIsImxlZnQiLCJ3aWR0aCIsInRvcCIsImJhY2tncm91bmRDb2xvciIsImNvbG9yIiwiX29uUHJlc3MiLCJ1c2VDYWxsYmFjayIsImpzeCIsIlRvdWNoYWJsZU9wYWNpdHkiLCJhY3RpdmVPcGFjaXR5Iiwic3R5bGUiLCJjaGlsZHJlbiIsImpzeHMiLCJWaWV3IiwiVGV4dCIsImV2ZW50VGl0bGUiLCJ0aXRsZSIsImV2ZW50U3VtbWFyeSIsInN1bW1hcnkiLCJldmVudFRpbWVzIiwiWERhdGUiLCJzdGFydCIsInRvU3RyaW5nIiwiZW5kIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiRXZlbnRCbG9jay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgWERhdGUgZnJvbSAneGRhdGUnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVmlldywgVGV4dCwgVG91Y2hhYmxlT3BhY2l0eSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5jb25zdCBURVhUX0xJTkVfSEVJR0hUID0gMTc7XG5jb25zdCBFVkVOVF9ERUZBVUxUX0NPTE9SID0gJyNhZGQ4ZTYnO1xuY29uc3QgRXZlbnRCbG9jayA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgaW5kZXgsIGV2ZW50LCByZW5kZXJFdmVudCwgb25QcmVzcywgZm9ybWF0MjRoLCBzdHlsZXMgfSA9IHByb3BzO1xuICAgIC8vIEZpeGluZyB0aGUgbnVtYmVyIG9mIGxpbmVzIGZvciB0aGUgZXZlbnQgdGl0bGUgbWFrZXMgdGhpcyBjYWxjdWxhdGlvbiBlYXNpZXIuXG4gICAgLy8gSG93ZXZlciBpdCB3b3VsZCBtYWtlIHNlbnNlIHRvIG92ZXJmbG93IHRoZSB0aXRsZSB0byBhIG5ldyBsaW5lIGlmIG5lZWRlZFxuICAgIGNvbnN0IG51bWJlck9mTGluZXMgPSBNYXRoLmZsb29yKGV2ZW50LmhlaWdodCAvIFRFWFRfTElORV9IRUlHSFQpO1xuICAgIGNvbnN0IGZvcm1hdFRpbWUgPSBmb3JtYXQyNGggPyAnSEg6bW0nIDogJ2hoOm1tIEEnO1xuICAgIGNvbnN0IGV2ZW50U3R5bGUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IGV2ZW50LmxlZnQsXG4gICAgICAgICAgICBoZWlnaHQ6IGV2ZW50LmhlaWdodCxcbiAgICAgICAgICAgIHdpZHRoOiBldmVudC53aWR0aCxcbiAgICAgICAgICAgIHRvcDogZXZlbnQudG9wLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBldmVudC5jb2xvciA/IGV2ZW50LmNvbG9yIDogRVZFTlRfREVGQVVMVF9DT0xPUlxuICAgICAgICB9O1xuICAgIH0sIFtldmVudF0pO1xuICAgIGNvbnN0IF9vblByZXNzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBvblByZXNzKGluZGV4KTtcbiAgICB9LCBbaW5kZXgsIG9uUHJlc3NdKTtcbiAgICByZXR1cm4gKDxUb3VjaGFibGVPcGFjaXR5IGFjdGl2ZU9wYWNpdHk9ezAuOX0gb25QcmVzcz17X29uUHJlc3N9IHN0eWxlPXtbc3R5bGVzLmV2ZW50LCBldmVudFN0eWxlXX0+XG4gICAgICB7cmVuZGVyRXZlbnQgPyAocmVuZGVyRXZlbnQoZXZlbnQpKSA6ICg8Vmlldz5cbiAgICAgICAgICA8VGV4dCBudW1iZXJPZkxpbmVzPXsxfSBzdHlsZT17c3R5bGVzLmV2ZW50VGl0bGV9PlxuICAgICAgICAgICAge2V2ZW50LnRpdGxlIHx8ICdFdmVudCd9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIHtudW1iZXJPZkxpbmVzID4gMSA/ICg8VGV4dCBudW1iZXJPZkxpbmVzPXtudW1iZXJPZkxpbmVzIC0gMX0gc3R5bGU9e1tzdHlsZXMuZXZlbnRTdW1tYXJ5XX0+XG4gICAgICAgICAgICAgIHtldmVudC5zdW1tYXJ5IHx8ICcgJ31cbiAgICAgICAgICAgIDwvVGV4dD4pIDogbnVsbH1cbiAgICAgICAgICB7bnVtYmVyT2ZMaW5lcyA+IDIgPyAoPFRleHQgc3R5bGU9e3N0eWxlcy5ldmVudFRpbWVzfSBudW1iZXJPZkxpbmVzPXsxfT5cbiAgICAgICAgICAgICAge25ldyBYRGF0ZShldmVudC5zdGFydCkudG9TdHJpbmcoZm9ybWF0VGltZSl9IC0ge25ldyBYRGF0ZShldmVudC5lbmQpLnRvU3RyaW5nKGZvcm1hdFRpbWUpfVxuICAgICAgICAgICAgPC9UZXh0PikgOiBudWxsfVxuICAgICAgICA8L1ZpZXc+KX1cbiAgICA8L1RvdWNoYWJsZU9wYWNpdHk+KTtcbn07XG5leHBvcnQgZGVmYXVsdCBFdmVudEJsb2NrO1xuIl0sIm1hcHBpbmdzIjoiOzs7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