ba6989a667dd38b867cd8db095276a2e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _xdate = _interopRequireDefault(require("xdate"));
var _isEmpty = _interopRequireDefault(require("lodash/isEmpty"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeSwipeGestures = _interopRequireWildcard(require("react-native-swipe-gestures"));
var _constants = _interopRequireDefault(require("../commons/constants"));
var _dateutils = require("../dateutils");
var _interface = require("../interface");
var _dayStateManager = require("../day-state-manager");
var _componentUpdater = require("../componentUpdater");
var _hooks = require("../hooks");
var _style = _interopRequireDefault(require("./style"));
var _header = _interopRequireDefault(require("./header"));
var _index = _interopRequireDefault(require("./day/index"));
var _basic = _interopRequireDefault(require("./day/basic"));
var _jsxRuntime = require("react/jsx-runtime");
var _this = this;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Calendar = function Calendar(props) {
  var initialDate = props.initialDate,
    current = props.current,
    theme = props.theme,
    markedDates = props.markedDates,
    minDate = props.minDate,
    maxDate = props.maxDate,
    allowSelectionOutOfRange = props.allowSelectionOutOfRange,
    onDayPress = props.onDayPress,
    onDayLongPress = props.onDayLongPress,
    onMonthChange = props.onMonthChange,
    onVisibleMonthsChange = props.onVisibleMonthsChange,
    disableMonthChange = props.disableMonthChange,
    enableSwipeMonths = props.enableSwipeMonths,
    hideExtraDays = props.hideExtraDays,
    firstDay = props.firstDay,
    showSixWeeks = props.showSixWeeks,
    displayLoadingIndicator = props.displayLoadingIndicator,
    customHeader = props.customHeader,
    headerStyle = props.headerStyle,
    accessibilityElementsHidden = props.accessibilityElementsHidden,
    importantForAccessibility = props.importantForAccessibility,
    testID = props.testID,
    propsStyle = props.style;
  var _useState = (0, _react.useState)(current || initialDate ? (0, _interface.parseDate)(current || initialDate) : new _xdate.default()),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentMonth = _useState2[0],
    setCurrentMonth = _useState2[1];
  var style = (0, _react.useRef)((0, _style.default)(theme));
  var header = (0, _react.useRef)();
  var weekNumberMarking = (0, _react.useRef)({
    disabled: true,
    disableTouchEvent: true
  });
  (0, _react.useEffect)(function () {
    if (initialDate) {
      setCurrentMonth((0, _interface.parseDate)(initialDate));
    }
  }, [initialDate]);
  (0, _hooks.useDidUpdate)(function () {
    var _currentMonth = currentMonth.clone();
    onMonthChange == null ? void 0 : onMonthChange((0, _interface.xdateToData)(_currentMonth));
    onVisibleMonthsChange == null ? void 0 : onVisibleMonthsChange([(0, _interface.xdateToData)(_currentMonth)]);
  }, [currentMonth]);
  var updateMonth = (0, _react.useCallback)(function (newMonth) {
    if ((0, _dateutils.sameMonth)(newMonth, currentMonth)) {
      return;
    }
    setCurrentMonth(newMonth);
  }, [currentMonth]);
  var addMonth = (0, _react.useCallback)(function (count) {
    var newMonth = currentMonth.clone().addMonths(count, true);
    updateMonth(newMonth);
  }, [currentMonth, updateMonth]);
  var handleDayInteraction = (0, _react.useCallback)(function (date, interaction) {
    var day = new _xdate.default(date.dateString);
    if (allowSelectionOutOfRange || !(minDate && !(0, _dateutils.isGTE)(day, new _xdate.default(minDate))) && !(maxDate && !(0, _dateutils.isLTE)(day, new _xdate.default(maxDate)))) {
      if (!disableMonthChange) {
        updateMonth(day);
      }
      if (interaction) {
        interaction(date);
      }
    }
  }, [minDate, maxDate, allowSelectionOutOfRange, disableMonthChange, updateMonth]);
  var _onDayPress = (0, _react.useCallback)(function (date) {
    if (date) handleDayInteraction(date, onDayPress);
  }, [handleDayInteraction, onDayPress]);
  var onLongPressDay = (0, _react.useCallback)(function (date) {
    if (date) handleDayInteraction(date, onDayLongPress);
  }, [handleDayInteraction, onDayLongPress]);
  var onSwipeLeft = (0, _react.useCallback)(function () {
    var _header$current;
    (_header$current = header.current) == null ? void 0 : _header$current.onPressRight();
  }, [header]);
  var onSwipeRight = (0, _react.useCallback)(function () {
    var _header$current2;
    (_header$current2 = header.current) == null ? void 0 : _header$current2.onPressLeft();
  }, [header]);
  var _onSwipe = (0, _react.useCallback)(function (gestureName) {
    var SWIPE_UP = _reactNativeSwipeGestures.swipeDirections.SWIPE_UP,
      SWIPE_DOWN = _reactNativeSwipeGestures.swipeDirections.SWIPE_DOWN,
      SWIPE_LEFT = _reactNativeSwipeGestures.swipeDirections.SWIPE_LEFT,
      SWIPE_RIGHT = _reactNativeSwipeGestures.swipeDirections.SWIPE_RIGHT;
    switch (gestureName) {
      case SWIPE_UP:
      case SWIPE_DOWN:
        break;
      case SWIPE_LEFT:
        _constants.default.isRTL ? onSwipeRight() : onSwipeLeft();
        break;
      case SWIPE_RIGHT:
        _constants.default.isRTL ? onSwipeLeft() : onSwipeRight();
        break;
    }
  }, [onSwipeLeft, onSwipeRight]);
  var renderWeekNumber = function renderWeekNumber(weekNumber) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: style.current.dayContainer,
      children: (0, _jsxRuntime.jsx)(_basic.default, {
        marking: weekNumberMarking.current,
        theme: theme,
        testID: `${testID}.weekNumber_${weekNumber}`,
        children: weekNumber
      }, `week-${weekNumber}`)
    }, `week-container-${weekNumber}`);
  };
  var renderDay = function renderDay(day, id) {
    var dayProps = (0, _componentUpdater.extractDayProps)(props);
    if (!(0, _dateutils.sameMonth)(day, currentMonth) && hideExtraDays) {
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: style.current.emptyDayContainer
      }, id);
    }
    var dateString = (0, _interface.toMarkingFormat)(day);
    var isControlled = (0, _isEmpty.default)(props.context);
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: style.current.dayContainer,
      children: (0, _jsxRuntime.jsx)(_index.default, _objectSpread(_objectSpread({}, dayProps), {}, {
        testID: `${testID}.day_${dateString}`,
        date: dateString,
        state: (0, _dayStateManager.getState)(day, currentMonth, props, isControlled),
        marking: markedDates == null ? void 0 : markedDates[dateString],
        onPress: _onDayPress,
        onLongPress: onLongPressDay
      }))
    }, id);
  };
  var renderWeek = function renderWeek(days, id) {
    var week = [];
    days.forEach(function (day, id2) {
      week.push(renderDay(day, id2));
    }, _this);
    if (props.showWeekNumbers) {
      week.unshift(renderWeekNumber(days[days.length - 1].getWeek()));
    }
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: style.current.week,
      children: week
    }, id);
  };
  var renderMonth = function renderMonth() {
    var shouldShowSixWeeks = showSixWeeks && !hideExtraDays;
    var days = (0, _dateutils.page)(currentMonth, firstDay, shouldShowSixWeeks);
    var weeks = [];
    while (days.length) {
      weeks.push(renderWeek(days.splice(0, 7), weeks.length));
    }
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: style.current.monthView,
      children: weeks
    });
  };
  var shouldDisplayIndicator = (0, _react.useMemo)(function () {
    if (currentMonth) {
      var lastMonthOfDay = (0, _interface.toMarkingFormat)(currentMonth.clone().addMonths(1, true).setDate(1).addDays(-1));
      if (displayLoadingIndicator && !(markedDates != null && markedDates[lastMonthOfDay])) {
        return true;
      }
    }
    return false;
  }, [currentMonth, displayLoadingIndicator, markedDates]);
  var renderHeader = function renderHeader() {
    var headerProps = (0, _componentUpdater.extractHeaderProps)(props);
    var ref = customHeader ? undefined : header;
    var CustomHeader = customHeader;
    var HeaderComponent = customHeader ? CustomHeader : _header.default;
    return (0, _jsxRuntime.jsx)(HeaderComponent, _objectSpread(_objectSpread({}, headerProps), {}, {
      testID: `${testID}.header`,
      style: headerStyle,
      ref: ref,
      month: currentMonth,
      addMonth: addMonth,
      displayLoadingIndicator: shouldDisplayIndicator
    }));
  };
  var GestureComponent = enableSwipeMonths ? _reactNativeSwipeGestures.default : _reactNative.View;
  var swipeProps = {
    onSwipe: function onSwipe(direction) {
      return _onSwipe(direction);
    }
  };
  var gestureProps = enableSwipeMonths ? swipeProps : undefined;
  return (0, _jsxRuntime.jsx)(GestureComponent, _objectSpread(_objectSpread({}, gestureProps), {}, {
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [style.current.container, propsStyle],
      testID: testID,
      accessibilityElementsHidden: accessibilityElementsHidden,
      importantForAccessibility: importantForAccessibility,
      children: [renderHeader(), renderMonth()]
    })
  }));
};
var _default = Calendar;
exports.default = _default;
Calendar.displayName = 'Calendar';
Calendar.propTypes = _objectSpread(_objectSpread(_objectSpread({}, _header.default.propTypes), _index.default.propTypes), {}, {
  theme: _propTypes.default.object,
  firstDay: _propTypes.default.number,
  displayLoadingIndicator: _propTypes.default.bool,
  showWeekNumbers: _propTypes.default.bool,
  style: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array, _propTypes.default.number]),
  current: _propTypes.default.string,
  initialDate: _propTypes.default.string,
  minDate: _propTypes.default.string,
  maxDate: _propTypes.default.string,
  markedDates: _propTypes.default.object,
  hideExtraDays: _propTypes.default.bool,
  showSixWeeks: _propTypes.default.bool,
  onDayPress: _propTypes.default.func,
  onDayLongPress: _propTypes.default.func,
  onMonthChange: _propTypes.default.func,
  onVisibleMonthsChange: _propTypes.default.func,
  disableMonthChange: _propTypes.default.bool,
  enableSwipeMonths: _propTypes.default.bool,
  disabledByDefault: _propTypes.default.bool,
  headerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number, _propTypes.default.array]),
  customHeader: _propTypes.default.any,
  allowSelectionOutOfRange: _propTypes.default.bool
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfeGRhdGUiLCJfaXNFbXB0eSIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlYWN0TmF0aXZlIiwiX3JlYWN0TmF0aXZlU3dpcGVHZXN0dXJlcyIsIl9jb25zdGFudHMiLCJfZGF0ZXV0aWxzIiwiX2ludGVyZmFjZSIsIl9kYXlTdGF0ZU1hbmFnZXIiLCJfY29tcG9uZW50VXBkYXRlciIsIl9ob29rcyIsIl9zdHlsZSIsIl9oZWFkZXIiLCJfaW5kZXgiLCJfYmFzaWMiLCJfanN4UnVudGltZSIsIl90aGlzIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIm93bktleXMiLCJlIiwiciIsInQiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIkNhbGVuZGFyIiwicHJvcHMiLCJpbml0aWFsRGF0ZSIsImN1cnJlbnQiLCJ0aGVtZSIsIm1hcmtlZERhdGVzIiwibWluRGF0ZSIsIm1heERhdGUiLCJhbGxvd1NlbGVjdGlvbk91dE9mUmFuZ2UiLCJvbkRheVByZXNzIiwib25EYXlMb25nUHJlc3MiLCJvbk1vbnRoQ2hhbmdlIiwib25WaXNpYmxlTW9udGhzQ2hhbmdlIiwiZGlzYWJsZU1vbnRoQ2hhbmdlIiwiZW5hYmxlU3dpcGVNb250aHMiLCJoaWRlRXh0cmFEYXlzIiwiZmlyc3REYXkiLCJzaG93U2l4V2Vla3MiLCJkaXNwbGF5TG9hZGluZ0luZGljYXRvciIsImN1c3RvbUhlYWRlciIsImhlYWRlclN0eWxlIiwiYWNjZXNzaWJpbGl0eUVsZW1lbnRzSGlkZGVuIiwiaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eSIsInRlc3RJRCIsInByb3BzU3R5bGUiLCJzdHlsZSIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwicGFyc2VEYXRlIiwiWERhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiY3VycmVudE1vbnRoIiwic2V0Q3VycmVudE1vbnRoIiwidXNlUmVmIiwic3R5bGVDb25zdHJ1Y3RvciIsImhlYWRlciIsIndlZWtOdW1iZXJNYXJraW5nIiwiZGlzYWJsZWQiLCJkaXNhYmxlVG91Y2hFdmVudCIsInVzZUVmZmVjdCIsInVzZURpZFVwZGF0ZSIsIl9jdXJyZW50TW9udGgiLCJjbG9uZSIsInhkYXRlVG9EYXRhIiwidXBkYXRlTW9udGgiLCJ1c2VDYWxsYmFjayIsIm5ld01vbnRoIiwic2FtZU1vbnRoIiwiYWRkTW9udGgiLCJjb3VudCIsImFkZE1vbnRocyIsImhhbmRsZURheUludGVyYWN0aW9uIiwiZGF0ZSIsImludGVyYWN0aW9uIiwiZGF5IiwiZGF0ZVN0cmluZyIsImlzR1RFIiwiaXNMVEUiLCJfb25EYXlQcmVzcyIsIm9uTG9uZ1ByZXNzRGF5Iiwib25Td2lwZUxlZnQiLCJfaGVhZGVyJGN1cnJlbnQiLCJvblByZXNzUmlnaHQiLCJvblN3aXBlUmlnaHQiLCJfaGVhZGVyJGN1cnJlbnQyIiwib25QcmVzc0xlZnQiLCJvblN3aXBlIiwiZ2VzdHVyZU5hbWUiLCJTV0lQRV9VUCIsInN3aXBlRGlyZWN0aW9ucyIsIlNXSVBFX0RPV04iLCJTV0lQRV9MRUZUIiwiU1dJUEVfUklHSFQiLCJjb25zdGFudHMiLCJpc1JUTCIsInJlbmRlcldlZWtOdW1iZXIiLCJ3ZWVrTnVtYmVyIiwianN4IiwiVmlldyIsImRheUNvbnRhaW5lciIsImNoaWxkcmVuIiwibWFya2luZyIsInJlbmRlckRheSIsImlkIiwiZGF5UHJvcHMiLCJleHRyYWN0RGF5UHJvcHMiLCJlbXB0eURheUNvbnRhaW5lciIsInRvTWFya2luZ0Zvcm1hdCIsImlzQ29udHJvbGxlZCIsImlzRW1wdHkiLCJjb250ZXh0Iiwic3RhdGUiLCJnZXRTdGF0ZSIsIm9uUHJlc3MiLCJvbkxvbmdQcmVzcyIsInJlbmRlcldlZWsiLCJkYXlzIiwid2VlayIsImlkMiIsInNob3dXZWVrTnVtYmVycyIsInVuc2hpZnQiLCJnZXRXZWVrIiwicmVuZGVyTW9udGgiLCJzaG91bGRTaG93U2l4V2Vla3MiLCJwYWdlIiwid2Vla3MiLCJzcGxpY2UiLCJtb250aFZpZXciLCJzaG91bGREaXNwbGF5SW5kaWNhdG9yIiwidXNlTWVtbyIsImxhc3RNb250aE9mRGF5Iiwic2V0RGF0ZSIsImFkZERheXMiLCJyZW5kZXJIZWFkZXIiLCJoZWFkZXJQcm9wcyIsImV4dHJhY3RIZWFkZXJQcm9wcyIsInJlZiIsInVuZGVmaW5lZCIsIkN1c3RvbUhlYWRlciIsIkhlYWRlckNvbXBvbmVudCIsIkNhbGVuZGFySGVhZGVyIiwibW9udGgiLCJHZXN0dXJlQ29tcG9uZW50IiwiR2VzdHVyZVJlY29nbml6ZXIiLCJzd2lwZVByb3BzIiwiZGlyZWN0aW9uIiwiZ2VzdHVyZVByb3BzIiwianN4cyIsImNvbnRhaW5lciIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRpc3BsYXlOYW1lIiwicHJvcFR5cGVzIiwiRGF5IiwiUHJvcFR5cGVzIiwib2JqZWN0IiwibnVtYmVyIiwiYm9vbCIsIm9uZU9mVHlwZSIsImFycmF5Iiwic3RyaW5nIiwiZnVuYyIsImRpc2FibGVkQnlEZWZhdWx0IiwiYW55Il0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBYRGF0ZSBmcm9tICd4ZGF0ZSc7XG5pbXBvcnQgaXNFbXB0eSBmcm9tICdsb2Rhc2gvaXNFbXB0eSc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuLy8gQHRzLWV4cGVjdC1lcnJvclxuaW1wb3J0IEdlc3R1cmVSZWNvZ25pemVyLCB7IHN3aXBlRGlyZWN0aW9ucyB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1zd2lwZS1nZXN0dXJlcyc7XG5pbXBvcnQgY29uc3RhbnRzIGZyb20gJy4uL2NvbW1vbnMvY29uc3RhbnRzJztcbmltcG9ydCB7IHBhZ2UsIGlzR1RFLCBpc0xURSwgc2FtZU1vbnRoIH0gZnJvbSAnLi4vZGF0ZXV0aWxzJztcbmltcG9ydCB7IHhkYXRlVG9EYXRhLCBwYXJzZURhdGUsIHRvTWFya2luZ0Zvcm1hdCB9IGZyb20gJy4uL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBnZXRTdGF0ZSB9IGZyb20gJy4uL2RheS1zdGF0ZS1tYW5hZ2VyJztcbmltcG9ydCB7IGV4dHJhY3RIZWFkZXJQcm9wcywgZXh0cmFjdERheVByb3BzIH0gZnJvbSAnLi4vY29tcG9uZW50VXBkYXRlcic7XG5pbXBvcnQgeyB1c2VEaWRVcGRhdGUgfSBmcm9tICcuLi9ob29rcyc7XG5pbXBvcnQgc3R5bGVDb25zdHJ1Y3RvciBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBDYWxlbmRhckhlYWRlciBmcm9tICcuL2hlYWRlcic7XG5pbXBvcnQgRGF5IGZyb20gJy4vZGF5L2luZGV4JztcbmltcG9ydCBCYXNpY0RheSBmcm9tICcuL2RheS9iYXNpYyc7XG4vKipcbiAqIEBkZXNjcmlwdGlvbjogQ2FsZW5kYXIgY29tcG9uZW50XG4gKiBAZXhhbXBsZTogaHR0cHM6Ly9naXRodWIuY29tL3dpeC9yZWFjdC1uYXRpdmUtY2FsZW5kYXJzL2Jsb2IvbWFzdGVyL2V4YW1wbGUvc3JjL3NjcmVlbnMvY2FsZW5kYXJzLmpzXG4gKiBAZ2lmOiBodHRwczovL2dpdGh1Yi5jb20vd2l4L3JlYWN0LW5hdGl2ZS1jYWxlbmRhcnMvYmxvYi9tYXN0ZXIvZGVtby9hc3NldHMvY2FsZW5kYXIuZ2lmXG4gKi9cbmNvbnN0IENhbGVuZGFyID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBpbml0aWFsRGF0ZSwgY3VycmVudCwgdGhlbWUsIG1hcmtlZERhdGVzLCBtaW5EYXRlLCBtYXhEYXRlLCBhbGxvd1NlbGVjdGlvbk91dE9mUmFuZ2UsIG9uRGF5UHJlc3MsIG9uRGF5TG9uZ1ByZXNzLCBvbk1vbnRoQ2hhbmdlLCBvblZpc2libGVNb250aHNDaGFuZ2UsIGRpc2FibGVNb250aENoYW5nZSwgZW5hYmxlU3dpcGVNb250aHMsIGhpZGVFeHRyYURheXMsIGZpcnN0RGF5LCBzaG93U2l4V2Vla3MsIGRpc3BsYXlMb2FkaW5nSW5kaWNhdG9yLCBjdXN0b21IZWFkZXIsIGhlYWRlclN0eWxlLCBhY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW4sIGltcG9ydGFudEZvckFjY2Vzc2liaWxpdHksIHRlc3RJRCwgc3R5bGU6IHByb3BzU3R5bGUgfSA9IHByb3BzO1xuICAgIGNvbnN0IFtjdXJyZW50TW9udGgsIHNldEN1cnJlbnRNb250aF0gPSB1c2VTdGF0ZShjdXJyZW50IHx8IGluaXRpYWxEYXRlID8gcGFyc2VEYXRlKGN1cnJlbnQgfHwgaW5pdGlhbERhdGUpIDogbmV3IFhEYXRlKCkpO1xuICAgIGNvbnN0IHN0eWxlID0gdXNlUmVmKHN0eWxlQ29uc3RydWN0b3IodGhlbWUpKTtcbiAgICBjb25zdCBoZWFkZXIgPSB1c2VSZWYoKTtcbiAgICBjb25zdCB3ZWVrTnVtYmVyTWFya2luZyA9IHVzZVJlZih7IGRpc2FibGVkOiB0cnVlLCBkaXNhYmxlVG91Y2hFdmVudDogdHJ1ZSB9KTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoaW5pdGlhbERhdGUpIHtcbiAgICAgICAgICAgIHNldEN1cnJlbnRNb250aChwYXJzZURhdGUoaW5pdGlhbERhdGUpKTtcbiAgICAgICAgfVxuICAgIH0sIFtpbml0aWFsRGF0ZV0pO1xuICAgIHVzZURpZFVwZGF0ZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IF9jdXJyZW50TW9udGggPSBjdXJyZW50TW9udGguY2xvbmUoKTtcbiAgICAgICAgb25Nb250aENoYW5nZT8uKHhkYXRlVG9EYXRhKF9jdXJyZW50TW9udGgpKTtcbiAgICAgICAgb25WaXNpYmxlTW9udGhzQ2hhbmdlPy4oW3hkYXRlVG9EYXRhKF9jdXJyZW50TW9udGgpXSk7XG4gICAgfSwgW2N1cnJlbnRNb250aF0pO1xuICAgIGNvbnN0IHVwZGF0ZU1vbnRoID0gdXNlQ2FsbGJhY2soKG5ld01vbnRoKSA9PiB7XG4gICAgICAgIGlmIChzYW1lTW9udGgobmV3TW9udGgsIGN1cnJlbnRNb250aCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXRDdXJyZW50TW9udGgobmV3TW9udGgpO1xuICAgIH0sIFtjdXJyZW50TW9udGhdKTtcbiAgICBjb25zdCBhZGRNb250aCA9IHVzZUNhbGxiYWNrKChjb3VudCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpLmFkZE1vbnRocyhjb3VudCwgdHJ1ZSk7XG4gICAgICAgIHVwZGF0ZU1vbnRoKG5ld01vbnRoKTtcbiAgICB9LCBbY3VycmVudE1vbnRoLCB1cGRhdGVNb250aF0pO1xuICAgIGNvbnN0IGhhbmRsZURheUludGVyYWN0aW9uID0gdXNlQ2FsbGJhY2soKGRhdGUsIGludGVyYWN0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IGRheSA9IG5ldyBYRGF0ZShkYXRlLmRhdGVTdHJpbmcpO1xuICAgICAgICBpZiAoYWxsb3dTZWxlY3Rpb25PdXRPZlJhbmdlIHx8ICEobWluRGF0ZSAmJiAhaXNHVEUoZGF5LCBuZXcgWERhdGUobWluRGF0ZSkpKSAmJiAhKG1heERhdGUgJiYgIWlzTFRFKGRheSwgbmV3IFhEYXRlKG1heERhdGUpKSkpIHtcbiAgICAgICAgICAgIGlmICghZGlzYWJsZU1vbnRoQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlTW9udGgoZGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgICAgIGludGVyYWN0aW9uKGRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgW21pbkRhdGUsIG1heERhdGUsIGFsbG93U2VsZWN0aW9uT3V0T2ZSYW5nZSwgZGlzYWJsZU1vbnRoQ2hhbmdlLCB1cGRhdGVNb250aF0pO1xuICAgIGNvbnN0IF9vbkRheVByZXNzID0gdXNlQ2FsbGJhY2soKGRhdGUpID0+IHtcbiAgICAgICAgaWYgKGRhdGUpXG4gICAgICAgICAgICBoYW5kbGVEYXlJbnRlcmFjdGlvbihkYXRlLCBvbkRheVByZXNzKTtcbiAgICB9LCBbaGFuZGxlRGF5SW50ZXJhY3Rpb24sIG9uRGF5UHJlc3NdKTtcbiAgICBjb25zdCBvbkxvbmdQcmVzc0RheSA9IHVzZUNhbGxiYWNrKChkYXRlKSA9PiB7XG4gICAgICAgIGlmIChkYXRlKVxuICAgICAgICAgICAgaGFuZGxlRGF5SW50ZXJhY3Rpb24oZGF0ZSwgb25EYXlMb25nUHJlc3MpO1xuICAgIH0sIFtoYW5kbGVEYXlJbnRlcmFjdGlvbiwgb25EYXlMb25nUHJlc3NdKTtcbiAgICBjb25zdCBvblN3aXBlTGVmdCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICBoZWFkZXIuY3VycmVudD8ub25QcmVzc1JpZ2h0KCk7XG4gICAgfSwgW2hlYWRlcl0pO1xuICAgIGNvbnN0IG9uU3dpcGVSaWdodCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICBoZWFkZXIuY3VycmVudD8ub25QcmVzc0xlZnQoKTtcbiAgICB9LCBbaGVhZGVyXSk7XG4gICAgY29uc3Qgb25Td2lwZSA9IHVzZUNhbGxiYWNrKChnZXN0dXJlTmFtZSkgPT4ge1xuICAgICAgICBjb25zdCB7IFNXSVBFX1VQLCBTV0lQRV9ET1dOLCBTV0lQRV9MRUZULCBTV0lQRV9SSUdIVCB9ID0gc3dpcGVEaXJlY3Rpb25zO1xuICAgICAgICBzd2l0Y2ggKGdlc3R1cmVOYW1lKSB7XG4gICAgICAgICAgICBjYXNlIFNXSVBFX1VQOlxuICAgICAgICAgICAgY2FzZSBTV0lQRV9ET1dOOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTV0lQRV9MRUZUOlxuICAgICAgICAgICAgICAgIGNvbnN0YW50cy5pc1JUTCA/IG9uU3dpcGVSaWdodCgpIDogb25Td2lwZUxlZnQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU1dJUEVfUklHSFQ6XG4gICAgICAgICAgICAgICAgY29uc3RhbnRzLmlzUlRMID8gb25Td2lwZUxlZnQoKSA6IG9uU3dpcGVSaWdodCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSwgW29uU3dpcGVMZWZ0LCBvblN3aXBlUmlnaHRdKTtcbiAgICBjb25zdCByZW5kZXJXZWVrTnVtYmVyID0gKHdlZWtOdW1iZXIpID0+IHtcbiAgICAgICAgcmV0dXJuICg8VmlldyBzdHlsZT17c3R5bGUuY3VycmVudC5kYXlDb250YWluZXJ9IGtleT17YHdlZWstY29udGFpbmVyLSR7d2Vla051bWJlcn1gfT5cbiAgICAgICAgPEJhc2ljRGF5IGtleT17YHdlZWstJHt3ZWVrTnVtYmVyfWB9IG1hcmtpbmc9e3dlZWtOdW1iZXJNYXJraW5nLmN1cnJlbnR9IFxuICAgICAgICAvLyBzdGF0ZT0nZGlzYWJsZWQnXG4gICAgICAgIHRoZW1lPXt0aGVtZX0gdGVzdElEPXtgJHt0ZXN0SUR9LndlZWtOdW1iZXJfJHt3ZWVrTnVtYmVyfWB9PlxuICAgICAgICAgIHt3ZWVrTnVtYmVyfVxuICAgICAgICA8L0Jhc2ljRGF5PlxuICAgICAgPC9WaWV3Pik7XG4gICAgfTtcbiAgICBjb25zdCByZW5kZXJEYXkgPSAoZGF5LCBpZCkgPT4ge1xuICAgICAgICBjb25zdCBkYXlQcm9wcyA9IGV4dHJhY3REYXlQcm9wcyhwcm9wcyk7XG4gICAgICAgIGlmICghc2FtZU1vbnRoKGRheSwgY3VycmVudE1vbnRoKSAmJiBoaWRlRXh0cmFEYXlzKSB7XG4gICAgICAgICAgICByZXR1cm4gPFZpZXcga2V5PXtpZH0gc3R5bGU9e3N0eWxlLmN1cnJlbnQuZW1wdHlEYXlDb250YWluZXJ9Lz47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IHRvTWFya2luZ0Zvcm1hdChkYXkpO1xuICAgICAgICBjb25zdCBpc0NvbnRyb2xsZWQgPSBpc0VtcHR5KHByb3BzLmNvbnRleHQpO1xuICAgICAgICByZXR1cm4gKDxWaWV3IHN0eWxlPXtzdHlsZS5jdXJyZW50LmRheUNvbnRhaW5lcn0ga2V5PXtpZH0+XG4gICAgICAgIDxEYXkgey4uLmRheVByb3BzfSB0ZXN0SUQ9e2Ake3Rlc3RJRH0uZGF5XyR7ZGF0ZVN0cmluZ31gfSBkYXRlPXtkYXRlU3RyaW5nfSBzdGF0ZT17Z2V0U3RhdGUoZGF5LCBjdXJyZW50TW9udGgsIHByb3BzLCBpc0NvbnRyb2xsZWQpfSBtYXJraW5nPXttYXJrZWREYXRlcz8uW2RhdGVTdHJpbmddfSBvblByZXNzPXtfb25EYXlQcmVzc30gb25Mb25nUHJlc3M9e29uTG9uZ1ByZXNzRGF5fS8+XG4gICAgICA8L1ZpZXc+KTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbmRlcldlZWsgPSAoZGF5cywgaWQpID0+IHtcbiAgICAgICAgY29uc3Qgd2VlayA9IFtdO1xuICAgICAgICBkYXlzLmZvckVhY2goKGRheSwgaWQyKSA9PiB7XG4gICAgICAgICAgICB3ZWVrLnB1c2gocmVuZGVyRGF5KGRheSwgaWQyKSk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgICBpZiAocHJvcHMuc2hvd1dlZWtOdW1iZXJzKSB7XG4gICAgICAgICAgICB3ZWVrLnVuc2hpZnQocmVuZGVyV2Vla051bWJlcihkYXlzW2RheXMubGVuZ3RoIC0gMV0uZ2V0V2VlaygpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICg8VmlldyBzdHlsZT17c3R5bGUuY3VycmVudC53ZWVrfSBrZXk9e2lkfT5cbiAgICAgICAge3dlZWt9XG4gICAgICA8L1ZpZXc+KTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbmRlck1vbnRoID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBzaG91bGRTaG93U2l4V2Vla3MgPSBzaG93U2l4V2Vla3MgJiYgIWhpZGVFeHRyYURheXM7XG4gICAgICAgIGNvbnN0IGRheXMgPSBwYWdlKGN1cnJlbnRNb250aCwgZmlyc3REYXksIHNob3VsZFNob3dTaXhXZWVrcyk7XG4gICAgICAgIGNvbnN0IHdlZWtzID0gW107XG4gICAgICAgIHdoaWxlIChkYXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgd2Vla3MucHVzaChyZW5kZXJXZWVrKGRheXMuc3BsaWNlKDAsIDcpLCB3ZWVrcy5sZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gPFZpZXcgc3R5bGU9e3N0eWxlLmN1cnJlbnQubW9udGhWaWV3fT57d2Vla3N9PC9WaWV3PjtcbiAgICB9O1xuICAgIGNvbnN0IHNob3VsZERpc3BsYXlJbmRpY2F0b3IgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKGN1cnJlbnRNb250aCkge1xuICAgICAgICAgICAgY29uc3QgbGFzdE1vbnRoT2ZEYXkgPSB0b01hcmtpbmdGb3JtYXQoY3VycmVudE1vbnRoLmNsb25lKCkuYWRkTW9udGhzKDEsIHRydWUpLnNldERhdGUoMSkuYWRkRGF5cygtMSkpO1xuICAgICAgICAgICAgaWYgKGRpc3BsYXlMb2FkaW5nSW5kaWNhdG9yICYmICFtYXJrZWREYXRlcz8uW2xhc3RNb250aE9mRGF5XSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCBbY3VycmVudE1vbnRoLCBkaXNwbGF5TG9hZGluZ0luZGljYXRvciwgbWFya2VkRGF0ZXNdKTtcbiAgICBjb25zdCByZW5kZXJIZWFkZXIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGhlYWRlclByb3BzID0gZXh0cmFjdEhlYWRlclByb3BzKHByb3BzKTtcbiAgICAgICAgY29uc3QgcmVmID0gY3VzdG9tSGVhZGVyID8gdW5kZWZpbmVkIDogaGVhZGVyO1xuICAgICAgICBjb25zdCBDdXN0b21IZWFkZXIgPSBjdXN0b21IZWFkZXI7XG4gICAgICAgIGNvbnN0IEhlYWRlckNvbXBvbmVudCA9IGN1c3RvbUhlYWRlciA/IEN1c3RvbUhlYWRlciA6IENhbGVuZGFySGVhZGVyO1xuICAgICAgICByZXR1cm4gKDxIZWFkZXJDb21wb25lbnQgey4uLmhlYWRlclByb3BzfSB0ZXN0SUQ9e2Ake3Rlc3RJRH0uaGVhZGVyYH0gc3R5bGU9e2hlYWRlclN0eWxlfSByZWY9e3JlZn0gbW9udGg9e2N1cnJlbnRNb250aH0gYWRkTW9udGg9e2FkZE1vbnRofSBkaXNwbGF5TG9hZGluZ0luZGljYXRvcj17c2hvdWxkRGlzcGxheUluZGljYXRvcn0vPik7XG4gICAgfTtcbiAgICBjb25zdCBHZXN0dXJlQ29tcG9uZW50ID0gZW5hYmxlU3dpcGVNb250aHMgPyBHZXN0dXJlUmVjb2duaXplciA6IFZpZXc7XG4gICAgY29uc3Qgc3dpcGVQcm9wcyA9IHtcbiAgICAgICAgb25Td2lwZTogKGRpcmVjdGlvbikgPT4gb25Td2lwZShkaXJlY3Rpb24pXG4gICAgfTtcbiAgICBjb25zdCBnZXN0dXJlUHJvcHMgPSBlbmFibGVTd2lwZU1vbnRocyA/IHN3aXBlUHJvcHMgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICg8R2VzdHVyZUNvbXBvbmVudCB7Li4uZ2VzdHVyZVByb3BzfT5cbiAgICAgIDxWaWV3IHN0eWxlPXtbc3R5bGUuY3VycmVudC5jb250YWluZXIsIHByb3BzU3R5bGVdfSB0ZXN0SUQ9e3Rlc3RJRH0gYWNjZXNzaWJpbGl0eUVsZW1lbnRzSGlkZGVuPXthY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW59IC8vIGlPU1xuICAgICBpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5PXtpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5fSAvLyBBbmRyb2lkXG4gICAgPlxuICAgICAgICB7cmVuZGVySGVhZGVyKCl9XG4gICAgICAgIHtyZW5kZXJNb250aCgpfVxuICAgICAgPC9WaWV3PlxuICAgIDwvR2VzdHVyZUNvbXBvbmVudD4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IENhbGVuZGFyO1xuQ2FsZW5kYXIuZGlzcGxheU5hbWUgPSAnQ2FsZW5kYXInO1xuQ2FsZW5kYXIucHJvcFR5cGVzID0ge1xuICAgIC4uLkNhbGVuZGFySGVhZGVyLnByb3BUeXBlcyxcbiAgICAuLi5EYXkucHJvcFR5cGVzLFxuICAgIHRoZW1lOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGZpcnN0RGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGRpc3BsYXlMb2FkaW5nSW5kaWNhdG9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93V2Vla051bWJlcnM6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYXJyYXksIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGluaXRpYWxEYXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1pbkRhdGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbWF4RGF0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtYXJrZWREYXRlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBoaWRlRXh0cmFEYXlzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93U2l4V2Vla3M6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uRGF5UHJlc3M6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uRGF5TG9uZ1ByZXNzOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vbnRoQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvblZpc2libGVNb250aHNDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIGRpc2FibGVNb250aENoYW5nZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgZW5hYmxlU3dpcGVNb250aHM6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkQnlEZWZhdWx0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoZWFkZXJTdHlsZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLmFycmF5XSksXG4gICAgY3VzdG9tSGVhZGVyOiBQcm9wVHlwZXMuYW55LFxuICAgIGFsbG93U2VsZWN0aW9uT3V0T2ZSYW5nZTogUHJvcFR5cGVzLmJvb2xcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxVQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxRQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFDLHVCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBSyxZQUFBLEdBQUFMLE9BQUE7QUFFQSxJQUFBTSx5QkFBQSxHQUFBRix1QkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQU8sVUFBQSxHQUFBUixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVEsVUFBQSxHQUFBUixPQUFBO0FBQ0EsSUFBQVMsVUFB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