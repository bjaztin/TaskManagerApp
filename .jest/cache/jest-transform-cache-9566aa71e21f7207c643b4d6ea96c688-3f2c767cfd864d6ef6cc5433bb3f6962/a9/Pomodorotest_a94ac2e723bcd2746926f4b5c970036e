7ef6c24846fba98588b2b4ec9b6e5936
_getJestObj().mock("expo-av", function () {
  return {
    Audio: {
      Sound: {
        createAsync: jest.fn()
      }
    }
  };
});
_getJestObj().mock("react-native/Libraries/Vibration/Vibration", function () {
  return {
    vibrate: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _PomodoroScreen = _interopRequireDefault(require("../../src/screens/PomodoroScreen"));
var _expoAv = require("expo-av");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("PomodoroScreen", function () {
  beforeEach(function () {
    jest.spyOn(_expoAv.Audio.Sound, "createAsync").mockResolvedValue({
      sound: {}
    });
  });
  test("renders the component correctly", function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PomodoroScreen.default, {})),
      getByText = _render.getByText;
    expect(getByText("Focus")).toBeTruthy();
  });
  test("toggles the timer when the play/pause button is pressed", function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PomodoroScreen.default, {})),
      getByText = _render2.getByText,
      getByTestId = _render2.getByTestId;
    var toggleButton = getByTestId("toggleButtons");
    _reactNative.fireEvent.press(toggleButton);
    var timerValue = getByTestId("timerValue");
    expect(timerValue).toBeDefined();
  });
  test("resets the timer when the reset button is pressed", function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PomodoroScreen.default, {})),
      getByTestId = _render3.getByTestId;
    _reactNative.fireEvent.press(getByTestId("toggleButtons"));
    _reactNative.fireEvent.press(getByTestId("toggleButtons"));
    var timerValue = getByTestId("timerValue");
    expect(timerValue).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJBdWRpbyIsIlNvdW5kIiwiY3JlYXRlQXN5bmMiLCJqZXN0IiwiZm4iLCJ2aWJyYXRlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfUG9tb2Rvcm9TY3JlZW4iLCJfZXhwb0F2IiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsInNweU9uIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJzb3VuZCIsInRlc3QiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyMiIsImdldEJ5VGVzdElkIiwidG9nZ2xlQnV0dG9uIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0aW1lclZhbHVlIiwidG9CZURlZmluZWQiLCJfcmVuZGVyMyJdLCJzb3VyY2VzIjpbIlBvbW9kb3JvLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBQb21vZG9yb1NjcmVlbiBmcm9tIFwiLi4vLi4vc3JjL3NjcmVlbnMvUG9tb2Rvcm9TY3JlZW5cIjsgXG5pbXBvcnQgeyBBdWRpbyB9IGZyb20gJ2V4cG8tYXYnO1xuXG5qZXN0Lm1vY2soXCJleHBvLWF2XCIsICgpID0+ICh7XG4gIEF1ZGlvOiB7XG4gICAgU291bmQ6IHtcbiAgICAgIGNyZWF0ZUFzeW5jOiBqZXN0LmZuKCksXG4gICAgfSxcbiAgfSxcbn0pKTtcblxuamVzdC5tb2NrKFwicmVhY3QtbmF0aXZlL0xpYnJhcmllcy9WaWJyYXRpb24vVmlicmF0aW9uXCIsICgpID0+ICh7XG4gIHZpYnJhdGU6IGplc3QuZm4oKSxcbn0pKTtcblxuZGVzY3JpYmUoXCJQb21vZG9yb1NjcmVlblwiLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3Quc3B5T24oQXVkaW8uU291bmQsIFwiY3JlYXRlQXN5bmNcIikubW9ja1Jlc29sdmVkVmFsdWUoeyBzb3VuZDoge30gfSk7XG4gIH0pO1xuXG4gIHRlc3QoXCJyZW5kZXJzIHRoZSBjb21wb25lbnQgY29ycmVjdGx5XCIsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxQb21vZG9yb1NjcmVlbiAvPik7XG5cbiAgICBleHBlY3QoZ2V0QnlUZXh0KFwiRm9jdXNcIikpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgdGVzdChcInRvZ2dsZXMgdGhlIHRpbWVyIHdoZW4gdGhlIHBsYXkvcGF1c2UgYnV0dG9uIGlzIHByZXNzZWRcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxQb21vZG9yb1NjcmVlbiAvPik7XG4gICAgY29uc3QgdG9nZ2xlQnV0dG9uID0gZ2V0QnlUZXN0SWQoXCJ0b2dnbGVCdXR0b25zXCIpO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKHRvZ2dsZUJ1dHRvbik7XG5cbiAgICBjb25zdCB0aW1lclZhbHVlID0gZ2V0QnlUZXN0SWQoXCJ0aW1lclZhbHVlXCIpO1xuICAgIGV4cGVjdCh0aW1lclZhbHVlKS50b0JlRGVmaW5lZCgpO1xuXG4gIH0pO1xuXG4gIHRlc3QoXCJyZXNldHMgdGhlIHRpbWVyIHdoZW4gdGhlIHJlc2V0IGJ1dHRvbiBpcyBwcmVzc2VkXCIsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPFBvbW9kb3JvU2NyZWVuIC8+KTtcblxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZChcInRvZ2dsZUJ1dHRvbnNcIikpOyBcblxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZChcInRvZ2dsZUJ1dHRvbnNcIikpOyBcblxuICAgY29uc3QgdGltZXJWYWx1ZSA9IGdldEJ5VGVzdElkKFwidGltZXJWYWx1ZVwiKTtcbiAgIGV4cGVjdCh0aW1lclZhbHVlKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUtBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxTQUFTLEVBQUU7RUFBQSxPQUFPO0lBQzFCQyxLQUFLLEVBQUU7TUFDTEMsS0FBSyxFQUFFO1FBQ0xDLFdBQVcsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFDdkI7SUFDRjtFQUNGLENBQUM7QUFBQSxDQUFDLENBQUM7QUFFSE4sV0FBQSxHQUFLQyxJQUFJLENBQUMsNENBQTRDLEVBQUU7RUFBQSxPQUFPO0lBQzdETSxPQUFPLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ25CLENBQUM7QUFBQSxDQUFDLENBQUM7QUFBQyxJQUFBRSxzQkFBQSxHQUFBQyxPQUFBO0FBZkosSUFBQUMsTUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsZUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksT0FBQSxHQUFBSixPQUFBO0FBQWdDLElBQUFLLFdBQUEsR0FBQUwsT0FBQTtBQUFBLFNBQUFULFlBQUE7RUFBQSxJQUFBZSxRQUFBLEdBQUFOLE9BQUE7SUFBQUosSUFBQSxHQUFBVSxRQUFBLENBQUFWLElBQUE7RUFBQUwsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUssSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBY2hDVyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBTTtFQUMvQkMsVUFBVSxDQUFDLFlBQU07SUFDZlosSUFBSSxDQUFDYSxLQUFLLENBQUNoQixhQUFLLENBQUNDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQ2dCLGlCQUFpQixDQUFDO01BQUVDLEtBQUssRUFBRSxDQUFDO0lBQUUsQ0FBQyxDQUFDO0VBQ3pFLENBQUMsQ0FBQztFQUVGQyxJQUFJLENBQUMsaUNBQWlDLEVBQUUsWUFBTTtJQUM1QyxJQUFBQyxPQUFBLEdBQXNCLElBQUFDLG1CQUFNLEVBQUMsSUFBQVQsV0FBQSxDQUFBVSxHQUFBLEVBQUNaLGVBQUEsQ0FBQWEsT0FBYyxJQUFFLENBQUMsQ0FBQztNQUF4Q0MsU0FBUyxHQUFBSixPQUFBLENBQVRJLFNBQVM7SUFFakJDLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0VBQ3pDLENBQUMsQ0FBQztFQUVGUCxJQUFJLENBQUMseURBQXlELEVBQUUsWUFBTTtJQUNwRSxJQUFBUSxRQUFBLEdBQW1DLElBQUFOLG1CQUFNLEVBQUMsSUFBQVQsV0FBQSxDQUFBVSxHQUFBLEVBQUNaLGVBQUEsQ0FBQWEsT0FBYyxJQUFFLENBQUMsQ0FBQztNQUFyREMsU0FBUyxHQUFBRyxRQUFBLENBQVRILFNBQVM7TUFBRUksV0FBVyxHQUFBRCxRQUFBLENBQVhDLFdBQVc7SUFDOUIsSUFBTUMsWUFBWSxHQUFHRCxXQUFXLENBQUMsZUFBZSxDQUFDO0lBRWpERSxzQkFBUyxDQUFDQyxLQUFLLENBQUNGLFlBQVksQ0FBQztJQUU3QixJQUFNRyxVQUFVLEdBQUdKLFdBQVcsQ0FBQyxZQUFZLENBQUM7SUFDNUNILE1BQU0sQ0FBQ08sVUFBVSxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0VBRWxDLENBQUMsQ0FBQztFQUVGZCxJQUFJLENBQUMsbURBQW1ELEVBQUUsWUFBTTtJQUM5RCxJQUFBZSxRQUFBLEdBQXdCLElBQUFiLG1CQUFNLEVBQUMsSUFBQVQsV0FBQSxDQUFBVSxHQUFBLEVBQUNaLGVBQUEsQ0FBQWEsT0FBYyxJQUFFLENBQUMsQ0FBQztNQUExQ0ssV0FBVyxHQUFBTSxRQUFBLENBQVhOLFdBQVc7SUFFbkJFLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0gsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRTdDRSxzQkFBUyxDQUFDQyxLQUFLLENBQUNILFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUU5QyxJQUFNSSxVQUFVLEdBQUdKLFdBQVcsQ0FBQyxZQUFZLENBQUM7SUFDNUNILE1BQU0sQ0FBQ08sVUFBVSxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0VBQ2pDLENBQUMsQ0FBQztBQUVKLENBQUMsQ0FBQyJ9