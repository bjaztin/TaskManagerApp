12dad4f67f5d87133b307a057992486a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildTimeString = buildTimeString;
exports.calcDateByPosition = calcDateByPosition;
exports.calcTimeByPosition = calcTimeByPosition;
exports.calcTimeOffset = calcTimeOffset;
var _xdate = _interopRequireDefault(require("xdate"));
var _constants = _interopRequireDefault(require("../../commons/constants"));
var _dateutils = require("../../dateutils");
function calcTimeByPosition(yPosition, hourBlockHeight) {
  var time = yPosition / hourBlockHeight;
  time = Math.floor(time * 2) / 2;
  var hour = Math.floor(time);
  var minutes = (time - Math.floor(time)) * 60;
  return {
    hour: hour,
    minutes: minutes
  };
}
function calcDateByPosition(xPosition, timelineLeftInset) {
  var numberOfDays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var firstDate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _xdate.default();
  var timelineWidth = _constants.default.screenWidth - timelineLeftInset;
  var dayWidth = timelineWidth / numberOfDays;
  var positionIndex = Math.floor((xPosition - timelineLeftInset) / dayWidth);
  return (0, _dateutils.generateDay)(firstDate, positionIndex);
}
function buildTimeString() {
  var hour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var minutes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var date = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  return `${date} ${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:00`.trimStart();
}
function calcTimeOffset(hourBlockHeight, hour, minutes) {
  var now = new Date();
  var h = hour != null ? hour : now.getHours();
  var m = minutes != null ? minutes : now.getMinutes();
  return (h + m / 60) * hourBlockHeight;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfeGRhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jb25zdGFudHMiLCJfZGF0ZXV0aWxzIiwiY2FsY1RpbWVCeVBvc2l0aW9uIiwieVBvc2l0aW9uIiwiaG91ckJsb2NrSGVpZ2h0IiwidGltZSIsIk1hdGgiLCJmbG9vciIsImhvdXIiLCJtaW51dGVzIiwiY2FsY0RhdGVCeVBvc2l0aW9uIiwieFBvc2l0aW9uIiwidGltZWxpbmVMZWZ0SW5zZXQiLCJudW1iZXJPZkRheXMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJmaXJzdERhdGUiLCJYRGF0ZSIsInRpbWVsaW5lV2lkdGgiLCJjb25zdGFudHMiLCJzY3JlZW5XaWR0aCIsImRheVdpZHRoIiwicG9zaXRpb25JbmRleCIsImdlbmVyYXRlRGF5IiwiYnVpbGRUaW1lU3RyaW5nIiwiZGF0ZSIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJ0cmltU3RhcnQiLCJjYWxjVGltZU9mZnNldCIsIm5vdyIsIkRhdGUiLCJoIiwiZ2V0SG91cnMiLCJtIiwiZ2V0TWludXRlcyJdLCJzb3VyY2VzIjpbInByZXNlbnRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgWERhdGUgZnJvbSAneGRhdGUnO1xuaW1wb3J0IGNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb25zL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZW5lcmF0ZURheSB9IGZyb20gJy4uLy4uL2RhdGV1dGlscyc7XG5leHBvcnQgZnVuY3Rpb24gY2FsY1RpbWVCeVBvc2l0aW9uKHlQb3NpdGlvbiwgaG91ckJsb2NrSGVpZ2h0KSB7XG4gICAgbGV0IHRpbWUgPSB5UG9zaXRpb24gLyBob3VyQmxvY2tIZWlnaHQ7XG4gICAgdGltZSA9IE1hdGguZmxvb3IodGltZSAqIDIpIC8gMjtcbiAgICBjb25zdCBob3VyID0gTWF0aC5mbG9vcih0aW1lKTtcbiAgICBjb25zdCBtaW51dGVzID0gKHRpbWUgLSBNYXRoLmZsb29yKHRpbWUpKSAqIDYwO1xuICAgIHJldHVybiB7IGhvdXIsIG1pbnV0ZXMgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjYWxjRGF0ZUJ5UG9zaXRpb24oeFBvc2l0aW9uLCB0aW1lbGluZUxlZnRJbnNldCwgbnVtYmVyT2ZEYXlzID0gMSwgZmlyc3REYXRlID0gbmV3IFhEYXRlKCkpIHtcbiAgICBjb25zdCB0aW1lbGluZVdpZHRoID0gY29uc3RhbnRzLnNjcmVlbldpZHRoIC0gdGltZWxpbmVMZWZ0SW5zZXQ7XG4gICAgY29uc3QgZGF5V2lkdGggPSB0aW1lbGluZVdpZHRoIC8gbnVtYmVyT2ZEYXlzO1xuICAgIGNvbnN0IHBvc2l0aW9uSW5kZXggPSBNYXRoLmZsb29yKCh4UG9zaXRpb24gLSB0aW1lbGluZUxlZnRJbnNldCkgLyBkYXlXaWR0aCk7XG4gICAgcmV0dXJuIGdlbmVyYXRlRGF5KGZpcnN0RGF0ZSwgcG9zaXRpb25JbmRleCk7XG59XG5leHBvcnQgZnVuY3Rpb24gYnVpbGRUaW1lU3RyaW5nKGhvdXIgPSAwLCBtaW51dGVzID0gMCwgZGF0ZSA9ICcnKSB7XG4gICAgcmV0dXJuIGAke2RhdGV9ICR7aG91ci50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyl9OiR7bWludXRlcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyl9OjAwYC50cmltU3RhcnQoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjYWxjVGltZU9mZnNldChob3VyQmxvY2tIZWlnaHQsIGhvdXIsIG1pbnV0ZXMpIHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IGggPSBob3VyID8/IG5vdy5nZXRIb3VycygpO1xuICAgIGNvbnN0IG0gPSBtaW51dGVzID8/IG5vdy5nZXRNaW51dGVzKCk7XG4gICAgcmV0dXJuIChoICsgbSAvIDYwKSAqIGhvdXJCbG9ja0hlaWdodDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJ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