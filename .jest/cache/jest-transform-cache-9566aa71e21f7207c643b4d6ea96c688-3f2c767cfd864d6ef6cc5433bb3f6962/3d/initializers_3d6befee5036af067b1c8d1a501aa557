2e30edd09c139c61efee5e0bef4a6fd6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeUIRuntime = initializeUIRuntime;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _errors = require("./errors");
var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));
var _PlatformChecker = require("./PlatformChecker");
var _threads = require("./threads");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _worklet_2058902618278_init_data = {
  code: "function callGuardDEV(fn) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  try {\n    fn(...args);\n  } catch (e) {\n    if (global.__ErrorUtils) {\n      global.__ErrorUtils.reportFatalError(e);\n    } else {\n      throw e;\n    }\n  }\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js",
  sourceMap: "{\"version\":3,\"names\":[\"callGuardDEV\",\"fn\",\"_len\",\"arguments\",\"length\",\"args\",\"Array\",\"_key\",\"e\",\"global\",\"__ErrorUtils\",\"reportFatalError\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js\"],\"mappings\":\"AAKA,SAAAA,aAAAC,EAAA;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IACAF,IAAA,CAASE,IAAA,QAAYJ,SAAK,CAAAI,IAAA;EAGxB;MACE;IACFN,EAAA,IAAAI,IAAA;EACA,SAAIG,CAAA;IACF,IAAGC,MAAO,CAACC,YAAA;MACXD,MAAQ,CAAAC,YAAE,CAAAC,gBAAA,CAAAH,CAAA;IACV,OAAI;MACF,MAAMA,CAAC;IACT\"}"
};
var callGuardDEV = function () {
  var _e = [new global.Error(), 1, -27];
  var _f = function _f(fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    try {
      fn.apply(void 0, args);
    } catch (e) {
      if (global.__ErrorUtils) {
        global.__ErrorUtils.reportFatalError(e);
      } else {
        throw e;
      }
    }
  };
  _f._closure = {};
  _f.__initData = _worklet_2058902618278_init_data;
  _f.__workletHash = 2058902618278;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
var _worklet_7622902604485_init_data = {
  code: "function valueUnpacker(objectToUnpack, category) {\n  let workletsCache = global.__workletsCache;\n  let handleCache = global.__handleCache;\n  if (workletsCache === undefined) {\n    workletsCache = global.__workletsCache = new Map();\n    handleCache = global.__handleCache = new WeakMap();\n  }\n  const workletHash = objectToUnpack.__workletHash;\n  if (workletHash !== undefined) {\n    let workletFun = workletsCache.get(workletHash);\n    if (workletFun === undefined) {\n      const initData = objectToUnpack.__initData;\n      if (global.evalWithSourceMap) {\n        workletFun = global.evalWithSourceMap('(' + initData.code + '\\n)', initData.location, initData.sourceMap);\n      } else if (global.evalWithSourceUrl) {\n        workletFun = global.evalWithSourceUrl('(' + initData.code + '\\n)', \"worklet_\" + workletHash);\n      } else {\n        workletFun = eval('(' + initData.code + '\\n)');\n      }\n      workletsCache.set(workletHash, workletFun);\n    }\n    const functionInstance = workletFun.bind(objectToUnpack);\n    objectToUnpack._recur = functionInstance;\n    return functionInstance;\n  } else if (objectToUnpack.__init) {\n    let value = handleCache.get(objectToUnpack);\n    if (value === undefined) {\n      value = objectToUnpack.__init();\n      handleCache.set(objectToUnpack, value);\n    }\n    return value;\n  } else if (category === 'RemoteFunction') {\n    const fun = function () {\n      throw new Error(\"Tried to synchronously call a non-worklet function on the UI thread.\\n\\nPossible solutions are:\\n  a) If you want to synchronously execute this method, mark it as a worklet\\n  b) If you want to execute this function on the JS thread, wrap it using `runOnJS`\");\n    };\n    fun.__remoteFunction = objectToUnpack;\n    return fun;\n  } else {\n    throw new Error('data type not recognized by unpack method');\n  }\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js",
  sourceMap: "{\"version\":3,\"names\":[\"valueUnpacker\",\"objectToUnpack\",\"category\",\"workletsCache\",\"global\",\"__workletsCache\",\"handleCache\",\"__handleCache\",\"undefined\",\"Map\",\"WeakMap\",\"workletHash\",\"__workletHash\",\"workletFun\",\"get\",\"initData\",\"__initData\",\"evalWithSourceMap\",\"code\",\"location\",\"sourceMap\",\"evalWithSourceUrl\",\"eval\",\"set\",\"functionInstance\",\"bind\",\"_recur\",\"__init\",\"value\",\"fun\",\"Error\",\"__remoteFunction\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js\"],\"mappings\":\"AAsBA,SAAAA,aAASA,CAAcC,cAAA,EAAcC,QAAE,EAAQ;EAG7C,IAAIC,aAAa,GAAGC,MAAM,CAACC,eAAe;EAC1C,IAAIC,WAAW,GAAGF,MAAM,CAACG,aAAa;EACtC,IAAIJ,aAAa,KAAKK,SAAS,EAAE;IAE/BL,aAAa,GAAGC,MAAM,CAACC,eAAe,GAAG,IAAII,GAAG,CAAC,CAAC;IAClDH,WAAW,GAAGF,MAAM,CAACG,aAAa,GAAG,IAAIG,OAAO,CAAC,CAAC;EACpD;EACA,MAAMC,WAAW,GAAGV,cAAc,CAACW,aAAa;EAChD,IAAID,WAAW,KAAKH,SAAS,EAAE;IAC7B,IAAIK,UAAU,GAAGV,aAAa,CAACW,GAAG,CAACH,WAAW,CAAC;IAC/C,IAAIE,UAAU,KAAKL,SAAS,EAAE;MAC5B,MAAMO,QAAQ,GAAGd,cAAc,CAACe,UAAU;MAC1C,IAAIZ,MAAM,CAACa,iBAAiB,EAAE;QAK5BJ,UAAU,GAAGT,MAAM,CAACa,iBAAiB,CAAC,GAAG,GAAGF,QAAQ,CAACG,IAAI,GAAG,KAAK,EAAEH,QAAQ,CAACI,QAAQ,EAAEJ,QAAQ,CAACK,SAAS,CAAC;MAC3G,CAAC,MAAM,IAAIhB,MAAM,CAACiB,iBAAiB,EAAE;QAKnCR,UAAU,GAAGT,MAAM,CAACiB,iBAAiB,CAAC,GAAG,GAAGN,QAAQ,CAACG,IAAI,GAAG,KAAK,eAAaP,WAAa,CAAC;MAC9F,CAAC,MAAM;QAGLE,UAAU,GAAGS,IAAI,CAAC,GAAG,GAAGP,QAAQ,CAACG,IAAI,GAAG,KAAK,CAAC;MAChD;MACAf,aAAa,CAACoB,GAAG,CAACZ,WAAW,EAAEE,UAAU,CAAC;IAC5C;IACA,MAAMW,gBAAgB,GAAGX,UAAU,CAACY,IAAI,CAACxB,cAAc,CAAC;IACxDA,cAAc,CAACyB,MAAM,GAAGF,gBAAgB;IACxC,OAAOA,gBAAgB;EACzB,CAAC,MAAM,IAAIvB,cAAc,CAAC0B,MAAM,EAAE;IAChC,IAAIC,KAAK,GAAGtB,WAAW,CAACQ,GAAG,CAACb,cAAc,CAAC;IAC3C,IAAI2B,KAAK,KAAKpB,SAAS,EAAE;MACvBoB,KAAK,GAAG3B,cAAc,CAAC0B,MAAM,CAAC,CAAC;MAC/BrB,WAAW,CAACiB,GAAG,CAACtB,cAAc,EAAE2B,KAAK,CAAC;IACxC;IACA,OAAOA,KAAK;EACd,CAAC,MAAM,IAAI1B,QAAQ,KAAK,gBAAgB,EAAE;IACxC,MAAM2B,GAAG,GAAG,SAAAA,CAAA,EAAM;MAChB,MAAM,IAAIC,KAAK,oQAIiE,CAAC;IACnF,CAAC;IACDD,GAAG,CAACE,gBAAgB,GAAG9B,cAAc;IACrC,OAAO4B,GAAG;EACZ,CAAC,MAAM;IACL,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;EAC9D;AACF\"}"
};
var valueUnpacker = function () {
  var _e = [new global.Error(), 1, -27];
  var _f = function _f(objectToUnpack, category) {
    var workletsCache = global.__workletsCache;
    var handleCache = global.__handleCache;
    if (workletsCache === undefined) {
      workletsCache = global.__workletsCache = new Map();
      handleCache = global.__handleCache = new WeakMap();
    }
    var workletHash = objectToUnpack.__workletHash;
    if (workletHash !== undefined) {
      var workletFun = workletsCache.get(workletHash);
      if (workletFun === undefined) {
        var initData = objectToUnpack.__initData;
        if (global.evalWithSourceMap) {
          workletFun = global.evalWithSourceMap('(' + initData.code + '\n)', initData.location, initData.sourceMap);
        } else if (global.evalWithSourceUrl) {
          workletFun = global.evalWithSourceUrl('(' + initData.code + '\n)', `worklet_${workletHash}`);
        } else {
          workletFun = eval('(' + initData.code + '\n)');
        }
        workletsCache.set(workletHash, workletFun);
      }
      var functionInstance = workletFun.bind(objectToUnpack);
      objectToUnpack._recur = functionInstance;
      return functionInstance;
    } else if (objectToUnpack.__init) {
      var value = handleCache.get(objectToUnpack);
      if (value === undefined) {
        value = objectToUnpack.__init();
        handleCache.set(objectToUnpack, value);
      }
      return value;
    } else if (category === 'RemoteFunction') {
      var fun = function fun() {
        throw new Error(`Tried to synchronously call a non-worklet function on the UI thread.

Possible solutions are:
  a) If you want to synchronously execute this method, mark it as a worklet
  b) If you want to execute this function on the JS thread, wrap it using \`runOnJS\``);
      };
      fun.__remoteFunction = objectToUnpack;
      return fun;
    } else {
      throw new Error('data type not recognized by unpack method');
    }
  };
  _f._closure = {};
  _f.__initData = _worklet_7622902604485_init_data;
  _f.__workletHash = 7622902604485;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
var _worklet_9468165435498_init_data = {
  code: "function setupRequestAnimationFrame() {\n  const {\n    callMicrotasks\n  } = this._closure;\n  const nativeRequestAnimationFrame = global.requestAnimationFrame;\n  let animationFrameCallbacks = [];\n  let lastNativeAnimationFrameTimestamp = -1;\n  global.__flushAnimationFrame = function (frameTimestamp) {\n    const currentCallbacks = animationFrameCallbacks;\n    animationFrameCallbacks = [];\n    currentCallbacks.forEach(function (f) {\n      return f(frameTimestamp);\n    });\n    callMicrotasks();\n  };\n  global.requestAnimationFrame = function (callback) {\n    animationFrameCallbacks.push(callback);\n    if (animationFrameCallbacks.length === 1) {\n      nativeRequestAnimationFrame(function (timestamp) {\n        if (lastNativeAnimationFrameTimestamp >= timestamp) {\n          return;\n        }\n        lastNativeAnimationFrameTimestamp = timestamp;\n        global.__frameTimestamp = timestamp;\n        global.__flushAnimationFrame(timestamp);\n        global.__frameTimestamp = undefined;\n      });\n    }\n    return -1;\n  };\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js",
  sourceMap: "{\"version\":3,\"names\":[\"setupRequestAnimationFrame\",\"callMicrotasks\",\"_closure\",\"nativeRequestAnimationFrame\",\"global\",\"requestAnimationFrame\",\"animationFrameCallbacks\",\"lastNativeAnimationFrameTimestamp\",\"__flushAnimationFrame\",\"frameTimestamp\",\"currentCallbacks\",\"forEach\",\"f\",\"callback\",\"push\",\"length\",\"timestamp\",\"__frameTimestamp\",\"undefined\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js\"],\"mappings\":\"AAgFA,SAAAA,0BAASA,CAAA,EAA0B;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAKjC,MAAMC,2BAA2B,GAAGC,MAAM,CAACC,qBAAqB;EAChE,IAAIC,uBAAuB,GAAG,EAAE;EAChC,IAAIC,iCAAiC,GAAG,CAAC,CAAC;EAC1CH,MAAM,CAACI,qBAAqB,GAAG,UAAAC,cAAc,EAAI;IAC/C,MAAMC,gBAAgB,GAAGJ,uBAAuB;IAChDA,uBAAuB,GAAG,EAAE;IAC5BI,gBAAgB,CAACC,OAAO,CAAC,UAAAC,CAAC;MAAA,OAAIA,CAAC,CAACH,cAAc,CAAC;IAAA,EAAC;IAChDR,cAAc,CAAC,CAAC;EAClB,CAAC;EACDG,MAAM,CAACC,qBAAqB,GAAG,UAAAQ,QAAQ,EAAI;IACzCP,uBAAuB,CAACQ,IAAI,CAACD,QAAQ,CAAC;IACtC,IAAIP,uBAAuB,CAACS,MAAM,KAAK,CAAC,EAAE;MAIxCZ,2BAA2B,CAAC,UAAAa,SAAS,EAAI;QACvC,IAAIT,iCAAiC,IAAIS,SAAS,EAAE;UAElD;QACF;QACAT,iCAAiC,GAAGS,SAAS;QAC7CZ,MAAM,CAACa,gBAAgB,GAAGD,SAAS;QACnCZ,MAAM,CAACI,qBAAqB,CAACQ,SAAS,CAAC;QACvCZ,MAAM,CAACa,gBAAgB,GAAGC,SAAS;MACrC,CAAC,CAAC;IACJ;IAKA,OAAO,CAAC,CAAC;EACX,CAAC;AACH\"}"
};
var setupRequestAnimationFrame = function () {
  var _e = [new global.Error(), -2, -27];
  var _f = function _f() {
    var nativeRequestAnimationFrame = global.requestAnimationFrame;
    var animationFrameCallbacks = [];
    var lastNativeAnimationFrameTimestamp = -1;
    global.__flushAnimationFrame = function (frameTimestamp) {
      var currentCallbacks = animationFrameCallbacks;
      animationFrameCallbacks = [];
      currentCallbacks.forEach(function (f) {
        return f(frameTimestamp);
      });
      (0, _threads.callMicrotasks)();
    };
    global.requestAnimationFrame = function (callback) {
      animationFrameCallbacks.push(callback);
      if (animationFrameCallbacks.length === 1) {
        nativeRequestAnimationFrame(function (timestamp) {
          if (lastNativeAnimationFrameTimestamp >= timestamp) {
            return;
          }
          lastNativeAnimationFrameTimestamp = timestamp;
          global.__frameTimestamp = timestamp;
          global.__flushAnimationFrame(timestamp);
          global.__frameTimestamp = undefined;
        });
      }
      return -1;
    };
  };
  _f._closure = {
    callMicrotasks: _threads.callMicrotasks
  };
  _f.__initData = _worklet_9468165435498_init_data;
  _f.__workletHash = 9468165435498;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
var _worklet_9801289261028_init_data = {
  code: "function anonymous() {\n  const {\n    runOnJS,\n    reportFatalErrorOnJS,\n    IS_CHROME_DEBUGGER,\n    capturableConsole,\n    IS_JEST,\n    setupMicrotasks,\n    setupRequestAnimationFrame\n  } = this._closure;\n  global.__ErrorUtils = {\n    reportFatalError: function (error) {\n      runOnJS(reportFatalErrorOnJS)({\n        message: error.message,\n        stack: error.stack\n      });\n    }\n  };\n  if (!IS_CHROME_DEBUGGER) {\n    global.console = {\n      assert: runOnJS(capturableConsole.assert),\n      debug: runOnJS(capturableConsole.debug),\n      log: runOnJS(capturableConsole.log),\n      warn: runOnJS(capturableConsole.warn),\n      error: runOnJS(capturableConsole.error),\n      info: runOnJS(capturableConsole.info)\n    };\n  }\n  if (!IS_JEST) {\n    setupMicrotasks();\n    setupRequestAnimationFrame();\n  }\n}",
  location: "/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"runOnJS\",\"reportFatalErrorOnJS\",\"IS_CHROME_DEBUGGER\",\"capturableConsole\",\"IS_JEST\",\"setupMicrotasks\",\"setupRequestAnimationFrame\",\"_closure\",\"global\",\"__ErrorUtils\",\"reportFatalError\",\"error\",\"message\",\"stack\",\"console\",\"assert\",\"debug\",\"log\",\"warn\",\"info\"],\"sources\":[\"/Users/bjaztin/Desktop/taskManagerApp/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js\"],\"mappings\":\"AA2IqB,SAAAA,SAAMA,CAAA;EAAA;IAAAC,OAAA;IAAAC,oBAAA;IAAAC,kBAAA;IAAAC,iBAAA;IAAAC,OAAA;IAAAC,eAAA;IAAAC;EAAA,SAAAC,QAAA;EAIvBC,MAAM,CAACC,YAAY,GAAG;IACpBC,gBAAgB,EAAE,SAAAA,CAAAC,KAAK,EAAI;MACzBX,OAAO,CAACC,oBAAoB,CAAC,CAAC;QAC5BW,OAAO,EAAED,KAAK,CAACC,OAAO;QACtBC,KAAK,EAAEF,KAAK,CAACE;MACf,CAAC,CAAC;IACJ;EACF,CAAC;EACD,IAAI,CAACX,kBAAkB,EAAE;IAGvBM,MAAM,CAACM,OAAO,GAAG;MACfC,MAAM,EAAEf,OAAO,CAACG,iBAAiB,CAACY,MAAM,CAAC;MACzCC,KAAK,EAAEhB,OAAO,CAACG,iBAAiB,CAACa,KAAK,CAAC;MACvCC,GAAG,EAAEjB,OAAO,CAACG,iBAAiB,CAACc,GAAG,CAAC;MACnCC,IAAI,EAAElB,OAAO,CAACG,iBAAiB,CAACe,IAAI,CAAC;MACrCP,KAAK,EAAEX,OAAO,CAACG,iBAAiB,CAACQ,KAAK,CAAC;MACvCQ,IAAI,EAAEnB,OAAO,CAACG,iBAAiB,CAACgB,IAAI;IACtC,CAAC;EACH;EACA,IAAI,CAACf,OAAO,EAAE;IACZC,eAAe,CAAC,CAAC;IACjBC,0BAA0B,CAAC,CAAC;EAC9B;AACF\"}"
};
function initializeUIRuntime() {
  _NativeReanimated.default.installCoreFunctions(callGuardDEV, valueUnpacker);
  var IS_JEST = (0, _PlatformChecker.isJest)();
  var IS_CHROME_DEBUGGER = (0, _PlatformChecker.isChromeDebugger)();
  if (IS_JEST) {
    global.requestAnimationFrame = function (callback) {
      return setTimeout(function () {
        return callback(performance.now());
      }, 0);
    };
  }
  var capturableConsole = _objectSpread({}, console);
  (0, _threads.runOnUIImmediately)(function () {
    var _e = [new global.Error(), -8, -27];
    var _f = function _f() {
      global.__ErrorUtils = {
        reportFatalError: function reportFatalError(error) {
          (0, _threads.runOnJS)(_errors.reportFatalErrorOnJS)({
            message: error.message,
            stack: error.stack
          });
        }
      };
      if (!IS_CHROME_DEBUGGER) {
        global.console = {
          assert: (0, _threads.runOnJS)(capturableConsole.assert),
          debug: (0, _threads.runOnJS)(capturableConsole.debug),
          log: (0, _threads.runOnJS)(capturableConsole.log),
          warn: (0, _threads.runOnJS)(capturableConsole.warn),
          error: (0, _threads.runOnJS)(capturableConsole.error),
          info: (0, _threads.runOnJS)(capturableConsole.info)
        };
      }
      if (!IS_JEST) {
        (0, _threads.setupMicrotasks)();
        setupRequestAnimationFrame();
      }
    };
    _f._closure = {
      runOnJS: _threads.runOnJS,
      reportFatalErrorOnJS: _errors.reportFatalErrorOnJS,
      IS_CHROME_DEBUGGER: IS_CHROME_DEBUGGER,
      capturableConsole: capturableConsole,
      IS_JEST: IS_JEST,
      setupMicrotasks: _threads.setupMicrotasks,
      setupRequestAnimationFrame: setupRequestAnimationFrame
    };
    _f.__initData = _worklet_9801289261028_init_data;
    _f.__workletHash = 9801289261028;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }())();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,